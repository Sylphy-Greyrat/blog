import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as n,o as t}from"./app-Ajq5bhoz.js";const e={};function l(h,i){return t(),a("div",null,i[0]||(i[0]=[n(`<h1 id="session-和过滤器技术" tabindex="-1"><a class="header-anchor" href="#session-和过滤器技术"><span>Session 和过滤器技术</span></a></h1><h2 id="会话的概述" tabindex="-1"><a class="header-anchor" href="#会话的概述"><span>会话的概述</span></a></h2><hr><ul><li>会话：从打开浏览器，到访问网页，到最终关闭浏览器，整个过程就是一次会话。</li><li>会话的特点：包含多个请求，一次完整的会话针对一个用户。</li></ul><h3 id="会话管理技术" tabindex="-1"><a class="header-anchor" href="#会话管理技术"><span>会话管理技术：</span></a></h3><ol><li><p>cookie 技术，客户端技术。</p></li><li><p>session 技术，服务端技术。</p></li></ol><p>购物车案例：买完商品后，加入购物车，买的商品存到什么对象比较合适？</p><ol><li><p>使用 request 域对象保存商品信息。</p><figure><img src="http://101.43.49.28:9000/blog/request域保存信息流程.png" alt="request 域保存信息流程" tabindex="0" loading="lazy"><figcaption>request 域保存信息流程</figcaption></figure><p>结论：使用 request 保存商品信息不可以，因为每次发送请求，就会产生一个新的请求对象。</p></li><li><p>使用 ServletContext 对象保存商品信息。</p><figure><img src="http://101.43.49.28:9000/blog/ServletContext域保存信息流程.png" alt="ServletContext 域保存信息流程" tabindex="0" loading="lazy"><figcaption>ServletContext 域保存信息流程</figcaption></figure><p>结论：使用 ServletContext 对象保存商品信息，可以，但是不合理。</p></li></ol><p>因此在开发中，保存会话过程中产生的数据，采用会话管理技术，也就是使用 cookie 和 session 技术来保存会话过程产生的数据。</p><h2 id="cookie-对象" tabindex="-1"><a class="header-anchor" href="#cookie-对象"><span>Cookie 对象</span></a></h2><hr><ul><li><p>Cookie 的概述</p><p>​ Cookie 是一种会话管理技术，它是用来保存会话过程中产生的数据，然后在浏览器和服务器交互时，会使用 Cookie 里面保存的数据。</p><figure><img src="http://101.43.49.28:9000/blog/Cookie的执行原理.png" alt="Cookie 的执行原理" tabindex="0" loading="lazy"><figcaption>Cookie 的执行原理</figcaption></figure><p>注意：首次访问服务器，浏览器不会携带 cookie 到服务端。</p></li><li><p>Cookie 常用的 api</p><ol><li><p>得到 cookie 对象：Cookie cookie = new Cookie(String key,String value);</p></li><li><p>回写（响应）cookie 到浏览器端：response.addCookie(cookie);</p></li><li><p>得到 cookie 的名称：String key = cookie.getName();</p><p>得到 cookie 的值：String value = cookie.getValue();</p></li><li><p>给 cookie 设置生命时长：setMaxAge(int sr);</p><p>比如：cookie.setMaxAge(60*60*24*7)，说明cookie能存活7天;</p><p>cookie 分类：</p><ol><li>会话级别 cookie，浏览器关闭，cookie 对象就销毁了</li><li>持久化 cookie，通过 setMaxAge() 方法设置</li></ol></li><li><p>给 cookie 设置路径，设置域名：</p><p>setPath(路径的 url)，setDomain(域名);</p><p>比如：域名就是服务器名称，例如：<code>www.baidu.com</code></p></li><li><p>得到 cookie：Cookie[] cookies = request.getCookies();</p></li></ol></li></ul><h2 id="session-对象" tabindex="-1"><a class="header-anchor" href="#session-对象"><span>Session 对象</span></a></h2><hr><h3 id="session-的概述" tabindex="-1"><a class="header-anchor" href="#session-的概述"><span>Session 的概述</span></a></h3><p>session 是一种会话管理技术，session 用来保存会话过程中的数据，保存的数据存储到服务器端。</p><figure><img src="http://101.43.49.28:9000/blog/Session实现原理分析.png" alt="Session 实现原理分析" tabindex="0" loading="lazy"><figcaption>Session 实现原理分析</figcaption></figure><p>原理：基于 cookie 实现的，更确切的说是基于会话级别的 cookie 实现的。</p><h3 id="httpsession-api" tabindex="-1"><a class="header-anchor" href="#httpsession-api"><span>HttpSession API</span></a></h3><ul><li><p>常用方法：</p><ol><li><p>得到 session 的 id(JESSIONID 对应的值)：<em><strong>getId()</strong></em>;</p></li><li><p>设置 session 的生命时长：<em><strong>setMaxInactiveInterval(int interval);</strong></em></p></li><li><p>销毁 session：<em><strong>invalidate();</strong></em></p><p>得到 session：<em><strong>HttpSession session = getSession();</strong></em></p></li><li><p>其他方法去这里查询：<a href="..%5CJAVA_EE_api_%E4%B8%AD%E8%8B%B1%E6%96%87%E5%AF%B9%E7%85%A7%E7%89%88.chm"><em><strong>JAVA-EE-api</strong></em></a></p></li></ol></li><li><p>session 域对象：作用范围一次完整的会话(包含多个请求)</p><ol><li>存值：<em><strong>serAttribute(String key,Object obj);</strong></em></li><li>取值：<em><strong>Object obj = getAttribute(String key);</strong></em></li><li>移除：<em><strong>removeAttribute(String key);</strong></em></li></ol></li><li><p>总结域对象：request 域对象、session 域对象、servletContext 域对象，作用范围依次变大。</p></li></ul><h2 id="filter过滤器对象" tabindex="-1"><a class="header-anchor" href="#filter过滤器对象"><span>Filter过滤器对象</span></a></h2><hr><h3 id="filter的概述" tabindex="-1"><a class="header-anchor" href="#filter的概述"><span>Filter的概述</span></a></h3><p>​ 在开发中，通过浏览器访问服务器端的目标资源，过滤器实现拦截功能，如果过滤器判断是合理的请求，就放行，允许访问目标资源。下图为大概流程：<img src="http://101.43.49.28:9000/blog/Filter拦截过程.png" alt="Filter 拦截过程" loading="lazy"></p><ul><li><p>常用方法：</p><ol><li><em><strong>init()</strong></em> 方法：在过滤器对象被创建后，执行初始化方法</li><li><em><strong>doFilter()</strong></em> 方法：在这个方法里面实现拦截和放行</li><li><em><strong>destory()</strong></em> 方法：在过滤器销毁后，执行。</li></ol></li><li><p>普通的过滤器：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">WebFilter</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">filterName</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;EncodingFilter&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> EncodingFilter</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Filter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> init</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">FilterConfig</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> filterConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ServletException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">      System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;过滤器&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;完成初始化...&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> doFilter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ServletRequest</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ServletResponse</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">FilterChain</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> chain</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> IOException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ServletException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        HttpServletRequest</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> req</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (HttpServletRequest) request;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        HttpServletResponse</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> resp</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (HttpServletResponse) response;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        req</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setCharacterEncoding</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;UTF-8&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        resp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setCharacterEncoding</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;UTF-8&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        resp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setContentType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;text/html&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        chain</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">doFilter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(request,response);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> destroy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;过滤器&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;被销毁...&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>用户权限过滤器</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> AuthenFilter</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Filter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> destroy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> doFilter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ServletRequest</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> req</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ServletResponse</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> resp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">FilterChain</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> chain</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ServletException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> IOException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        HttpServletRequest</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> request</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (HttpServletRequest)req;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        HttpServletResponse</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> response</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(HttpServletResponse)resp;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        HttpSession</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> session</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getSession</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">session</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getAttribute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;LoginUser&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sendRedirect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getContextPath</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/login.jsp&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        chain</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">doFilter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(req, resp);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> init</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">FilterConfig</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> config</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ServletException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,25)]))}const r=s(e,[["render",l]]),d=JSON.parse('{"path":"/posts/javaWeb/Session%E5%92%8C%E8%BF%87%E6%BB%A4%E5%99%A8%E6%8A%80%E6%9C%AF.html","title":"Session 和过滤器技术","lang":"zh-CN","frontmatter":{"title":"Session 和过滤器技术","order":2,"category":["Maven"],"tag":["会话与过滤器","后端"],"date":"2022-06-30T00:00:00.000Z","icon":"iconfont icon-ilter","description":"Session 和过滤器技术 会话的概述 会话：从打开浏览器，到访问网页，到最终关闭浏览器，整个过程就是一次会话。 会话的特点：包含多个请求，一次完整的会话针对一个用户。 会话管理技术： cookie 技术，客户端技术。 session 技术，服务端技术。 购物车案例：买完商品后，加入购物车，买的商品存到什么对象比较合适？ 使用 request 域对象...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Session 和过滤器技术\\",\\"image\\":[\\"http://101.43.49.28:9000/blog/request域保存信息流程.png\\",\\"http://101.43.49.28:9000/blog/ServletContext域保存信息流程.png\\",\\"http://101.43.49.28:9000/blog/Cookie的执行原理.png\\",\\"http://101.43.49.28:9000/blog/Session实现原理分析.png\\",\\"http://101.43.49.28:9000/blog/Filter拦截过程.png\\"],\\"datePublished\\":\\"2022-06-30T00:00:00.000Z\\",\\"dateModified\\":\\"2025-04-30T01:23:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.O\\"}]}"],["meta",{"property":"og:url","content":"https://blog.sylphy.me/posts/javaWeb/Session%E5%92%8C%E8%BF%87%E6%BB%A4%E5%99%A8%E6%8A%80%E6%9C%AF.html"}],["meta",{"property":"og:title","content":"Session 和过滤器技术"}],["meta",{"property":"og:description","content":"Session 和过滤器技术 会话的概述 会话：从打开浏览器，到访问网页，到最终关闭浏览器，整个过程就是一次会话。 会话的特点：包含多个请求，一次完整的会话针对一个用户。 会话管理技术： cookie 技术，客户端技术。 session 技术，服务端技术。 购物车案例：买完商品后，加入购物车，买的商品存到什么对象比较合适？ 使用 request 域对象..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://101.43.49.28:9000/blog/request域保存信息流程.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-30T01:23:37.000Z"}],["meta",{"property":"article:tag","content":"后端"}],["meta",{"property":"article:tag","content":"会话与过滤器"}],["meta",{"property":"article:published_time","content":"2022-06-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-30T01:23:37.000Z"}]]},"git":{"createdTime":1745976217000,"updatedTime":1745976217000,"contributors":[{"name":"Sylphy","username":"Sylphy","email":"sylphy.me@foxmail.com","commits":1,"url":"https://github.com/Sylphy"}]},"readingTime":{"minutes":3.51,"words":1053},"filePathRelative":"posts/javaWeb/Session和过滤器技术.md","excerpt":"\\n<h2>会话的概述</h2>\\n<hr>\\n<ul>\\n<li>会话：从打开浏览器，到访问网页，到最终关闭浏览器，整个过程就是一次会话。</li>\\n<li>会话的特点：包含多个请求，一次完整的会话针对一个用户。</li>\\n</ul>\\n<h3>会话管理技术：</h3>\\n<ol>\\n<li>\\n<p>cookie 技术，客户端技术。</p>\\n</li>\\n<li>\\n<p>session 技术，服务端技术。</p>\\n</li>\\n</ol>\\n<p>购物车案例：买完商品后，加入购物车，买的商品存到什么对象比较合适？</p>\\n<ol>\\n<li>\\n<p>使用 request 域对象保存商品信息。</p>\\n<figure><img src=\\"http://101.43.49.28:9000/blog/request域保存信息流程.png\\" alt=\\"request 域保存信息流程\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>request 域保存信息流程</figcaption></figure>\\n<p>结论：使用 request 保存商品信息不可以，因为每次发送请求，就会产生一个新的请求对象。</p>\\n</li>\\n<li>\\n<p>使用 ServletContext 对象保存商品信息。</p>\\n<figure><img src=\\"http://101.43.49.28:9000/blog/ServletContext域保存信息流程.png\\" alt=\\"ServletContext 域保存信息流程\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>ServletContext 域保存信息流程</figcaption></figure>\\n<p>结论：使用 ServletContext 对象保存商品信息，可以，但是不合理。</p>\\n</li>\\n</ol>","autoDesc":true}');export{r as comp,d as data};
