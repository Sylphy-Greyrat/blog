import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,b as a,o as t}from"./app-Ajq5bhoz.js";const l={};function e(p,i){return t(),n("div",null,i[0]||(i[0]=[a(`<h1 id="spring-boot" tabindex="-1"><a class="header-anchor" href="#spring-boot"><span>Spring Boot</span></a></h1><h2 id="spring-boot-的概述" tabindex="-1"><a class="header-anchor" href="#spring-boot-的概述"><span>Spring Boot 的概述</span></a></h2><hr><ul><li><p>Spring Boot 是基于 Spring 框架开发的全新框架，其设计目的是简新 Sping 应用的初始化搭建和开发过程。</p></li><li><p>Spring Boot 整合了许多框架和第三方库配置，几乎可以达到“开箱即用”</p><p>优点：</p><ol><li>可<em><strong>快速构建</strong></em>独立的 Spring 应用</li><li>直接嵌入<em><strong>Tomcat</strong></em> 、<em><strong>Jetty</strong></em> 和 <em><strong>Undertow</strong></em> 服务器(无需部署 WAR 文件)</li><li>提供<em><strong>依赖启动器</strong></em>简化构建配置</li><li>极大程度的<strong>自动化</strong>配置 Spring 和<em><strong>第三方库</strong></em></li><li>提供<em><strong>生产就绪</strong></em>功能</li><li><em><strong>极少</strong></em>的<em><strong>代码生成</strong></em>和 <em><strong>XML 配置</strong></em></li></ol></li></ul><h2 id="jsp技术" tabindex="-1"><a class="header-anchor" href="#jsp技术"><span>JSP技术</span></a></h2><hr><ol><li><p>JSP (Java Server Pages)的概述</p><ul><li>在 HTML 中嵌入 Java 脚本语音</li><li>由应用服务器中的 JSP 引擎来编译和只行嵌入的 Java 脚本语言命令</li><li>然后将生成的整个页面信息返回给客户端</li></ul></li><li><p>JSP页面组成</p><figure><img src="http://101.43.49.28:9000/blog/JSP页面组成.png" alt="JSP 页面组成" tabindex="0" loading="lazy"><figcaption>JSP 页面组成</figcaption></figure></li><li><p>JSP 执行过程</p><ul><li>Web 容器处理 JSP 文件请求需要经过3个阶段： <ol><li>翻译阶段：JSP 文件会被 Web 容器中的 JSP 引擎转换成 Java 源码</li><li>编译阶段：Java 源码会被编译成可执行的字节码</li><li>执行阶段：容器接受了客户端的请求后，执行编译成字节码的 JSP 文件；处理完请求后，容器把生产的页面反馈给客户端进行显示</li></ol></li></ul></li><li><p>Form 表单的请求处理</p><ul><li><p>用户通过表单控件输入并提交信息</p></li><li><p>JSP 获得表单数据，进行逻辑处理</p></li><li><p>JSP 根据处理结果，转向不同的结果页面</p><figure><img src="http://101.43.49.28:9000/blog/Form表单的处理过程.png" alt="Form 表单的处理过程" tabindex="0" loading="lazy"><figcaption>Form 表单的处理过程</figcaption></figure></li></ul></li><li><p>JSP 常用内置对象</p><ul><li><p>JSP 内置对象是 Web 容器创建的一组对象</p></li><li><p>JSP 内置对象是可以直接在 JSP 页面使用的对象，无需使用“new”获取实例</p></li><li><p>JSP 内置对象的名称是 JSP 的保留字</p></li><li><p>常用内置对象：</p><ol><li><p><em><strong>out 对象</strong></em>：用于向客户端输出数据</p><p>常用方法：</p><ul><li>print()：在页面中打印出字符串信息</li></ul></li><li><p><em><strong>request 对象</strong></em>：主要用于处理客户请求</p><p>常用方法：</p><table><thead><tr><th style="text-align:left;">方法名称</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left;">String getParameter(String name)</td><td>根据页面表单组件名称获取页面提交数据</td></tr><tr><td style="text-align:left;">String[] getParameterValues(String name)</td><td>获取一个页面表单组件对应多个值时的用户的请求数据</td></tr><tr><td style="text-align:left;">void setCharacterEncoding(String charset)</td><td>指定每个请求的编码<br>在调用 <em><strong>request.getParameter()</strong></em> 之前进行设定，可以解决中文乱码问题</td></tr><tr><td style="text-align:left;">request.getRequestDispatcher(String path)</td><td>返回一个 javax.servlet.RequestDispatcher 对象，该对象的 <em><strong>forward()</strong></em> 方法用于转发请求</td></tr></tbody></table></li><li><p><em><strong>response 对象</strong></em>：用户响应客户请求并向客户端输出信息</p><p>常用方法：</p><ul><li>void sendRedirect(String location)：将请求重新定位到一个不同的URL</li></ul></li></ol></li></ul></li></ol><h2 id="spring-boot配置" tabindex="-1"><a class="header-anchor" href="#spring-boot配置"><span>Spring Boot配置</span></a></h2><hr><ol><li><p>Maven 构建 Spring Boot 项目：</p><ol><li><p>Spring Boot 依赖：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    &lt;!-- 引入Spring Boot依赖</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        1.统一进行版本控制</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        2.让当前项目具有spring boot特性</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        3.加载指定的配置文件</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">parent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;spring-boot-dependencies&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;2.3.3.RELEASE&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">parent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependencies</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        &lt;!--引入Web场景依赖启动器，引入spring boot相关依赖--&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;spring-boot-starter-web&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependencies</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>主程序启动类：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.springframework.boot.SpringApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.springframework.boot.autoconfigure.SpringBootApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">SpringBootApplication</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //该类为主程序启动类</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">		SpringApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建一个用于 Web 访问的 Controller</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.springframework.web.bind.annotation.GetMapping</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.springframework.web.bind.annotation.RestController</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">RestController</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     //该注解为组合注解，@ResponseBody+@Controller</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">GetMapping</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/test&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//GetMapping相当于RequestMapping(value=&quot;/hello, method = RequestMethod.GET)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> hello</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">		return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;hello spring boot&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">；</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li><li><p>Spring Initializr 构建 Spring Boot 项目</p></li></ol><h2 id="单元测试" tabindex="-1"><a class="header-anchor" href="#单元测试"><span>单元测试</span></a></h2><hr><ol><li><p>依赖</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;spring-boot-starter-test&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">scope</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;test&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">scope</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>测试文件例子</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">RunWith</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">SpringRunner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)    </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//测试启动器，并加载Spring Boot测试注解</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">SpringBootTest</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     //标记Spring Boot单元测试，并加载项目的applicationcontext上下文环境</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DemoApplicationTests</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	private</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> test www</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Test</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> contextLoads</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> hello</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> www</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hello</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">		System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(hello);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="热部署" tabindex="-1"><a class="header-anchor" href="#热部署"><span>热部署</span></a></h2><hr><ol><li><p>依赖</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;spring-boot-devtools&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>设置</p><figure><img src="http://101.43.49.28:9000/blog/单元测试设置-1.png" alt="单元测试设置-1" tabindex="0" loading="lazy"><figcaption>单元测试设置-1</figcaption></figure><figure><img src="http://101.43.49.28:9000/blog/单元测试设置-2.png" alt="单元测试设置-2" tabindex="0" loading="lazy"><figcaption>单元测试设置-2</figcaption></figure></li></ol><h2 id="spring-boot-依赖管理" tabindex="-1"><a class="header-anchor" href="#spring-boot-依赖管理"><span>Spring Boot 依赖管理</span></a></h2><hr><ol><li><p>spring-boot-starter-parent 依赖</p><p>spring-boot-starter-parent 依赖是通过&lt;properties&gt;标签对一些常用技术框架的依赖文件进行了<em><strong>统一版本号管理</strong></em>。</p></li><li><p>spring-boot-starter-web 依赖</p><p>spring-boot-starter-web 依赖启动器的主要作用是提供 Web 开发场景所需的底层所有依赖文件，它对 Web <em><strong>开发场景所需的依赖文件</strong></em>进行了<em><strong>统一管理</strong></em>。</p></li></ol><h2 id="spring-boot自动配置" tabindex="-1"><a class="header-anchor" href="#spring-boot自动配置"><span>Spring Boot自动配置</span></a></h2><hr><ul><li><em><strong>@SpringBootApplication</strong></em><ul><li><em><strong>@SpringBootConfiguration</strong></em>：表示spring boot配置类</li><li><em><strong>@EnableAutoConfiguration</strong></em>：表示开启自动配置功能 <ul><li><em><strong>@AutoConfigurationPackage</strong></em>：帮助自动配置包</li><li><em><strong>@Import({AutoConfigurationImportSelector.class})</strong></em>：导入其他配置类 <ul><li>getAutoConfigurationEntry：自动将一些配置类进行扫描导入 <em><strong>(这个方法在AutoConfigurationImportSelector.class 中)</strong></em></li></ul></li></ul></li><li><em><strong>@ComponentScan</strong></em>：帮助进行包扫描 <em><strong>(只扫描所在的包及其子包)</strong></em></li></ul></li></ul><p>Spring Boot 应用的启动入口是 <em><strong>@SpringBootApplication</strong></em> 注解标注类中的main()方法；</p><ul><li>其中 <em><strong>@SpringBootApplication</strong></em> 为一个组合注解，包含 <em><strong>@SpringBootConfiguration</strong></em> 、<em><strong>@EnableAutoConfiguration</strong></em> 、<em><strong>@ComponentScan</strong></em> 三个核心注解。</li></ul><h2 id="spring-boot执行流程" tabindex="-1"><a class="header-anchor" href="#spring-boot执行流程"><span>Spring Boot执行流程</span></a></h2><hr><ol><li><p>初始化 Spring Application 实例：</p><ol><li>判断当前项目类型：查看 classpath 类路径 webApplicationType 下是否存在某个特征类</li><li>应用的初始化器设置：获取所有可用的应用初始化器类 ApplicationContextInitializer</li><li>应用的监听设置：获取所有可用的监听器类 ApplicationListener</li><li>设置项目启动类：this.mainApplicationClass = this.deduceMainApplicationClass()</li></ol></li><li><p>初始化Spring Boot项目启动：</p><ol><li><p>获取并运行监听器：获取监听器并运行</p></li><li><p>准备项目运行环境：对项目环境进行预设置</p></li><li><p>应用上下文装配：对项目应用上下文 ApplicationContext 的预配置</p></li><li><p>启动上下文：运行监听器启动配置号的应用上下文</p></li><li><p>运行自定义执行器：调用项目中自定义执行器</p></li><li><p>持续运行上下文：使监听器持续运行配置好的应用上下文</p><figure><img src="http://101.43.49.28:9000/blog/SpringBoot项目启动流程.png" alt="Spring Boot项目启动流程" tabindex="0" loading="lazy"><figcaption>Spring Boot项目启动流程</figcaption></figure></li></ol></li></ol><h2 id="配置文件属性值注入" tabindex="-1"><a class="header-anchor" href="#配置文件属性值注入"><span>配置文件属性值注入</span></a></h2><hr><ol><li><p>使用 <em><strong>@ConfigurationProperties</strong></em> 注入属性</p><ul><li>相关注解： <ol><li><em><strong>@Component</strong></em>：生成当前类的实例对象存到 IOC 容器中</li><li><em><strong>@ConfigurationProperties(prefix = &quot;xxx&quot;)</strong></em> ：将配置文件中的前缀为 xxx 的每个属性的值映射到当前类中是变量上</li></ol></li></ul><p>使用 <em><strong>@ConfigurationProperties</strong></em> 注解批量注入属性值时，要保证配置文件中的属性与对应实体类的属性<em><strong>一致</strong></em> ，否则无法正确获取并注入属性值。</p></li><li><p>使用 <em><strong>@Value</strong></em> 注入属性</p><ul><li>相关注解： <ol><li><em><strong>@Component</strong></em></li><li><em><strong>@Value(&quot;\${<a href="http://test.xxx" target="_blank" rel="noopener noreferrer">test.xxx</a>}&quot;)</strong></em></li></ol></li></ul><p>使用 <em><strong>@Value</strong></em> 注解对每一个属性注入设置，免去了属性 setXX() 方法</p></li></ol><hr><p>两种注解的对比分析：</p><table><thead><tr><th>对比点</th><th>@ConfigurationProperties</th><th>@Value</th></tr></thead><tbody><tr><td>底层框架</td><td>Spring Boot</td><td>Spring</td></tr><tr><td>功能</td><td>批量注入配置文件中的属性</td><td>单个注入</td></tr><tr><td>属性 setXX() 方法</td><td>需要</td><td>不需要</td></tr><tr><td>复杂类型属性注入</td><td>支持</td><td>不支持</td></tr><tr><td>松散绑定</td><td>支持</td><td>不支持</td></tr><tr><td>JSR303 数据校验</td><td>支持</td><td>不支持</td></tr><tr><td>SpEL 表达式</td><td>不支持</td><td>支持</td></tr></tbody></table><h2 id="spring-boot-自定义配置" tabindex="-1"><a class="header-anchor" href="#spring-boot-自定义配置"><span>Spring Boot 自定义配置</span></a></h2><hr><p>​ 如若使用了 <em><strong>@Configuration</strong></em> 则还需添加 <em><strong>@EnableConfigurationProperties(xxx.class)</strong></em> 用以开启配置类的属性注入功能</p><ol><li><p>使用 <em><strong>@PropertySource</strong></em> 加载配置文件</p><ul><li>相关注解： <ol><li><em><strong>@PropertySource(&quot;classpath:xxx.properties&quot;)</strong></em>：指定自定义配置文件的位置和名称</li><li><em><strong>@Configuration</strong></em>：自定义配置类，Spring容器组件(也可使用 <em><strong>@Component</strong></em> 注解代替)</li></ol></li></ul></li><li><p>使用 <em><strong>@ImportResource</strong></em> 加载 XML 配置文件</p><ul><li><p>相关注解：</p><ol><li><em><strong>@ImportResource(&quot;classpath:xxx.xml&quot;)</strong></em>：指定 XML 文件位置</li></ol></li><li><p>注意在测试类中需要引入 <em><strong>ApplicationContext</strong></em> 实体类 Bean，并新增一个测试方法进行输出测试</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ApplicationContext</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> applicationContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Test</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">ImportResource</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;classpath:xxx.xml&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> contextLoads</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">	System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">applicationContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">containsBean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;xxx&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//用以测试实体类Bean是否引入成功</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>使用 <em><strong>@Configuration</strong></em> 编写自定义配置类</p><ul><li><p>相关注解：</p><ol><li><em><strong>@Configuration</strong></em>：定义一个配置类</li><li><em><strong>@Bean</strong></em>：进行组件配置</li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Bean</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;xxx&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//将标注方法的返回值存到spring容器中</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        public</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> test </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">xxx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">		return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>测试类与上一步写法一样</p></li></ul></li></ol><h2 id="多环境配置" tabindex="-1"><a class="header-anchor" href="#多环境配置"><span>多环境配置</span></a></h2><hr><p>在实际开发中，应用程序通常需要部署不同的运行环境中，例如开发环境、测试环境、生产环境等。不同的环境可能需要不同的环境配置，针对这种情况，不可能手活动变更配置文件来适应不同的开发环境，此时就需要对项目进行<em><strong>多环境配置</strong></em>。</p><ol><li><p>profile文件多环境配置</p><ol><li><p>多环境配置文件格式：application-{profile}.properties <em><strong>注：{profile} 为对应具体的环境标识</strong></em></p></li><li><p>激活指定环境的方式</p><ol><li><p>通过命令行方式激活指定环境的配置文件</p><ol><li><p>使用 MVN 的 mvn package 指令打包</p></li><li><p>使用终端进入 target 查找 jar 包，输入以下代码</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>java -jar 名称.jar --spring.profiles.active = {profile}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol></li><li><p>在全局配置文件设置 spring.profiles.actice 属性激活</p><ul><li>在 application.properties 文件下输入 spring.profiles.actice = {profile}</li></ul></li></ol></li></ol></li><li><p>@profile注解多环境配置</p><ul><li>相关注解： <ol><li>@Profile(value = “{profile}”)：作用于类，通过 value 属性指定环境配置</li></ol></li><li>在全局配置文件设置 spring.profiles.actice 属性激活 <ul><li>在application.properties文件下输入spring.profiles.actice = {profile}</li></ul></li></ul></li></ol><h2 id="随机值设置以及参数间引用" tabindex="-1"><a class="header-anchor" href="#随机值设置以及参数间引用"><span>随机值设置以及参数间引用</span></a></h2><hr><ol><li><p>随机值设置</p><ol><li><p>语法格式：\${random.xx} <em><strong>注：xx 表示需要指定生成的随机数类型和范围。</strong></em></p></li><li><p>示例代码：</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#在application.properties文件下</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#配置随机数</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">my.secret</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;"> \${random.value}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#配置随机数为整数</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">my.number</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;"> \${random.int}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#配置随机数为uuid类型</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">my.uuid</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;"> \${random.uuid}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#配置小于10的随机整数</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">my.int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;"> \${random.int(10)}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#配置范围在[1024,2048]之间的随机整数</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">my.int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;"> \${random.int[1024,2048]}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li><li><p>参数间引用</p><ol><li><p>语法格式：\${xx} <em><strong>注：xx 表示先前在配置文件中已经配置过的属性名。</strong></em></p></li><li><p>示例代码：</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">Tom.age</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;"> \${random.int[20,30]}</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">Tom.description</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;"> Tom的年龄可能是 \${Tom.age}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li></ol>`,44)]))}const k=s(l,[["render",e]]),o=JSON.parse('{"path":"/posts/SpringBoot/SpringBoot.html","title":"SpringBoot","lang":"zh-CN","frontmatter":{"title":"SpringBoot","order":2,"category":["SpringBoot"],"tag":["SpringBoot 的概述","后端"],"date":"2022-07-10T00:00:00.000Z","icon":"iconfont icon-bxl-spring-boot","description":"Spring Boot Spring Boot 的概述 Spring Boot 是基于 Spring 框架开发的全新框架，其设计目的是简新 Sping 应用的初始化搭建和开发过程。 Spring Boot 整合了许多框架和第三方库配置，几乎可以达到“开箱即用” 优点： 可快速构建独立的 Spring 应用 直接嵌入Tomcat 、Jetty 和 Und...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringBoot\\",\\"image\\":[\\"http://101.43.49.28:9000/blog/JSP页面组成.png\\",\\"http://101.43.49.28:9000/blog/Form表单的处理过程.png\\",\\"http://101.43.49.28:9000/blog/单元测试设置-1.png\\",\\"http://101.43.49.28:9000/blog/单元测试设置-2.png\\",\\"http://101.43.49.28:9000/blog/SpringBoot项目启动流程.png\\"],\\"datePublished\\":\\"2022-07-10T00:00:00.000Z\\",\\"dateModified\\":\\"2025-04-30T01:23:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.O\\"}]}"],["meta",{"property":"og:url","content":"https://blog.sylphy.me/posts/SpringBoot/SpringBoot.html"}],["meta",{"property":"og:title","content":"SpringBoot"}],["meta",{"property":"og:description","content":"Spring Boot Spring Boot 的概述 Spring Boot 是基于 Spring 框架开发的全新框架，其设计目的是简新 Sping 应用的初始化搭建和开发过程。 Spring Boot 整合了许多框架和第三方库配置，几乎可以达到“开箱即用” 优点： 可快速构建独立的 Spring 应用 直接嵌入Tomcat 、Jetty 和 Und..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://101.43.49.28:9000/blog/JSP页面组成.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-30T01:23:37.000Z"}],["meta",{"property":"article:tag","content":"后端"}],["meta",{"property":"article:tag","content":"SpringBoot 的概述"}],["meta",{"property":"article:published_time","content":"2022-07-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-30T01:23:37.000Z"}]]},"git":{"createdTime":1745976217000,"updatedTime":1745976217000,"contributors":[{"name":"Sylphy","username":"Sylphy","email":"sylphy.me@foxmail.com","commits":1,"url":"https://github.com/Sylphy"}]},"readingTime":{"minutes":8.32,"words":2495},"filePathRelative":"posts/SpringBoot/SpringBoot.md","excerpt":"\\n<h2>Spring Boot 的概述</h2>\\n<hr>\\n<ul>\\n<li>\\n<p>Spring Boot 是基于 Spring 框架开发的全新框架，其设计目的是简新 Sping 应用的初始化搭建和开发过程。</p>\\n</li>\\n<li>\\n<p>Spring Boot 整合了许多框架和第三方库配置，几乎可以达到“开箱即用”</p>\\n<p>优点：</p>\\n<ol>\\n<li>可<em><strong>快速构建</strong></em>独立的 Spring 应用</li>\\n<li>直接嵌入<em><strong>Tomcat</strong></em> 、<em><strong>Jetty</strong></em> 和 <em><strong>Undertow</strong></em> 服务器(无需部署 WAR 文件)</li>\\n<li>提供<em><strong>依赖启动器</strong></em>简化构建配置</li>\\n<li>极大程度的<strong>自动化</strong>配置 Spring 和<em><strong>第三方库</strong></em></li>\\n<li>提供<em><strong>生产就绪</strong></em>功能</li>\\n<li><em><strong>极少</strong></em>的<em><strong>代码生成</strong></em>和 <em><strong>XML 配置</strong></em></li>\\n</ol>\\n</li>\\n</ul>","autoDesc":true}');export{k as comp,o as data};
