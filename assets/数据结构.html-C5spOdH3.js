import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,b as n,a as s,e as m,d as l,w as t,r as i,o as g}from"./app-Ajq5bhoz.js";const d={};function u(y,a){const r=i("font"),c=i("Tabs");return g(),h("div",null,[a[10]||(a[10]=n('<h1 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构"><span>数据结构</span></a></h1><h2 id="数据结构的分类" tabindex="-1"><a class="header-anchor" href="#数据结构的分类"><span>数据结构的分类</span></a></h2><hr><p>​ 常见的数据结构包括数组、链表、栈、队列、哈希表、树、堆、图，它们可以从“逻辑结构”和“物理结构”两个维度进行分类。</p><h3 id="逻辑结构-线性与非线性" tabindex="-1"><a class="header-anchor" href="#逻辑结构-线性与非线性"><span>逻辑结构：线性与非线性</span></a></h3><p>​ <strong>逻辑结构揭示了数据元素之间的逻辑关系</strong>。在数组和链表中，数据按照一定顺序排序，体现了数据之间的线性关系；而在树中，数据从顶部向下按层次排序，表现出“祖先”与“后代”之间的派生关系；图则由节点和边构成，反映了复杂的网络关系。</p><p>​ 如下图所示，逻辑结构可分为“线性”和“非线性”两大类。线性结构比较直观，指数据在逻辑关系上呈线性排序；非线性结构则相反，呈非线性排序。</p><ul><li><strong>线性数据结构：</strong> 数组、链表、栈、队列、哈希表。</li><li><strong>非线性数据结构：</strong> 树、堆、图、哈希表。</li></ul><figure><img src="http://101.43.49.28:9000/blog/线性数据结构与非线性数据结构.png" alt="线性数据结构与非线性数据结构" tabindex="0" loading="lazy"><figcaption>线性数据结构与非线性数据结构</figcaption></figure><p>非线性数据结构可以进一步划分为树形结构和网状结构。</p><ul><li><strong>线性结构：</strong> 数组、链表、队列、栈、哈希表，元素之间是一对一的顺序关系。</li><li><strong>树形结构：</strong> 树、堆、哈希表，元素之间是一对多的关系。</li><li><strong>网状结构：</strong> 图，元素之间是多对多的关系。</li></ul><h3 id="物理结构-连续与分散" tabindex="-1"><a class="header-anchor" href="#物理结构-连续与分散"><span>物理结构：连续与分散</span></a></h3><p>​ <strong>当算法程序运行时，正在处理的数据主要存储在内存中。</strong> 下图展示了一个计算机内存条，其中每个黑色方块都包含一块内存空间。我们可以将内存想象成一个巨大的 Excel 表格，其中每个单元格都可以存储一定大小的数据。</p><p>​ <strong>系统通过内存地址来访问目标位置的数据。</strong> 如下图所示，计算机根据特定规则为表格中的每个单元格分配编号，确保每个内存空间都有唯一的内存地址。有了这些地址，程序便可以访问内存中的数据。</p><figure><img src="http://101.43.49.28:9000/blog/内存条、内存空间、内存地址.png" alt="内存条、内存空间、内存地址" tabindex="0" loading="lazy"><figcaption>内存条、内存空间、内存地址</figcaption></figure><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>​ 值得说明的是，将内存比作 Excel 表格是一个简化的类比，实际内存的工作机制比较复杂，涉及地址空间、内存管理、缓存机制、虚拟内存和物理内存等概念。</p></div><p>​ 内存是所有程序的共享资源，当某块内存被某个程序占用时，则无法被其他程序同时使用了。<strong>因此在数据结构与算法的设计中，内存资源是一个重要的考虑因素</strong>。比如，算法所占用的内存峰值不应超过系统剩余空余内存；如果缺少连续大块的内存空间，那么所选用的数据结构必须能够存储在分散的内存空间内。</p><p>​ 下图所示，<strong>物理结构反映了数据在计算机内存中的存储方式</strong>，可分为连续空间存储（数组）和分散空间存储（链表）。物理结构从底层决定了数据的访问、更新、增删等操作方法，两种物理结构在时间效率和空间效率方面呈现出互补的特点。</p><figure><img src="http://101.43.49.28:9000/blog/连续空间存储与分散空间存储.png" alt="连续空间存储与分散空间存储" tabindex="0" loading="lazy"><figcaption>连续空间存储与分散空间存储</figcaption></figure><p>​ 值得说明的是，<strong>所有数据结构都是基于数组、链表或二者的组合实现的</strong>。例如，栈和队列既可以使用数组实现，也可以使用链表实现；而哈希表的实现可能同时包含数组和链表。</p><ul><li><strong>基于数组可实现：</strong> 栈、队列、哈希表、树、堆、图、矩阵、张量（维度 ≥ 3 的数组）等。</li><li><strong>基于链表可实现：</strong> 栈、队列、哈希表、树、堆、图等。</li></ul><p>​ 基于实现的数据结构也称“静态数据结构”，这意味着此类数据结构在初始化后长度不可变。相对应地，基于链表实现的数据结构也称“动态数据结构”，这类数据结构在初始化后，仍可以在程序运行过程中对其长度进行调整。</p><h2 id="基本数据类型" tabindex="-1"><a class="header-anchor" href="#基本数据类型"><span>基本数据类型</span></a></h2><hr><p>​ 当谈及计算机中的数据时，我们会想到文本、图片、视频、语音、3D 模型等各种形式。尽管这些数据的组织形式各异，但它们都由各种基本数据类型构成。</p><p><strong>基本数据类型是 CPU 可以直接进行运算的类型</strong>，在算法中直接被使用，主要包括以下几种：</p><ul><li>整数类型 byte、short、int、long。</li><li>浮点数类型 float、double，用于表示小数。</li><li>字符类型 char，用于表示各种语言的字母、标点符号甚至表情符号等。</li><li>布尔类型 bool，用于表示“是”与“否”判断。</li></ul><p><strong>基本数据类型以二进制的形式存储在计算机中</strong>。一个二进制位即为 1 比特。在绝大多数现代操作系统中，1 字节 (byte) 由 8 比特 (bit) 组成。</p><p>基本数据类型的取值范围取决于其占用的空间大小。下面以 Java 为例。</p><ul><li>整数类型 byte 占用 1 字节 = 8 比特，可以表示 2<sup>8</sup> 个数字。</li><li>整数类型 int 占用 4 字节 = 32 比特，可以表示 2<sup>32</sup> 个数字。</li></ul><p>下表列举了 Java 中各种基本数据类型的占用空间、取值范围和默认值。</p><table><thead><tr><th>类型</th><th>符号</th><th>占用空间</th><th>最小值</th><th>最大值</th><th>默认值</th></tr></thead><tbody><tr><td>整数</td><td>byte</td><td>1 字节</td><td>-2<sup>7</sup>(-128)</td><td>2<sup>7</sup>-1(127)</td><td>0</td></tr><tr><td></td><td>short</td><td>2 字节</td><td>-2<sup>15</sup></td><td>2<sup>15</sup>-1</td><td>0</td></tr><tr><td></td><td>int</td><td>4 字节</td><td>-2<sup>31</sup></td><td>2<sup>31</sup>-1</td><td>0</td></tr><tr><td></td><td>long</td><td>8 字节</td><td>-2<sup>63</sup></td><td>2<sup>63</sup>-1</td><td>0</td></tr><tr><td>浮点数</td><td>float</td><td>4 字节</td><td>1.175 × 10<sup>-38</sup></td><td>3.403 × 10<sup>38</sup></td><td>0.0f</td></tr><tr><td></td><td>double</td><td>8 字节</td><td>2.225 × 10<sup>-308</sup></td><td>1.798 × 10<sup>308</sup></td><td>0.0</td></tr><tr><td>字符</td><td>char</td><td>2 字节</td><td>0</td><td>2<sup>16</sup>-1</td><td>0</td></tr><tr><td>布尔</td><td>bool</td><td>1 字节</td><td>false</td><td>true</td><td>false</td></tr></tbody></table><p>​ 请注意，上表针对的是 Java 的基本数据类型的情况。每种编程语言都有各自的数据类型定义，它们的占用空间、取值范围和默认值可能会有所不同。</p>',33)),s("ul",null,[a[3]||(a[3]=s("li",null,"在 python 中，整数类型 int 可以是任意大小，只受限于可用内存；浮点数 float 是双精度 64 位；没有 char 类型，单个字符实际上是长度为 1 的字符串 str。",-1)),s("li",null,[a[1]||(a[1]=l("C 和 C++ 未明确规定基本数据类型的大小，而因实现和平台各异。上表遵循 LP64 ")),m(r,{color:"grend"},{default:t(()=>a[0]||(a[0]=[l("数据模型")])),_:1}),a[2]||(a[2]=l("，其用于包括 Linux 和 macOS 在内的 Unix64 位操作系统。"))]),a[4]||(a[4]=s("li",null,"字符 char 的大小在 C 和 C++ 中位 1 字节，在大多数编程言语中取决于特定的字符编码方法。",-1)),a[5]||(a[5]=s("li",null,"即使表示布尔量仅为 1 位（0 或 1），它在内存中通常也存储为 1 字节。这是因为现代计算机 CPU 通常将 1 字节作为最小寻址内存单元。",-1))]),a[11]||(a[11]=s("p",null,[l("​ "),s("strong",null,"基本数据类型提供了数据的“内容类型”，而数据结构提供了数据的“组织方式”"),l("。例如以下代码，我们用相同的数据结构（数组）来存储与表示不同的基本数据类型，包括 int、float、char、bool 等。")],-1)),m(c,{id:"365",data:[{id:"c++"},{id:"java"}],"tab-id":"code"},{title0:t(({value:p,isActive:e})=>a[6]||(a[6]=[l("c++")])),title1:t(({value:p,isActive:e})=>a[7]||(a[7]=[l("java")])),tab0:t(({value:p,isActive:e})=>a[8]||(a[8]=[s("div",{class:"language-c++ line-numbers-mode","data-highlighter":"shiki","data-ext":"c++",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[s("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"// 使用多种基本数据类型来初始化数组")]),l(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"int"),s("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}}," numbers"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"["),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"5"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"];")]),l(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"float"),s("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}}," decimals"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"["),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"5"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"];")]),l(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"char"),s("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}}," characters"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"["),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"5"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"];")]),l(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"bool"),s("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E5C07B"}}," bools"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"["),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"5"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"];")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),tab1:t(({value:p,isActive:e})=>a[9]||(a[9]=[s("div",{class:"language-java line-numbers-mode","data-highlighter":"shiki","data-ext":"java",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[s("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"// 使用多种基本数据类型来初始化数组")]),l(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#C678DD"}},"int"),s("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"[] numbers "),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"="),s("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," new"),s("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#C678DD"}}," int"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}},"["),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"5"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}},"]"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")]),l(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#C678DD"}},"float"),s("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"[] decimals "),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"="),s("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," new"),s("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#C678DD"}}," float"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}},"["),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"5"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}},"]"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")]),l(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#C678DD"}},"char"),s("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"[] characters "),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"="),s("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," new"),s("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#C678DD"}}," char"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}},"["),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"5"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}},"]"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")]),l(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#C678DD"}},"boolean"),s("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"[] bools "),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#56B6C2"}},"="),s("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," new"),s("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#C678DD"}}," boolean"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}},"["),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},"5"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}},"]"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),_:1}),a[12]||(a[12]=n('<p>相关链接：<a href="https://zhuanlan.zhihu.com/p/84453627" target="_blank" rel="noopener noreferrer">同样是占32个坑，凭啥你float就比int的范围更大？- 知乎 (zhihu.com)</a></p><h2 id="数字编码" tabindex="-1"><a class="header-anchor" href="#数字编码"><span>数字编码</span></a></h2><hr><h3 id="原码、反码和补码" tabindex="-1"><a class="header-anchor" href="#原码、反码和补码"><span>原码、反码和补码</span></a></h3><p>所有整数类型能够表示的负数都比正数多一个，例如 byte 的取值范围是 [-128, 127]。原因为：</p><p>首先需要指出，<strong>数字是以“补码”的形式存储在计算机中的</strong>。在分析这样做的原因之前，首先给出三者的定义。</p><ul><li><strong>原码</strong>：我们将数字的二进制表示的最高位视为符号位，其中 0 表示正数，1 表示负数，其余位表示数字的值。</li><li><strong>反码</strong>：正数的反码与其原码相同，负数的反码是对其原码除符号位外的所有位取反。</li><li><strong>补码</strong>：正数的补码与其原码相同，负数的补码是在其反码的基础上加 1。</li></ul><p>下图展示了原码、反码和补码之间的转换方法。</p><figure><img src="http://101.43.49.28:9000/blog/原码、反码与补码之间的相互转换.png" alt="原码、反码与补码之间的相互转换" tabindex="0" loading="lazy"><figcaption>原码、反码与补码之间的相互转换</figcaption></figure><p>​ 「原码 sign-magnitude」虽然最直观，但存在一些局限性。一方面，<strong>负数的原码不能直接用于运算</strong>。例如在原码下计算 1+ (-2)，得到的结果是 -3，这显然是不对的。</p>',10)),a[13]||(a[13]=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mtable",{rowspacing:"0.25em",columnalign:"right left",columnspacing:"0em"},[s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mrow"),s("mn",null,"1"),s("mo",null,"+"),s("mo",{stretchy:"false"},"("),s("mo",null,"−"),s("mn",null,"2"),s("mo",{stretchy:"false"},")")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mrow"),s("mo",null,"→"),s("mn",null,"0000"),s("mtext",null," "),s("mn",null,"0001"),s("mo",null,"+"),s("mn",null,"1000"),s("mtext",null," "),s("mn",null,"0010")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mrow"),s("mo",null,"="),s("mn",null,"1000"),s("mtext",null," "),s("mn",null,"0011")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mrow"),s("mo",null,"→"),s("mo",null,"−"),s("mn",null,"3")])])])])]),s("annotation",{encoding:"application/x-tex"},"\\begin{align*} &1+(-2)\\\\ &→0000\\ 0001+1000\\ 0010\\\\ &=1000\\ 0011\\\\ &→-3 \\end{align*} ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"6em","vertical-align":"-2.75em"}}),s("span",{class:"mord"},[s("span",{class:"mtable"},[s("span",{class:"col-align-r"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"3.25em"}},[s("span",{style:{top:"-5.25em"}},[s("span",{class:"pstrut",style:{height:"2.84em"}}),s("span",{class:"mord"})]),s("span",{style:{top:"-3.75em"}},[s("span",{class:"pstrut",style:{height:"2.84em"}}),s("span",{class:"mord"})]),s("span",{style:{top:"-2.25em"}},[s("span",{class:"pstrut",style:{height:"2.84em"}}),s("span",{class:"mord"})]),s("span",{style:{top:"-0.75em"}},[s("span",{class:"pstrut",style:{height:"2.84em"}}),s("span",{class:"mord"})])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.75em"}},[s("span")])])])]),s("span",{class:"col-align-l"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"3.25em"}},[s("span",{style:{top:"-5.41em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"}),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"−"),s("span",{class:"mord"},"2"),s("span",{class:"mclose"},")")])]),s("span",{style:{top:"-3.91em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"}),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"→"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mord"},"0000"),s("span",{class:"mspace"}," "),s("span",{class:"mord"},"0001"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"1000"),s("span",{class:"mspace"}," "),s("span",{class:"mord"},"0010")])]),s("span",{style:{top:"-2.41em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"}),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mord"},"1000"),s("span",{class:"mspace"}," "),s("span",{class:"mord"},"0011")])]),s("span",{style:{top:"-0.91em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"}),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"→"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mord"},"−"),s("span",{class:"mord"},"3")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.75em"}},[s("span")])])])])])])])])])])],-1)),a[14]||(a[14]=s("p",null,"​ 为了解决此问题，计算机引入了「反码 1's complement」。如果我们先将原码转换为反码，并在反码下计算 1+(-2)，最后结果从反码转换回原码，则可得到正确结果 -1.",-1)),a[15]||(a[15]=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mtable",{rowspacing:"0.25em",columnalign:"right left",columnspacing:"0em"},[s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mrow"),s("mn",null,"1"),s("mo",null,"+"),s("mo",{stretchy:"false"},"("),s("mo",null,"−"),s("mn",null,"2"),s("mo",{stretchy:"false"},")")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mrow"),s("mo",null,"→"),s("mn",null,"0000"),s("mtext",null," "),s("mn",null,"0001"),s("mo",{stretchy:"false"},"("),s("mtext",null,"原码"),s("mo",{stretchy:"false"},")"),s("mo",null,"+"),s("mn",null,"1000"),s("mtext",null," "),s("mn",null,"0010"),s("mo",{stretchy:"false"},"("),s("mtext",null,"原码"),s("mo",{stretchy:"false"},")")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mrow"),s("mo",null,"="),s("mn",null,"0000"),s("mtext",null," "),s("mn",null,"0001"),s("mo",{stretchy:"false"},"("),s("mtext",null,"反码"),s("mo",{stretchy:"false"},")"),s("mo",null,"+"),s("mn",null,"1111"),s("mtext",null," "),s("mn",null,"1101"),s("mo",{stretchy:"false"},"("),s("mtext",null,"反码"),s("mo",{stretchy:"false"},")")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mrow"),s("mo",null,"="),s("mn",null,"1111"),s("mtext",null," "),s("mn",null,"1110"),s("mo",{stretchy:"false"},"("),s("mtext",null,"反码"),s("mo",{stretchy:"false"},")")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mrow"),s("mo",null,"="),s("mn",null,"1000"),s("mtext",null," "),s("mn",null,"0001"),s("mo",{stretchy:"false"},"("),s("mtext",null,"原码"),s("mo",{stretchy:"false"},")")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mrow"),s("mo",null,"→"),s("mo",null,"−"),s("mn",null,"1")])])])])]),s("annotation",{encoding:"application/x-tex"},"\\begin{align*} &1+(-2)\\\\ &→0000\\ 0001(原码)+1000\\ 0010(原码)\\\\ &=0000\\ 0001(反码)+1111\\ 1101(反码)\\\\ &=1111\\ 1110(反码)\\\\ &=1000\\ 0001(原码)\\\\ &→-1 \\end{align*} ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"9em","vertical-align":"-4.25em"}}),s("span",{class:"mord"},[s("span",{class:"mtable"},[s("span",{class:"col-align-r"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"4.75em"}},[s("span",{style:{top:"-6.75em"}},[s("span",{class:"pstrut",style:{height:"2.84em"}}),s("span",{class:"mord"})]),s("span",{style:{top:"-5.25em"}},[s("span",{class:"pstrut",style:{height:"2.84em"}}),s("span",{class:"mord"})]),s("span",{style:{top:"-3.75em"}},[s("span",{class:"pstrut",style:{height:"2.84em"}}),s("span",{class:"mord"})]),s("span",{style:{top:"-2.25em"}},[s("span",{class:"pstrut",style:{height:"2.84em"}}),s("span",{class:"mord"})]),s("span",{style:{top:"-0.75em"}},[s("span",{class:"pstrut",style:{height:"2.84em"}}),s("span",{class:"mord"})]),s("span",{style:{top:"0.75em"}},[s("span",{class:"pstrut",style:{height:"2.84em"}}),s("span",{class:"mord"})])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"4.25em"}},[s("span")])])])]),s("span",{class:"col-align-l"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"4.75em"}},[s("span",{style:{top:"-6.91em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"}),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"−"),s("span",{class:"mord"},"2"),s("span",{class:"mclose"},")")])]),s("span",{style:{top:"-5.41em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"}),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"→"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mord"},"0000"),s("span",{class:"mspace"}," "),s("span",{class:"mord"},"0001"),s("span",{class:"mopen"},"("),s("span",{class:"mord cjk_fallback"},"原码"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"1000"),s("span",{class:"mspace"}," "),s("span",{class:"mord"},"0010"),s("span",{class:"mopen"},"("),s("span",{class:"mord cjk_fallback"},"原码"),s("span",{class:"mclose"},")")])]),s("span",{style:{top:"-3.91em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"}),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mord"},"0000"),s("span",{class:"mspace"}," "),s("span",{class:"mord"},"0001"),s("span",{class:"mopen"},"("),s("span",{class:"mord cjk_fallback"},"反码"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"1111"),s("span",{class:"mspace"}," "),s("span",{class:"mord"},"1101"),s("span",{class:"mopen"},"("),s("span",{class:"mord cjk_fallback"},"反码"),s("span",{class:"mclose"},")")])]),s("span",{style:{top:"-2.41em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"}),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mord"},"1111"),s("span",{class:"mspace"}," "),s("span",{class:"mord"},"1110"),s("span",{class:"mopen"},"("),s("span",{class:"mord cjk_fallback"},"反码"),s("span",{class:"mclose"},")")])]),s("span",{style:{top:"-0.91em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"}),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mord"},"1000"),s("span",{class:"mspace"}," "),s("span",{class:"mord"},"0001"),s("span",{class:"mopen"},"("),s("span",{class:"mord cjk_fallback"},"原码"),s("span",{class:"mclose"},")")])]),s("span",{style:{top:"0.59em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"}),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"→"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mord"},"−"),s("span",{class:"mord"},"1")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"4.25em"}},[s("span")])])])])])])])])])])],-1)),a[16]||(a[16]=s("p",null,[l("​ 另一方面，"),s("strong",null,"数字零的原码有 +0 和 -0 两种表示方式"),l("。这意味着数字零对应两个不同的二进制编码，这可能会带来歧义。比如在条件判断中，如果没有区分正零和负零，则可能会导致判断结果出错。而如果我们想处理正零和负零歧义，则需要引入额外的判断操作，这可能会降低计算机的运算效率。")],-1)),a[17]||(a[17]=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mo",null,"+"),s("mn",null,"0"),s("mo",null,"→"),s("mn",null,"0000"),s("mtext",null," "),s("mn",null,"0000"),s("mspace",{linebreak:"newline"}),s("mo",null,"−"),s("mn",null,"0"),s("mo",null,"→"),s("mn",null,"1000"),s("mtext",null," "),s("mn",null,"0000")]),s("annotation",{encoding:"application/x-tex"},"+0→0000\\ 0000\\\\ -0→1000\\ 0000 ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"+"),s("span",{class:"mord"},"0"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"→"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0000"),s("span",{class:"mspace"}," "),s("span",{class:"mord"},"0000")]),s("span",{class:"mspace newline"}),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"−"),s("span",{class:"mord"},"0"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"→"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1000"),s("span",{class:"mspace"}," "),s("span",{class:"mord"},"0000")])])])])],-1)),a[18]||(a[18]=s("p",null,"​ 与原码一样，反码也存在正负零歧义问题，因此计算机进一步引入了「补码 2's complement」。我们先来观察一下负零的原码、反码、补码的转换过程：",-1)),a[19]||(a[19]=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mtable",{rowspacing:"0.25em",columnalign:"right left",columnspacing:"0em"},[s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mo",null,"−"),s("mn",null,"0"),s("mo",null,"→")])])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mrow"),s("mn",null,"1000"),s("mtext",null," "),s("mn",null,"0000"),s("mo",{stretchy:"false"},"("),s("mtext",null,"原码"),s("mo",{stretchy:"false"},")")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mo",{lspace:"0em",rspace:"0em"},"=")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mrow"),s("mn",null,"1111"),s("mtext",null," "),s("mn",null,"1111"),s("mo",{stretchy:"false"},"("),s("mtext",null,"反码"),s("mo",{stretchy:"false"},")")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mo",null,"="),s("mn",null,"1"),s("mtext",null," ")])])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mrow"),s("mn",null,"0000"),s("mtext",null," "),s("mn",null,"0000"),s("mo",{stretchy:"false"},"("),s("mtext",null,"补码"),s("mo",{stretchy:"false"},")")])])])])]),s("annotation",{encoding:"application/x-tex"},"\\begin{align*} -0→&1000\\ 0000(原码)\\\\ =&1111\\ 1111(反码)\\\\ =1\\ &0000\\ 0000(补码) \\end{align*} ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"4.5em","vertical-align":"-2em"}}),s("span",{class:"mord"},[s("span",{class:"mtable"},[s("span",{class:"col-align-r"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.5em"}},[s("span",{style:{top:"-4.66em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"−"),s("span",{class:"mord"},"0"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"→")])]),s("span",{style:{top:"-3.16em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mrel"},"=")])]),s("span",{style:{top:"-1.66em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mspace"}," ")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2em"}},[s("span")])])])]),s("span",{class:"col-align-l"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.5em"}},[s("span",{style:{top:"-4.66em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"}),s("span",{class:"mord"},"1000"),s("span",{class:"mspace"}," "),s("span",{class:"mord"},"0000"),s("span",{class:"mopen"},"("),s("span",{class:"mord cjk_fallback"},"原码"),s("span",{class:"mclose"},")")])]),s("span",{style:{top:"-3.16em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"}),s("span",{class:"mord"},"1111"),s("span",{class:"mspace"}," "),s("span",{class:"mord"},"1111"),s("span",{class:"mopen"},"("),s("span",{class:"mord cjk_fallback"},"反码"),s("span",{class:"mclose"},")")])]),s("span",{style:{top:"-1.66em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"}),s("span",{class:"mord"},"0000"),s("span",{class:"mspace"}," "),s("span",{class:"mord"},"0000"),s("span",{class:"mopen"},"("),s("span",{class:"mord cjk_fallback"},"补码"),s("span",{class:"mclose"},")")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2em"}},[s("span")])])])])])])])])])])],-1)),a[20]||(a[20]=s("p",null,[l("​ 在负零的反码基础上加 1 会产生进位，但 byte 类型的长度只有 8 位，因此溢出到第 9 位的 1 会被舍弃。也就是说，"),s("strong",null,"负零的补码为 0000 0000，与正零的补码相同"),l("。这意味着在补码表示中只存在一个零，正负零歧义从而得到解决。")],-1)),a[21]||(a[21]=s("p",null,"​ 还剩最后一个问题：byte 类型的取值范围是 [-128, 127]，多出来的一个负数 -128 是如何得到的？区间 [-127, 127] 内的所有整数都有对应的原码、反码和补码，并且原码和补码之间可以互相转换。",-1)),a[22]||(a[22]=s("p",null,[l("​ 然而，"),s("strong",null,"补码 1000 0000 是一个例外，它并没有对应的原码"),l("。根据转换方法，我们得到该补码的原码为 0000 0000。这显然是矛盾的，因为该原码表示数字 0，它的补码应该是自身。计算机规定这个特殊的补码 1000 0000 代表 -128。实际上，(-1) + (-127) 在补码下的计算结果就是 -128。")],-1)),a[23]||(a[23]=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mtable",{rowspacing:"0.25em",columnalign:"right left",columnspacing:"0em"},[s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mrow"),s("mo",{stretchy:"false"},"("),s("mo",null,"−"),s("mn",null,"127"),s("mo",{stretchy:"false"},")"),s("mo",null,"+"),s("mo",{stretchy:"false"},"("),s("mo",null,"−"),s("mn",null,"1"),s("mo",{stretchy:"false"},")")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mrow"),s("mo",null,"→"),s("mn",null,"1111"),s("mtext",null," "),s("mn",null,"1111"),s("mo",{stretchy:"false"},"("),s("mtext",null,"原码"),s("mo",{stretchy:"false"},")"),s("mo",null,"+"),s("mn",null,"1000"),s("mtext",null," "),s("mn",null,"0001"),s("mo",{stretchy:"false"},"("),s("mtext",null,"原码"),s("mo",{stretchy:"false"},")")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mrow"),s("mo",null,"="),s("mn",null,"1000"),s("mtext",null," "),s("mn",null,"0000"),s("mo",{stretchy:"false"},"("),s("mtext",null,"反码"),s("mo",{stretchy:"false"},")"),s("mo",null,"+"),s("mn",null,"1111"),s("mtext",null," "),s("mn",null,"1110"),s("mo",{stretchy:"false"},"("),s("mtext",null,"反码"),s("mo",{stretchy:"false"},")")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mrow"),s("mo",null,"="),s("mn",null,"1000"),s("mtext",null," "),s("mn",null,"0001"),s("mo",{stretchy:"false"},"("),s("mtext",null,"补码"),s("mo",{stretchy:"false"},")"),s("mo",null,"+"),s("mn",null,"1111"),s("mtext",null," "),s("mn",null,"1111"),s("mo",{stretchy:"false"},"("),s("mtext",null,"补码"),s("mo",{stretchy:"false"},")")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mrow"),s("mo",null,"="),s("mn",null,"1000"),s("mtext",null," "),s("mn",null,"0000"),s("mo",{stretchy:"false"},"("),s("mtext",null,"补码"),s("mo",{stretchy:"false"},")")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mrow"),s("mo",null,"→"),s("mo",null,"−"),s("mn",null,"128")])])])])]),s("annotation",{encoding:"application/x-tex"},"\\begin{align*} &(-127)+(-1)\\\\ &→1111\\ 1111(原码)+1000\\ 0001(原码)\\\\ &=1000\\ 0000(反码)+1111\\ 1110(反码)\\\\ &=1000\\ 0001(补码)+1111\\ 1111(补码)\\\\ &=1000\\ 0000(补码)\\\\ &→-128 \\end{align*} ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"9em","vertical-align":"-4.25em"}}),s("span",{class:"mord"},[s("span",{class:"mtable"},[s("span",{class:"col-align-r"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"4.75em"}},[s("span",{style:{top:"-6.75em"}},[s("span",{class:"pstrut",style:{height:"2.84em"}}),s("span",{class:"mord"})]),s("span",{style:{top:"-5.25em"}},[s("span",{class:"pstrut",style:{height:"2.84em"}}),s("span",{class:"mord"})]),s("span",{style:{top:"-3.75em"}},[s("span",{class:"pstrut",style:{height:"2.84em"}}),s("span",{class:"mord"})]),s("span",{style:{top:"-2.25em"}},[s("span",{class:"pstrut",style:{height:"2.84em"}}),s("span",{class:"mord"})]),s("span",{style:{top:"-0.75em"}},[s("span",{class:"pstrut",style:{height:"2.84em"}}),s("span",{class:"mord"})]),s("span",{style:{top:"0.75em"}},[s("span",{class:"pstrut",style:{height:"2.84em"}}),s("span",{class:"mord"})])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"4.25em"}},[s("span")])])])]),s("span",{class:"col-align-l"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"4.75em"}},[s("span",{style:{top:"-6.91em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"}),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"−"),s("span",{class:"mord"},"127"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"−"),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")")])]),s("span",{style:{top:"-5.41em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"}),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"→"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mord"},"1111"),s("span",{class:"mspace"}," "),s("span",{class:"mord"},"1111"),s("span",{class:"mopen"},"("),s("span",{class:"mord cjk_fallback"},"原码"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"1000"),s("span",{class:"mspace"}," "),s("span",{class:"mord"},"0001"),s("span",{class:"mopen"},"("),s("span",{class:"mord cjk_fallback"},"原码"),s("span",{class:"mclose"},")")])]),s("span",{style:{top:"-3.91em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"}),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mord"},"1000"),s("span",{class:"mspace"}," "),s("span",{class:"mord"},"0000"),s("span",{class:"mopen"},"("),s("span",{class:"mord cjk_fallback"},"反码"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"1111"),s("span",{class:"mspace"}," "),s("span",{class:"mord"},"1110"),s("span",{class:"mopen"},"("),s("span",{class:"mord cjk_fallback"},"反码"),s("span",{class:"mclose"},")")])]),s("span",{style:{top:"-2.41em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"}),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mord"},"1000"),s("span",{class:"mspace"}," "),s("span",{class:"mord"},"0001"),s("span",{class:"mopen"},"("),s("span",{class:"mord cjk_fallback"},"补码"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"1111"),s("span",{class:"mspace"}," "),s("span",{class:"mord"},"1111"),s("span",{class:"mopen"},"("),s("span",{class:"mord cjk_fallback"},"补码"),s("span",{class:"mclose"},")")])]),s("span",{style:{top:"-0.91em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"}),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mord"},"1000"),s("span",{class:"mspace"}," "),s("span",{class:"mord"},"0000"),s("span",{class:"mopen"},"("),s("span",{class:"mord cjk_fallback"},"补码"),s("span",{class:"mclose"},")")])]),s("span",{style:{top:"0.59em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"}),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"→"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mord"},"−"),s("span",{class:"mord"},"128")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"4.25em"}},[s("span")])])])])])])])])])])],-1)),a[24]||(a[24]=n('<p>​ <strong>计算机内部的硬件电路主要是基于加法运算设计的</strong>。这是因为加法运算相对于其他运算（比如乘法、除法和减法）来说，硬件实现起来更简单，更容易进行并行化处理，运行速度更快。</p><p>​ 请注意，这并不意味着计算机只能做加法。<strong>通过将加法与一些基本逻辑运算结合，计算机能够实现各种其他的数学运算</strong>。例如，计算减法 a-b 可以转换为计算加法 a+(-b)；计算乘法和除法可以转换为计算多次加法或减法。</p><p>​ 现在我们可以总结出计算机使用补码的原因：基于补码表示，计算机可以用同样的电路和操作来处理正数和负数的加法，不需要设计特殊的硬件电路来处理减法，并且无需特别处理正负零的歧义问题。这大大简化了硬件设计，提高了运算效率。</p><h3 id="浮点数编码" tabindex="-1"><a class="header-anchor" href="#浮点数编码"><span>浮点数编码</span></a></h3><p>int 和 float 长度相同，都是 4 字节，但 float 的取值范围远大于 int。</p><p>实际上，<strong>这是因为浮点数 float 采用了不同的表达方式</strong>。记一个 32 比特长度的二进制数为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>b</mi><mn>31</mn></msub><msub><mi>b</mi><mn>30</mn></msub><msub><mi>b</mi><mn>29</mn></msub><mo>⋯</mo><msub><mi>b</mi><mn>2</mn></msub><msub><mi>b</mi><mn>1</mn></msub><msub><mi>b</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">b_{31}b_{30}b_{29}⋯b_2b_1b_0 </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">31</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">30</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">29</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>根据 IEEE 754 标准，32-bit 长度的 float 有以下三个部分构成。</p><ul><li>符号位 S：占 1 位，对应 b<sub>31</sub>。</li><li>指数位 E：占 8 位，对应 b<sub>30</sub>b<sub>29</sub>⋯b<sub>23</sub>。</li><li>分数位 N：占 23 位，对应 b<sub>22</sub>b<sub>21</sub>⋯b<sub>0</sub>。</li></ul><p>二进制数 float 对应值的计算方法为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>v</mi><mi>a</mi><mi>l</mi><mo>=</mo><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><msub><mi>b</mi><mn>31</mn></msub></msup><mo>×</mo><msup><mn>2</mn><mrow><mo stretchy="false">(</mo><msub><mi>b</mi><mn>30</mn></msub><msub><mi>b</mi><mn>29</mn></msub><mo>⋯</mo><msub><mi>b</mi><mn>23</mn></msub><msub><mo stretchy="false">)</mo><mn>2</mn></msub><mo>−</mo><mn>127</mn></mrow></msup><mo>×</mo><mo stretchy="false">(</mo><mn>1.</mn><msub><mi>b</mi><mn>22</mn></msub><mi>b</mi><mn>21</mn><mo>⋯</mo><msub><mi>b</mi><mn>0</mn></msub><msub><mo stretchy="false">)</mo><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">val=(-1)^{b_{31}}×2^{(b_{30}b_{29}⋯b_{23})_2-127}×(1.b_{22}b{21}⋯b_0)_2 </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1491em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">31</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0213em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathnormal mtight">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">30</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mtight"><span class="mord mathnormal mtight">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">29</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="minner mtight">⋯</span><span class="mord mtight"><span class="mord mathnormal mtight">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">23</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight"><span class="mclose mtight">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight">127</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1.</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">22</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">b</span><span class="mord"><span class="mord">21</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>转化到十进制下的计算公式为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>v</mi><mi>a</mi><mi>l</mi><mo>=</mo><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mi>S</mi></msup><mo>×</mo><msup><mn>2</mn><mrow><mi>E</mi><mo>−</mo><mn>127</mn></mrow></msup><mo>×</mo><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">val=(-1)^S×2^{E-127}×(1+N) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1413em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9747em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">E</span><span class="mbin mtight">−</span><span class="mord mtight">127</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></span></p><p>其中各项的取值范围为：</p>',14)),a[25]||(a[25]=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mi",null,"S"),s("mo",null,"∈"),s("mo",{stretchy:"false"},"{"),s("mn",null,"0"),s("mo",{separator:"true"},","),s("mn",null,"1"),s("mo",{stretchy:"false"},"}"),s("mo",{separator:"true"},","),s("mtext",null,"   "),s("mi",null,"E"),s("mo",null,"∈"),s("mo",{stretchy:"false"},"{"),s("mn",null,"1"),s("mo",{separator:"true"},","),s("mn",null,"2"),s("mo",{separator:"true"},","),s("mo",null,"⋯"),s("mo",{separator:"true"},","),s("mn",null,"254"),s("mo",{stretchy:"false"},"}"),s("mspace",{linebreak:"newline"}),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",null,"+"),s("mi",null,"N"),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",null,"+"),s("mo",{stretchy:"false"},")"),s("munderover",null,[s("mo",null,"∑"),s("mrow",null,[s("mi",null,"i"),s("mo",null,"="),s("mn",null,"1")]),s("mn",null,"23")]),s("msub",null,[s("mi",null,"b"),s("mrow",null,[s("mn",null,"23"),s("mo",null,"−"),s("mi",null,"i")])]),s("msup",null,[s("mn",null,"2"),s("mrow",null,[s("mo",null,"−"),s("mi",null,"i")])]),s("mo",null,"⊂"),s("mo",{stretchy:"false"},"["),s("mn",null,"1"),s("mo",{separator:"true"},","),s("mn",null,"2"),s("mo",null,"−"),s("msup",null,[s("mn",null,"2"),s("mrow",null,[s("mo",null,"−"),s("mn",null,"23")])]),s("mo",{stretchy:"false"},"]")]),s("annotation",{encoding:"application/x-tex"},"S\\in\\lbrace0,1\\rbrace,\\ \\ \\ E\\in\\lbrace1,2,⋯,254\\rbrace\\\\ (1+N)=(1+)\\sum^{23}_{i=1}b_{23-i}2^{-i}\\subset[1,2-2^{-23}] ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7224em","vertical-align":"-0.0391em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"∈"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"{"),s("span",{class:"mord"},"0"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},"}"),s("span",{class:"mpunct"},","),s("span",{class:"mspace"}," "),s("span",{class:"mspace"}," "),s("span",{class:"mspace"}," "),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"E"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"∈"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"{"),s("span",{class:"mord"},"1"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"minner"},"⋯"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"254"),s("span",{class:"mclose"},"}")]),s("span",{class:"mspace newline"}),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"3.0788em","vertical-align":"-1.2777em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1"),s("span",{class:"mord"},"+"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mop op-limits"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.8011em"}},[s("span",{style:{top:"-1.8723em","margin-left":"0em"}},[s("span",{class:"pstrut",style:{height:"3.05em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"i"),s("span",{class:"mrel mtight"},"="),s("span",{class:"mord mtight"},"1")])])]),s("span",{style:{top:"-3.05em"}},[s("span",{class:"pstrut",style:{height:"3.05em"}}),s("span",null,[s("span",{class:"mop op-symbol large-op"},"∑")])]),s("span",{style:{top:"-4.3em","margin-left":"0em"}},[s("span",{class:"pstrut",style:{height:"3.05em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"23")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.2777em"}},[s("span")])])])]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"b"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3117em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"23"),s("span",{class:"mbin mtight"},"−"),s("span",{class:"mord mathnormal mtight"},"i")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2083em"}},[s("span")])])])])]),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8747em"}},[s("span",{style:{top:"-3.113em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"−"),s("span",{class:"mord mathnormal mtight"},"i")])])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"⊂"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"["),s("span",{class:"mord"},"1"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.1141em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8641em"}},[s("span",{style:{top:"-3.113em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"−"),s("span",{class:"mord mtight"},"23")])])])])])])])]),s("span",{class:"mclose"},"]")])])])])],-1)),a[26]||(a[26]=n('<figure><img src="http://101.43.49.28:9000/blog/IEEE754标准下的float的计算示例.png" alt="IEEE 754 标准下的 float 的计算示例" tabindex="0" loading="lazy"><figcaption>IEEE 754 标准下的 float 的计算示例</figcaption></figure><p>观察上图，给定一个实例数据 S=0，E=124，N=2<sup>-2</sup>+2<sup>-3</sup>=0.375，则有：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>v</mi><mi>a</mi><mi>l</mi><mo>=</mo><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mn>0</mn></msup><mo>×</mo><msup><mn>2</mn><mrow><mn>124</mn><mo>−</mo><mn>127</mn></mrow></msup><mo>×</mo><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mn>0.375</mn><mo stretchy="false">)</mo><mo>=</mo><mn>0.171875</mn></mrow><annotation encoding="application/x-tex">val=(-1)^0×2^{124-127}×(1+0.375)=0.171875 </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9474em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">124</span><span class="mbin mtight">−</span><span class="mord mtight">127</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0.375</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0.171875</span></span></span></span></span></p><p><strong>float 的表示方式包含指数位，导致其取值范围远大于 int</strong>。根据以上运算，float 可表示的最大正数为 2<sup>254-127</sup>×(2-2<sup>-23</sup>)≈3.4×10<sup>38</sup>，切换符号位便可以得到最小负数。</p><p><strong>尽管浮点数 float 扩展了取值范围，但其副作用是牺牲了精度</strong>。整数类型 int 将全部 32 比特用于表示数字，数字是均匀分布的；而由于指数位的存在，浮点数 float 的数值越大，相邻两个数字之间的差值就会趋向越大。</p><p>下表，指数位 E=0 和 E=255 具有特殊含义，<strong>用于表示零、无穷大、NaN 等</strong>。</p><table><thead><tr><th>指数位 E</th><th>分数位 N=0</th><th>分数位 N≠0</th><th>计算公式</th></tr></thead><tbody><tr><td>0</td><td>±0</td><td>次正规数</td><td>(-1)<sup>S</sup>×2<sup>-126</sup>×(0.N)</td></tr><tr><td>1,2,⋯,254</td><td>正规数</td><td>正规数</td><td>(-1)<sup>S</sup>×2<sup>E-127</sup>×(1.N)</td></tr><tr><td>255</td><td>±∞</td><td>NaN</td><td></td></tr></tbody></table><p>次正规数显著提升了浮点数的精度。最小正正规数为 2<sup>-126</sup>，最小正次正规数为 2<sup>-126</sup>×2<sup>-23</sup>。</p><p>双精度 double 也采用类似于 float 的表示方法。</p><h2 id="字符编码" tabindex="-1"><a class="header-anchor" href="#字符编码"><span>字符编码</span></a></h2><hr><p>​ 在计算机中，所有数据都是以二进制数的形式存储的，字符 char 也不例外。为了表示字符，因此需要建立一套“字符集”，规定每个字符和二进制数之间的一一对应关系。有了字符集之后，计算机就可以通过查表完成二进制数到字符的转换。</p><h3 id="ascii-字符集" tabindex="-1"><a class="header-anchor" href="#ascii-字符集"><span>ASCII 字符集</span></a></h3><p>​ 「ASCII 码」是最早出现的字符集，其全称为 American Standard Code for Information Interchange（美国标准信息交换代码）。它使用 7 位二进制数（一个字节的低 7 位）表示一个字符，最多能够表示 128 个不同的字符。如下图所示，ASCII 码包括英文字母的大小写、数字 0~9、一些标定符合，以及一些控制字符（如换行符和制表符）。</p><figure><img src="http://101.43.49.28:9000/blog/ASCII码.png" alt="ASCII 码" tabindex="0" loading="lazy"><figcaption>ASCII 码</figcaption></figure><p>​ 然而，<strong>ASCII 码仅能够表示英文</strong>。随着计算机的全球化，诞生了一种能够表示更多语言的「EASCII」字符集。它在 ASCII 的 7 位基础上扩展到 8 位，能够表示 256 个不同的字符。</p><p>​ 在世界范围内，陆续出现了一批适用于不同地区的 EASCII 字符集。这些字符集的前 128 个字符统一为 ASCII 码，后 128 个字符定义不同，以适应不同语言的需求。</p><h3 id="gbk-字符集" tabindex="-1"><a class="header-anchor" href="#gbk-字符集"><span>GBK 字符集</span></a></h3><p>​ <strong>EASCII 码仍然无法满足许多语言的字符数量要求</strong>。比如汉字有近十万个，光日常使用的就有几千个。中国国家标准局于 1980 年发布了「GB2312」字符集，其收录了 6763 个汉字，基本满足了汉字的计算机处理需要。</p><p>​ 然而，GB2312 无法处理部分罕见字和繁体字。「GBK」字符集是在 GB2312 的基础上扩展得到的，它共收录了 21886 个汉字。在 GBK 的编码方案中，ASCII 字符使用一个字节表示，汉字使用两个字节表示。</p><h3 id="unicode-字符集" tabindex="-1"><a class="header-anchor" href="#unicode-字符集"><span>Unicode 字符集</span></a></h3><p>​ 随着计算机技术的蓬勃发展，字符集与编码标准百花齐放，而这带来了许多问题。一方面，这些字符集一般只定义了特定语言的字符，无法在多语言环境下正常工作。另一方面，同一种语言存在多种字符集标准，如果两台计算机使用的是不同的编码标准，则在信息传递时就会出现乱码。</p><p>​ <strong>如果推出一个足够完整的字符集，将世界范围内的所有语言和符号都收录其中，不就可以解决跨语言环境和乱码问题了吗？</strong> 因此一个大而全的字符集 Unicode 应运而生。</p><p>​ 「Unicode」的中文名称为“统一码”，理论上能容纳 100 多万个字符。它致力于将全球范围内的字符纳入统一的字符集之中，提供一种通用的字符集来处理和显示各种语言文字，减少因为编码标准不同而产生的乱码问题。</p><p>​ 自 1991 年发布以来，Unicode 不断扩充新的语言与字符。截至 2022 年 9 月，Unicode 已经包含 149186 个字符，包括各种语言的字符、符号甚至表情符号等。在庞大的 Unicode 字符集中，常用的字符占用 2 字节，有些生僻的字符占用 3 字节甚至 4 字节。</p><p>​ Unicode 是一种通用字符集，本质上是给每个字符分配一个编号（称为“码点”），<strong>但它并没有规定在计算机中如何存储这些字符码点</strong>。但会有一个问题，当多种长度的 Unicode 码点同时出现在一个文本中时，系统如何解析字符？</p><p>​ <strong>一种直接的解决方案是将所有字符存储为等长的编码</strong>。如下图所示，“hello”中的每个字符占用 1 字节，“算法”中的每个字符占用 2 字节。我们可以通过高位填 0 将“Hello 算法”中的所有字符都编码为 2 字节长度。这样系统就可以每隔 2 字节解析一个字符，恢复这个短语的内容了。</p><figure><img src="http://101.43.49.28:9000/blog/Unicode编码示例.png" alt="Unicode 编码示例" tabindex="0" loading="lazy"><figcaption>Unicode 编码示例</figcaption></figure><p>​ 然而 ASCII 码已经向我们证明，编码英文只需 1 字节。若采用上述方案，英文文本占用空间的大小将会是 ASCII 编码下的两倍，非常浪费内存空间。因此，我们需要一种更加高效的 Unicode 编码方法。</p><h3 id="utf-8-编码" tabindex="-1"><a class="header-anchor" href="#utf-8-编码"><span>UTF-8 编码</span></a></h3><p>​ 目前，UTF-8 已成为国际上使用最广泛的 Unicode 编码方法。<strong>它是一种可变长度的编码</strong>，使用 1 到 4 字节来表示一个字符，根据字符的复杂性而变。ASCII 字符只需 1 字节，拉丁字母和希腊字母需要 2 字节，常用的中文字符需要 3 字节，其他的一些生僻字符需要 4 字节。</p><p>UTF-8 的编码规则并不复杂，分为以下两种情况。</p><ul><li>对于长度为 1 字节的字符，将最高位设置为 0 ，其余 7 位设置为 Unicode 码点。值得注意的是，ASCII 字符在 Unicode 字符集中占据了前 128 个码点。也就是说，<strong>UTF-8 编码可以向下兼容 ASCII 码</strong>。这意味着我们可以使用 UTF-8 来解析年代久远的 ASCII 码文本。</li><li>对于长度为 n 字节的字符（其中 n&gt;1），将首个字节的高 n 位都设置为 1，第 n+1 位设置为 0；从第二个字节开始，将每个字节的高 2 位都设置为 10；其余所有位用于填充字符的 Unicode 码点。</li></ul><p>​ 下图展示了“Hello 算法”对应的 UTF-8 编码。观察发现，由于最高 n 位都设置为 1，因此系统可以通过读取最高位 1 的个数来解析出字符的长度为 n。</p><p>​ 但为什么要将其余所有字节的高 2 位都设置为 10 呢？实际上，这个 10 能够起到校验符的作用。假设系统从一个错误的字节开始解析文本，字节头部的 10 能够帮助系统快速判断出异常。</p><p>​ 之所以将 10 当作校验符，是因为在 UTF-8 编码规则下，不可能有字符的最高两位是 10。这个结论可以用反证法来证明：假设一个字符的最高两位是 10，说明该字符的长度为 1，对应 ASCII 码，而 ASCII 码的最高位应该是 0，与假设矛盾。</p><figure><img src="http://101.43.49.28:9000/blog/UTF-8编码示例.png" alt="UTF-8 编码示例" tabindex="0" loading="lazy"><figcaption>UTF-8 编码示例</figcaption></figure><p>除了 UTF-8 之外，常见的编码方式还包括以下两种。</p><ul><li><strong>UTF-16 编码</strong>：使用 2 或 4 字节来表示一个字符。所有的 ASCII 字符和常用的非英语字符，都用 2 字节表示；少数字符需要用到 4 字节表示。对于 2 字节的字符，UTF-16 编码与 Unicode 码点相等。</li><li><strong>UTF-32 编码</strong>：每个字符都使用 4 字节。这意味着 UTF-32 比 UTF-8 和 UTF-16 更占用空间，特别是对于 ASCII 字符占比较高的文本。</li></ul><p>​ 从存储空间占用的角度看，使用 UTF-8 表示英文字符非常高效，因为它仅需 1 字节；使用 UTF-16 编码某些非英文字符（例如中文）会更加高效，因为它仅需 2 字节，而 UTF-8 可能需要 3 字节。</p><p>​ 从兼容性的角度看，UTF-8 的通用性最佳，许多工具和库优先支持 UTF-8。</p><h3 id="编程语音的字符编码" tabindex="-1"><a class="header-anchor" href="#编程语音的字符编码"><span>编程语音的字符编码</span></a></h3><p>​ 对于以往的大多数编程语言，程序运行中的字符串都采用 UTF-16 或 UTF-32 这类等长编码。在等长编码下，我们可以将字符串看作数组来处理，这种做法具有以下优点。</p><ul><li><strong>随机访问：</strong> UTF-16 编码的字符串可以很容易地进行随机访问。UTF-8 是一种变长编码，要想找到第 i 个字符，我们需要从字符串的开始处遍历到第 i 个字符，这需要 Ο(n) 的时间。</li><li><strong>字符计数：</strong> 与随机访问类似，计算 UTF-16 编码的字符串的长度也是 Ο(1) 的操作。但是，计算 UTF-8 编码的字符串的长度需要遍历整个字符串。</li><li><strong>字符串操作：</strong> 在 UTF-16 编码的字符串上，很多字符串操作（如分割、连接、插入、删除等）更容易进行。在 UTF-8 编码的字符串上，进行这些操作通常需要额外的计算，以确保不会产生无效的 UTF-8 编码。</li></ul><p>实际上，编程语言的字符编码方案设计是一个很有趣的话题，设计许多因素。</p><ul><li>Java 的 String 类型使用 UTF-16 编码，每个字符占用 2 字节，这是因为 Java 语言设计之初，人们认为 16 位足以表示所有可能的字符。然而，这是一个不正确的判断。后来 Unicode 规范扩展到了超过 16 位，所以 Java 中的字符现在可能由一对 16 位的值（成为“代理对”）表示。</li><li>JavaScript 和 TypeScript 的字符串使用 UTF-16 编码的原因与 Java 类似。当 1995 年 Netscape 公司首次推出 JavaScript 语言时，Unicode 还处于发展早期，那时候使用 16 位的编码就足以表示所有的 Unicode 字符了。</li><li>C# 使用 UTF-16编码，主要是因为 .NET 平台是由 Microsoft 设计的，而 Microsoft 的很多技术（包括 Windows 操作系统）都广泛使用 UTF-16 编码。</li></ul><p>​ 由于以上编程语言对字符数量的低估，它们不得不采取“代理对”的方式来表示超过 16 位长度的 Unicode 字符。这是一个不得已为之的无奈之举。一方面，包含代理对的字符串中，一个字符可能占用 2 字节或 4 字节，从而丧失了等长编码的优势。另一方面，处理代理对需要增加额外代码，这提高了编程的复杂性和调试难度。</p><p>出于以上原因，部分编程语言提出了一些不同的编码方案。</p><ul><li>Python 中 str 使用 Unicode 编码，并采用一种灵活的字符串表示，存储的字符长度取决于字符串中最大的 Unicode 码点。若字符串中全部是 ASCII 字符，则每个字符占用 1 字节；如果有字符超出了 ASCII 范围，但全部在基本多语言平面（BMP）内，则每个字符占用 2 字节；如果有超出 BMP 的字符，则每个字符占用 4 字节。</li><li>Go 语言的 string 类型在内部使用 UTF-8 编码。Go 语言还提供了 rune 类型，它用于表示单个 Unicode 码点。</li><li>Rust 语言的 str 和 String 类型在内部使用 UTF-8 编码。Rust 也提供了 char 类型，用于表示单个 Unicode 码点。</li></ul><p>​ 需要注意的是，以上讨论的都是字符串在编程语言中的存储方式，<strong>这和字符串如何在文件中存储或在网络中传输时不同的问题</strong>。在文件存储或网络传输中，我们通常会将字符串编码为 UTF-8 格式，以达到最优的兼容性和空间效率。</p>',50))])}const v=o(d,[["render",u]]),f=JSON.parse('{"path":"/posts/algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html","title":"数据结构","lang":"zh-CN","frontmatter":{"category":["算法"],"tag":["数据结构"],"date":"2024-01-18T00:00:00.000Z","icon":"iconfont icon-relation","description":"数据结构 数据结构的分类 ​ 常见的数据结构包括数组、链表、栈、队列、哈希表、树、堆、图，它们可以从“逻辑结构”和“物理结构”两个维度进行分类。 逻辑结构：线性与非线性 ​ 逻辑结构揭示了数据元素之间的逻辑关系。在数组和链表中，数据按照一定顺序排序，体现了数据之间的线性关系；而在树中，数据从顶部向下按层次排序，表现出“祖先”与“后代”之间的派生关系；图...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据结构\\",\\"image\\":[\\"http://101.43.49.28:9000/blog/线性数据结构与非线性数据结构.png\\",\\"http://101.43.49.28:9000/blog/内存条、内存空间、内存地址.png\\",\\"http://101.43.49.28:9000/blog/连续空间存储与分散空间存储.png\\",\\"http://101.43.49.28:9000/blog/原码、反码与补码之间的相互转换.png\\",\\"http://101.43.49.28:9000/blog/IEEE754标准下的float的计算示例.png\\",\\"http://101.43.49.28:9000/blog/ASCII码.png\\",\\"http://101.43.49.28:9000/blog/Unicode编码示例.png\\",\\"http://101.43.49.28:9000/blog/UTF-8编码示例.png\\"],\\"datePublished\\":\\"2024-01-18T00:00:00.000Z\\",\\"dateModified\\":\\"2025-04-30T01:23:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.O\\"}]}"],["meta",{"property":"og:url","content":"https://blog.sylphy.me/posts/algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html"}],["meta",{"property":"og:title","content":"数据结构"}],["meta",{"property":"og:description","content":"数据结构 数据结构的分类 ​ 常见的数据结构包括数组、链表、栈、队列、哈希表、树、堆、图，它们可以从“逻辑结构”和“物理结构”两个维度进行分类。 逻辑结构：线性与非线性 ​ 逻辑结构揭示了数据元素之间的逻辑关系。在数组和链表中，数据按照一定顺序排序，体现了数据之间的线性关系；而在树中，数据从顶部向下按层次排序，表现出“祖先”与“后代”之间的派生关系；图..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://101.43.49.28:9000/blog/线性数据结构与非线性数据结构.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-30T01:23:37.000Z"}],["meta",{"property":"article:tag","content":"数据结构"}],["meta",{"property":"article:published_time","content":"2024-01-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-30T01:23:37.000Z"}]]},"git":{"createdTime":1745976217000,"updatedTime":1745976217000,"contributors":[{"name":"Sylphy","username":"Sylphy","email":"sylphy.me@foxmail.com","commits":1,"url":"https://github.com/Sylphy"}]},"readingTime":{"minutes":22.03,"words":6609},"filePathRelative":"posts/algorithm/数据结构.md","excerpt":"\\n<h2>数据结构的分类</h2>\\n<hr>\\n<p>​\\t常见的数据结构包括数组、链表、栈、队列、哈希表、树、堆、图，它们可以从“逻辑结构”和“物理结构”两个维度进行分类。</p>\\n<h3>逻辑结构：线性与非线性</h3>\\n<p>​\\t<strong>逻辑结构揭示了数据元素之间的逻辑关系</strong>。在数组和链表中，数据按照一定顺序排序，体现了数据之间的线性关系；而在树中，数据从顶部向下按层次排序，表现出“祖先”与“后代”之间的派生关系；图则由节点和边构成，反映了复杂的网络关系。</p>\\n<p>​\\t如下图所示，逻辑结构可分为“线性”和“非线性”两大类。线性结构比较直观，指数据在逻辑关系上呈线性排序；非线性结构则相反，呈非线性排序。</p>","autoDesc":true}');export{v as comp,f as data};
