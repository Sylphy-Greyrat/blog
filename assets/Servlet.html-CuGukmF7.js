import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,b as t,a as i,d as s,o as n}from"./app-Ajq5bhoz.js";const r={};function h(p,e){return n(),l("div",null,e[0]||(e[0]=[t(`<h1 id="servlet" tabindex="-1"><a class="header-anchor" href="#servlet"><span>Servlet</span></a></h1><h2 id="servlet-的配置" tabindex="-1"><a class="header-anchor" href="#servlet-的配置"><span>Servlet 的配置</span></a></h2><hr><h3 id="servlet-的概述" tabindex="-1"><a class="header-anchor" href="#servlet-的概述"><span>Servlet 的概述</span></a></h3><ul><li><p>Servlet 是一个运行在 web 服务器端的一个 java 程序，也可以认为就是一个 java 类，在使用 servlet 时，需要导入 javax.servlet 下的 jar 包，比如：<strong>tomcat 服务器提供了 servlet 的 jar 包，所以在开发时用 tomcat 服务器就不需要再导入 servlet 的 jar 包</strong>。</p></li><li><p>Servlet 它是一个资源，是用来被用户访问的资源，同时是一个动态资源，它是由 sun 指定的 servlet 规范。</p></li><li><p>Servlet 的作用：它是基于 Http 协议的，主要是用来接受客户端发送的请求，处理请求，把数据响应给客户端。</p><figure><img src="http://101.43.49.28:9000/blog/Servlet的用途.png" alt="Servlet 的用途" tabindex="0" loading="lazy"><figcaption>Servlet 的用途</figcaption></figure></li></ul><h3 id="servlet-的依赖" tabindex="-1"><a class="header-anchor" href="#servlet-的依赖"><span>Servlet 的依赖</span></a></h3><p>在 pom.xml 文件中添加 Servlet 依赖。参考配置如下所示：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!--引入Servlet依赖--&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">       &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;javax.servlet&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">     &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;javax.servlet-api&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">     &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;4.0.1&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  &lt;!--引入jsp依赖--&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">       &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;javax.servlet.jsp&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">       &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;jsp-api&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">       &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;2.2&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="servlet的使用" tabindex="-1"><a class="header-anchor" href="#servlet的使用"><span>Servlet的使用</span></a></h2><hr><p>可以参考以下文档： <a href="..%5CJAVA_EE_api_%E4%B8%AD%E8%8B%B1%E6%96%87%E5%AF%B9%E7%85%A7%E7%89%88.chm"><em><strong>JAVA-EE-api</strong></em></a></p>`,11),i("ul",{重写自己所需的方法:""},[i("li",null,[i("p",null,"Servlet 的接口和实现类："),i("p",null,"Servlet 它是一个接口，在 javax.servlet 包下面。"),i("ol",null,[i("li",null,[i("p",null,"Servlet 方法总结："),i("table",null,[i("thead",null,[i("tr",null,[i("th",null,"方法类型"),i("th",null,"方法名")])]),i("tbody",null,[i("tr",null,[i("td",null,"void"),i("td",null,[s("destroy() "),i("br"),s("Called by the servlet container to indicate to a servlet that the servlet is being taken out of service."),i("br"),s("由 servlet 容器调用，指示将从服务中取出该 servlet。")])]),i("tr",null,[i("td",null,"ServletConfig"),i("td",null,[s("getServletConfig()"),i("br"),s("Returns a ServletConfig object, which contains initialization and startup parameters for this servlet."),i("br"),s("返回 ServletConfig 对象，该对象包含此 servlet 的初始化和启动参数。")])]),i("tr",null,[i("td",null,"String"),i("td",null,[s("getServletInfo()"),i("br"),s("Returns information about the servlet, such as author, version, and copyright."),i("br"),s("返回有关 servlet 的信息，比如作者、版本和版权。")])]),i("tr",null,[i("td",null,"void"),i("td",null,[s("init (ServletConfig config)"),i("br"),s("Called by the servlet container to indicate to a servlet that the servlet is being placed into service."),i("br"),s("由 servlet 容器调用，指示将该 servlet 放入服务。")])]),i("tr",null,[i("td",null,"void"),i("td",null,[s("service(ServletRequest req,ServletResponse res)"),i("br"),s("Called by the servlet container to allow the servlet to respond to a request."),i("br"),s("由 servlet 容器调用，以允许 servlet 响应某个请求。")])])])])]),i("li",null,[i("p",null,"GenericServlet 它是一个类，实现了 Servlet 接口")]),i("li",null,[i("p",null,"HttpServlet 它是一个类，实现了 Servlet 接口，同时继承了 GenericServlet")])])]),i("li",null,[i("p",null,"创建 Servlet 三种方式"),i("ol",null,[i("li",null,[i("p",null,"直接实现 Servlet 接口。")]),i("li",null,[i("p",null,"继承 GenericServlet 类。")]),i("li",null,[i("p",null,"继承 HttpServlet 类。"),i("p",null,"一般在开发中，创建 Servlet，通常去继承这个 HttpServlet。"),i("p",null,"比如：class MyServlet extends HttpServlet")])])])],-1),t(`<h2 id="servlet-技术-处理-http-请求" tabindex="-1"><a class="header-anchor" href="#servlet-技术-处理-http-请求"><span>Servlet 技术-<em>处理 Http 请求</em></span></a></h2><hr><h3 id="使用-servlet-接受参数" tabindex="-1"><a class="header-anchor" href="#使用-servlet-接受参数"><span>使用 Servlet 接受参数</span></a></h3><blockquote><ul><li>JavaServlet 中的 HttpServletRequest 提供了 getParameter() 接口用于获取客户端参数</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getParameter</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> name)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><em><strong>说明：该方法的参数 name 为字符串类型，对应于前端的参数名，返回结果为 String 类型，以字符串形式表示所获取到的参数值。</strong></em></p><blockquote><ul><li>需要手动将获取到的字符串转换为整数类型。字符串类型转换为其他类型的参考代码如下：</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/*以下两句为如何以字符串形式表示所获取到的参数值。*/</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> ageStr  </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getParameter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;age&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> age </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Double</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">parseInt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(ageStr);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/**其中s为String类型*/</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> byte</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> b </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Byte</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">parseByte</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(s);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> short</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> t </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Short</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">parseShort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(s);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">parseInt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(s);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> long</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> l </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Long</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">parseLong</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(s);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Float</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> f </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Float</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">parseFloat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(s);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Double</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> d </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Double</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">parseDouble</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(s);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><ul><li><strong>中文乱码产生的原因</strong>：由于 tomcat 服务器使用的是西文 iso-8859-1 的编码方式，而浏览器通常使用中文的 GBK 或者 UTF-8 编码进行中文文字的表示，因此在使用 Servlet 接收中文数据时和输出中文数据时容易产生乱码，解决乱码的方式如下：</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//设置输出编码类型和文档类型</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setCharacterEncoding</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;utf-8&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setContentType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;text/html&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote></blockquote></blockquote><h3 id="使用-servlet-获取-http-报文头部数据" tabindex="-1"><a class="header-anchor" href="#使用-servlet-获取-http-报文头部数据"><span>使用 Servlet 获取 Http 报文头部数据</span></a></h3><ul><li><p>Http 报文头部包含了 Http 通信过程中的协议参数以及客户端浏览器的相关信息，使用 Servlet 可以获取 Http 头部参数，主要的方法如下：</p><p>• String getHeader(String name)：获取指定名称的请求头；</p><p>• Enumeration getHeaderNames()：获取所有请求头名称；</p><p>• int getIntHeader(String name)：获取值为int类型的请求头。</p><p><em><strong>通常为了更便捷的获取 Http 头部信息，我们会使用下面的 API 接口。</strong></em></p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>int getContentLength()</td><td>获取请求正文的字节数，GET 请求没有正文，没有正文返回 -1</td></tr><tr><td>String getContentType()</td><td>获取请求类型，如果请求是 GET，那么这个方法返回 null ；如果是 POST 请求，那么默认为 application/x-www-form-urlencoded</td></tr><tr><td>String getMethod()</td><td>返回请求方法，例如：GET</td></tr><tr><td>Locale getLocale()</td><td>返回当前客户端浏览器支持的 Locale 。java.util.Locale 表示国家和言语，用于国际化</td></tr><tr><td>String getCharacterEncoding()</td><td>获取请求编码，如果没有 setCharacterEncoding() ，那么返回 null。表示使用 ISO-8859-1 编码</td></tr><tr><td>String getContextPath()</td><td>返回上下文路径，例如：/项目名称</td></tr><tr><td>String getRequestURI()</td><td>返回请求URI路径，例如：/hello/oneServlet</td></tr><tr><td>String getServletPath()</td><td>返回Servlet路径，例如：/oneServlet</td></tr><tr><td>String getRemoteAddr()</td><td>返回当前客户端的IP地址</td></tr><tr><td>int getServerPort()</td><td>返回服务器端口号，例如：80</td></tr><tr><td>String getServletPath()</td><td>返回 Servlet 路径，例如：/oneServlet</td></tr></tbody></table></li></ul><h2 id="servlet-技术-页面跳转" tabindex="-1"><a class="header-anchor" href="#servlet-技术-页面跳转"><span>Servlet 技术-<em>页面跳转</em></span></a></h2><hr><h3 id="页面跳转的方式" tabindex="-1"><a class="header-anchor" href="#页面跳转的方式"><span>页面跳转的方式</span></a></h3><ol><li><em><strong>请求转发 forward</strong></em></li><li><em><strong>重定向 redirect</strong></em></li></ol><ul><li>两种跳转方式的区别如下：</li></ul><ol><li>使用方法：请求转发使用的是分发器 forward() 方法，分发器由 request 对象获取;重定向使用的是 response 对象的 sendRedirect()。</li><li>浏览器地址栏：请求转发的浏览器URL地址栏不变；重定向浏览器 URL 的地址栏改变。</li><li>实现放：请求转发是服务器行为，重定向是客户端行为。</li><li>访问次数：转发是浏览器只做了一次访问请求；重定向是浏览器做了至少两次的访问请求。</li><li>数据传递：请求转发允许将对象数据传递到下一个目标资源，而重定新不可以。</li><li>资源范围：请求转发只能跳转到服务器内部资源；重定向可以调整到服务器外部。</li></ol><h4 id="请求转发-forward" tabindex="-1"><a class="header-anchor" href="#请求转发-forward"><span><em><strong>请求转发 forward</strong></em></span></a></h4><p>请求转发的工作流程如下：</p><ol><li><p>客户端发送 Http 请求数据给服务器。</p></li><li><p>服务器接收请求数据并调用第一个 Servlet 处理逻辑。</p></li><li><p>第一个 Servlet 处理完数据后调用 forward() 方法将请求传递给服务器内部的下一个Servlet。</p></li><li><p>第二个 Servlet 处理完数据后将最终处理结果返回给客户端。</p><p>具体过程如图所示：<img src="http://101.43.49.28:9000/blog/request实现请求转发的原理.png" alt="request 实现请求转发的原理" loading="lazy"></p></li><li><p>页面跳转方式</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> dstUrl  </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;/index.jsp&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">RequestDispatcher</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> dispatcher </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getRequestDispatcher</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(dstUrl);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">dispatcher</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">forward</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(request, response);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//也可使用链式调用方式编写</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getRequestDispatcher</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(dstUrl).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">forward</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(request, response);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h4 id="重定向-redirect" tabindex="-1"><a class="header-anchor" href="#重定向-redirect"><span><em><strong>重定向 redirect</strong></em></span></a></h4><ol><li><p>重定向的工作流程如下：</p><ol><li><p>客户端发送 Http 请求数据给服务器。</p></li><li><p>服务器接收请求数据并调用一个 Servlet 处理逻辑。</p></li><li><p>服务器调用 sendRedirect() 方法将处理结果放进 HTTP 响应头中并返回给客户端。</p></li><li><p>客户端收到响应结果后，从 HTTP 响应头中取得相关信息，再次发送请求数据给服务器。</p><p>具体过程如图所示：<img src="http://101.43.49.28:9000/blog/response实现重定向的原理.png" alt="response 实现重定向的原理" loading="lazy"></p></li></ol></li><li><p>页面跳转方式</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> dstUrl  </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;/index.jsp&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sendRedirect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(dstUrl);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="数据传递" tabindex="-1"><a class="header-anchor" href="#数据传递"><span>数据传递</span></a></h3><ul><li>使用请求转发实现页面跳转时，可以使用 <em><strong>request.setAttribute(key, value)</strong></em> ，其中 key 为属性名称，String 类型；value 可以为任意对象。通过请求转发可以传递任意类型数据。在下一个 servlet 或者页面可以通过 <em><strong>Object value = (Object) request.getAttribute(key)</strong></em> 读取传递的对象数据，默认类型为 Object 类型，需要进行类型转换。</li><li>使用重定向实现页面跳转，只能通过 url 进行传参，例如 dstUrl?key1=value&amp;key2=value2 将 key1 和 key2 传递到下一个页面。但是此种传参方式只能传递字符串参数。</li></ul><h2 id="servlet技术-servlet生命周期" tabindex="-1"><a class="header-anchor" href="#servlet技术-servlet生命周期"><span>Servlet技术-<em>Servlet生命周期</em></span></a></h2><hr><h3 id="servlet生命周期" tabindex="-1"><a class="header-anchor" href="#servlet生命周期"><span>Servlet生命周期</span></a></h3><ul><li><p>Servlet的生命分为以下四部分：Servlet实例化 --&gt; 初始化 --&gt; 服务 --&gt; 销毁</p><ol><li><p>实例化：对应与 new 方法。当 Servlet 第一次被访问时，Web 容器将会加载相应的 Servlet 到 Java 虚拟机并执行实例化，此时会生成一个 Servlet 对象。</p></li><li><p>初始化：对应于 init 方法。当 Servlet 容器创建后，会调用并且仅调用一次 init() 方法，用于初始化 Servlet 对象。无论有多少客户机访问 Servlet ，都不会重复执行 init()。</p></li><li><p>服务：对应 service 方法。service() 方法是 Servlet 的核心，负责响应客户的请求。每当一个客户请求一个 HttpServlet 对象，该对象的 service() 方法就要调用，而且传递给这个方法一个 <em><strong>“请求”( ServletRequest )</strong></em> 对象和一个 <em><strong>“响应” (ServletRsponse)</strong></em> 对象作为参数。实际执行中是根据 Http 请求方法调用响应的 do 功能。</p></li><li><p>销毁：对应 destroy 方法。destroy() 方法仅执行一次，只在 Web 服务器端停止并卸载 Servlet 时执行。当 Servlet 对象被销毁时，并释放其占用的资源。</p><figure><img src="http://101.43.49.28:9000/blog/http请求的过程.png" alt="http 请求的过程" tabindex="0" loading="lazy"><figcaption>http 请求的过程</figcaption></figure></li></ol></li><li><p>在 Servlet 接口类中提供了 Servlet 生命周期中的3个方法定义，相关功能说明如下：</p><ol><li><em><strong>init()</strong></em>：负责初始化 Servlet 对象。</li><li><em><strong>service()</strong></em>：负责响应客户端请求。</li><li><em><strong>destroy()</strong></em>：当 Servlet 对象退出时，负责释放占用资源</li></ol></li><li><p>Servlet 生命周期的各个阶段</p><figure><img src="http://101.43.49.28:9000/blog/Servlet生命周期.png" alt="Servlet 生命周期" tabindex="0" loading="lazy"><figcaption>Servlet 生命周期</figcaption></figure><p>注意： 1. 一个 Servlet 对象只有在第一次访问时被创建，之后将常驻内存，并使用该对象处理后的用户请求。</p><p>​ 2. 一个 Servlet 对象在处理不同的客户端请求时，往往使用多线程执行，即针对每一个客户端请求开启一个线程。</p><p>​ 3. Servlet 只有在 web 容器重启或者停止时候才会被销毁。</p></li></ul><h3 id="servlet处理请求的流程" tabindex="-1"><a class="header-anchor" href="#servlet处理请求的流程"><span>Servlet处理请求的流程</span></a></h3><ol><li><p>客户端发送请求给服务器。</p></li><li><p>容器根据请求及 web.xml 判断对应的 Servlet 是否存在，如果不存在则返回 404。</p></li><li><p>容器根据请求及 web.xml 判断对应的 Servlet 是否已经被实例化，若是相应的 Servlet 没有被实例化，则容器将会加载相应的 Servlet 到 Java 虚拟机并实例化。</p></li><li><p>调用实例对象的 service() 方法，并开启一个新的线程去执行相关处理。调用 service() 方法，判断是调用 doGet() 方法还是 doPost() 方法。</p></li><li><p>业务完成后响应相关的页面发送给客户端。</p></li></ol>`,25)]))}const g=a(r,[["render",h]]),o=JSON.parse('{"path":"/posts/javaWeb/Servlet.html","title":"Servlet","lang":"zh-CN","frontmatter":{"title":"Servlet","order":2,"category":["Maven"],"tag":["Servlet","后端"],"date":"2022-09-18T00:00:00.000Z","description":"Servlet Servlet 的配置 Servlet 的概述 Servlet 是一个运行在 web 服务器端的一个 java 程序，也可以认为就是一个 java 类，在使用 servlet 时，需要导入 javax.servlet 下的 jar 包，比如：tomcat 服务器提供了 servlet 的 jar 包，所以在开发时用 tomcat 服务器...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Servlet\\",\\"image\\":[\\"http://101.43.49.28:9000/blog/Servlet的用途.png\\",\\"http://101.43.49.28:9000/blog/request实现请求转发的原理.png\\",\\"http://101.43.49.28:9000/blog/response实现重定向的原理.png\\",\\"http://101.43.49.28:9000/blog/http请求的过程.png\\",\\"http://101.43.49.28:9000/blog/Servlet生命周期.png\\"],\\"datePublished\\":\\"2022-09-18T00:00:00.000Z\\",\\"dateModified\\":\\"2025-04-30T01:23:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.O\\"}]}"],["meta",{"property":"og:url","content":"https://blog.sylphy.me/posts/javaWeb/Servlet.html"}],["meta",{"property":"og:title","content":"Servlet"}],["meta",{"property":"og:description","content":"Servlet Servlet 的配置 Servlet 的概述 Servlet 是一个运行在 web 服务器端的一个 java 程序，也可以认为就是一个 java 类，在使用 servlet 时，需要导入 javax.servlet 下的 jar 包，比如：tomcat 服务器提供了 servlet 的 jar 包，所以在开发时用 tomcat 服务器..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://101.43.49.28:9000/blog/Servlet的用途.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-30T01:23:37.000Z"}],["meta",{"property":"article:tag","content":"后端"}],["meta",{"property":"article:tag","content":"Servlet"}],["meta",{"property":"article:published_time","content":"2022-09-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-30T01:23:37.000Z"}]]},"git":{"createdTime":1745976217000,"updatedTime":1745976217000,"contributors":[{"name":"Sylphy","username":"Sylphy","email":"sylphy.me@foxmail.com","commits":1,"url":"https://github.com/Sylphy"}]},"readingTime":{"minutes":8.74,"words":2622},"filePathRelative":"posts/javaWeb/Servlet.md","excerpt":"\\n<h2>Servlet 的配置</h2>\\n<hr>\\n<h3>Servlet 的概述</h3>\\n<ul>\\n<li>\\n<p>Servlet 是一个运行在 web 服务器端的一个 java 程序，也可以认为就是一个 java 类，在使用 servlet 时，需要导入 javax.servlet 下的 jar 包，比如：<strong>tomcat 服务器提供了 servlet 的 jar 包，所以在开发时用 tomcat 服务器就不需要再导入 servlet 的 jar 包</strong>。</p>\\n</li>\\n<li>\\n<p>Servlet 它是一个资源，是用来被用户访问的资源，同时是一个动态资源，它是由 sun 指定的 servlet 规范。</p>\\n</li>\\n<li>\\n<p>Servlet 的作用：它是基于 Http 协议的，主要是用来接受客户端发送的请求，处理请求，把数据响应给客户端。</p>\\n<figure><img src=\\"http://101.43.49.28:9000/blog/Servlet的用途.png\\" alt=\\"Servlet 的用途\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>Servlet 的用途</figcaption></figure>\\n</li>\\n</ul>","autoDesc":true}');export{g as comp,o as data};
