import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,b as a,a as s,d as e,o as t}from"./app-Ajq5bhoz.js";const p={};function r(o,n){return t(),i("div",null,n[0]||(n[0]=[a('<h1 id="mvc-设计模式" tabindex="-1"><a class="header-anchor" href="#mvc-设计模式"><span>MVC 设计模式</span></a></h1><h2 id="mvc-设计模式的概述" tabindex="-1"><a class="header-anchor" href="#mvc-设计模式的概述"><span>MVC 设计模式的概述</span></a></h2><hr><p>MVC 模式是 Web 开发中最常用的一种设计模式，规范了 Web 数据流的流程，通过数据、视图以及控制分离的方法来组织代码，提高了软件的灵活性和复用性，同时使程序具有对象化特征，也更容易维护。</p><ul><li>MVC包括以下三种对象： <ol><li>模型层（Model）：指从物理世界中抽象出来的对象模型，是应用逻辑的反应；它封装了数据和对数据的操作，是实际进行数据处理的地方（模型层与数据库才有交互）。</li><li>视图层（View）：是应用和用户之间的接口，它负责将应用显示给用户和显示模型的状态。</li><li>制器（Controller）:控制器负责视图和模型之间的交互，控制对用户输入的响应、响应方式和流程；它主要负责两方面的动作，一是把用户的请求分发到相应的模型，二是吧模型的改变及时地反映到视图上。</li></ol></li></ul><h2 id="mvc-的数据流程和实现方法" tabindex="-1"><a class="header-anchor" href="#mvc-的数据流程和实现方法"><span>MVC 的数据流程和实现方法</span></a></h2><hr><ul><li><p>MVC 设计模式流程</p><ol><li>用户发起 HTTP 请求。</li><li>Web 服务器接收到请求后，根据请求的url地址将请求转发到相应的 servlet 进行处理。注意：控制器是和用户交互的接口。</li><li>Servlet 获取用户请求的相关参数，并根据用户的请求调用模型层相应操作接口。</li><li>模型层调用数据库查询接口，进行数据查询。</li><li>数据库返回相关的查询结果。</li><li>模型层对相应的查询结果进行处理，并返回给控制器。</li><li>控制器将封装好的查询结果传递给视图页面。</li><li>视图页面获取查询结果，并进行页面渲染输出。</li></ol><p>MVC 设计模式流程如下图所示：</p><figure><img src="http://101.43.49.28:9000/blog/MVC设计模式流程.png" alt="MVC 设计模式流程" tabindex="0" loading="lazy"><figcaption>MVC 设计模式流程</figcaption></figure><p>MVC模式各个组件所对应的技术如下图所示：</p><figure><img src="http://101.43.49.28:9000/blog/MVC模式的各个组件.png" alt="MVC 模式的各个组件" tabindex="0" loading="lazy"><figcaption>MVC 模式的各个组件</figcaption></figure></li></ul><h2 id="el-表达式" tabindex="-1"><a class="header-anchor" href="#el-表达式"><span>EL 表达式</span></a></h2><hr><h3 id="el-表达式的概述" tabindex="-1"><a class="header-anchor" href="#el-表达式的概述"><span>EL 表达式的概述</span></a></h3><ul><li><p>EL 在开发中，通常是用来获取域对象中保存的值，基本语法：${域对象的名称}。</p><p>比如说：request.setAttribute(&quot;key&quot;,&quot;value123&quot;); ${key},获取的值就是&quot;value123&quot;。</p><p>如果域对象的名称写错了，使用 EL 表达式获取值，获取的是&quot;&quot;而不会获取NULL。</p></li></ul><h3 id="el-表达式的标识符" tabindex="-1"><a class="header-anchor" href="#el-表达式的标识符"><span>EL 表达式的标识符</span></a></h3><p>在 EL 书写过程中，会使用一些符号来标记变量、函数名等，这些符号称之为标识符。<br> 书写规范：</p><ol><li>不能以数字开头</li><li>不能包含 EL 中的关键字：and，or 等</li><li>不能使用 EL 表达式的隐式对象</li><li>不能包含特殊符号，比如：下划线、正斜杠等</li></ol><h3 id="el-中的变量" tabindex="-1"><a class="header-anchor" href="#el-中的变量"><span>EL 中的变量</span></a></h3><ul><li>基本格式：${域对象的名称}，这个域对象的名称可以理解为就是 EL 中的变量，那这个变量就不需要定义了，可以直接使用。</li></ul><h3 id="el-中的常量" tabindex="-1"><a class="header-anchor" href="#el-中的常量"><span>EL 中的常量</span></a></h3>',18),s("ol",null,[s("li",null,"布尔常量：true 或 false"),s("li",null,"数字常量：整型、浮点常量，使用方法与 java 相似"),s("li",{EL的字符串常量:""},"字符串常量：使用方法与 java 相似，比如：$"),s("li",{null:""},"NULL 常量：$")],-1),s("h3",{id:"el-中的运算符",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#el-中的运算符"},[s("span",null,"EL 中的运算符")])],-1),s("ol",null,[s("li",{"user.name":""},[s("p",null,"点运算符：获取域对象中属性的值。比如：$")]),s("li",null,[s("p",null,"方括号运算符：在域对象里，有的属性包含特殊字符，所以用方括号的方式来获取值。"),s("p",null,"比如："),s("div",{class:"language-jsp line-numbers-mode","data-highlighter":"shiki","data-ext":"jsp",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[s("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",null,"<%")]),e(`
`),s("span",{class:"line"},[s("span",null,"	Map<String,String> map = new HashMap<String,String>();")]),e(`
`),s("span",{class:"line"},[s("span",null,'	map.put("my-name","map的值");')]),e(`
`),s("span",{class:"line"},[s("span",null,'	request.setAttribute("user",map);')]),e(`
`),s("span",{class:"line"},[s("span",null,"%>")]),e(`
`),s("span",{class:"line"},[s("span",null,'${user["my-name"]}')])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])])]),s("li",null,[s("p",null,[e("算术运算符:+ - * / ，比如：1+3=${1+3} "),s("em",null,"返回 int 类型")])]),s("li",null,[s("p",null,[e("比较运算符：> < >= <= != ==，比如：1大于3吗： ${1>3} "),s("em",null,"返回 boolean 类型")])]),s("li",null,[s("p",null,"逻辑运算符：&&(and)、||(or)、!(not)")]),s("li",null,[s("p",null,[e("empty 运算符：用来判断与对象中的值是否存在，不存在返回为 true，否则返回的结果是 false。比如：${empty "),s("a",{href:"http://user.name",target:"_blank",rel:"noopener noreferrer"},"user.name"),e("} "),s("em",null,"返回 boolean 类型")])]),s("li",null,[s("p",null,"三目运算符：参照 java 的用法。")])],-1),s("h3",{id:"el-中的隐式对象",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#el-中的隐式对象"},[s("span",null,"EL 中的隐式对象")])],-1),s("ol",null,[s("li",{"pageContext.request.contextPath":""},[s("p",null,"pageContext 对象：为了获取 jsp 中的隐式对象。比如：获取项目的路径：$")]),s("li",null,[s("p",null,"web 域相关的对象"),s("p",null,"域作用范围从小到大：pageContext -> request -> session -> application(servletContext)"),s("p",null,"EL 表达式获取域对象中的值：如果域对象的名称相同，获取的是域对象作用范围最小的值。"),s("p",null,"​ 与 pageContext 对象的 findAttribute 方法的效果一样的。")]),s("li",null,[s("p",null,"param 和 paramValues 对象：获取表单提交的数据。"),s("p",null,"比如："),s("div",{class:"language-jsp line-numbers-mode","data-highlighter":"shiki","data-ext":"jsp",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[s("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",null,'num1:<input type="text" name="num1" /><br/>')]),e(`
`),s("span",{class:"line"},[s("span",null,'num2:<input type="text" name="num" /><br/>')]),e(`
`),s("span",{class:"line"},[s("span",null,'num3:<input type="text" name="num" /><br/>')]),e(`
`),s("span",{class:"line"},[s("span",null,'<input type="submit" name="提交" /> &nbsp;&nbsp; <input type="reset" name="重填" />')]),e(`
`),s("span",{class:"line"},[s("span",null,"<hr/>")]),e(`
`),s("span",{class:"line"},[s("span",null,"num1:${param.num1}<br/>")]),e(`
`),s("span",{class:"line"},[s("span",null,"num2:${paramValues.num[0]}<br/>")]),e(`
`),s("span",{class:"line"},[s("span",null,"num3:${paramValues.num[1]}<br/>")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])])]),s("li",null,[s("p",null,"cookie 对象：获取 cookie 的名称，获取 cookie 的值"),s("p",null,"比如："),s("div",{class:"language-jsp line-numbers-mode","data-highlighter":"shiki","data-ext":"jsp",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[s("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",null,'<% response.addCookie(new Cookie("userName","itcast")); %>')]),e(`
`),s("span",{class:"line"},[s("span",null,"获取cookie的对象：${cookie.userName}<br/>")]),e(`
`),s("span",{class:"line"},[s("span",null,"获取cookie的名称：${cookie.userName.name}<br/>")]),e(`
`),s("span",{class:"line"},[s("span",null,"获取cookie的值：${cookie.userName.value}<br/>")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])])])],-1),a(`<h2 id="jstl" tabindex="-1"><a class="header-anchor" href="#jstl"><span>JSTL</span></a></h2><hr><h3 id="jstl-的概述" tabindex="-1"><a class="header-anchor" href="#jstl-的概述"><span>JSTL 的概述</span></a></h3><ul><li>JSTL：JavaServer Pages Standard Tag Libary，java 服务器段页面的标准标签库，其实就是在 jsp 页面上使用的标签库， JSTL 标签库有五个组成，通常使用核心标签库。</li><li><em><strong>在 jsp 页面上引入标签库：&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;<a href="http://java.sun.com/jsp/jstl/core" target="_blank" rel="noopener noreferrer">http://java.sun.com/jsp/jstl/core</a>&quot; %&gt;</strong></em></li></ul><h3 id="jstl-的配置" tabindex="-1"><a class="header-anchor" href="#jstl-的配置"><span>JSTL 的配置</span></a></h3><ol><li><p>下载 JSTL 的 zip 包，并解压到目录中。</p></li><li><p>将 jstl 相应的 jar 包添加到工程 lib 目录下。</p><figure><img src="http://101.43.49.28:9000/blog/JSTL的配置-1.png" alt="JSTL 的配置-1" tabindex="0" loading="lazy"><figcaption>JSTL 的配置-1</figcaption></figure></li><li><p>在 IDEA 中配置 JSTL 的 tld 模板，<em><strong>URL:<code>http://java.sun.com/jsp/jstl/core</code>。</strong></em></p><figure><img src="http://101.43.49.28:9000/blog/JSTL的配置-2.png" alt="JSTL 的配置-2" tabindex="0" loading="lazy"><figcaption>JSTL 的配置-2</figcaption></figure></li><li><p>添加 JSTL jar 包，修复 artifact 的错误。</p><figure><img src="http://101.43.49.28:9000/blog/JSTL的配置-3.png" alt="JSTL 的配置-3" tabindex="0" loading="lazy"><figcaption>JSTL 的配置-3</figcaption></figure></li></ol><h3 id="jstl-中的-core-标签" tabindex="-1"><a class="header-anchor" href="#jstl-中的-core-标签"><span>JSTL 中的 Core 标签</span></a></h3><ol><li><p>&lt;c:out&gt;标签：<em><strong>向网页输出内容</strong></em></p><p>基本语法：</p><ol><li><p>&lt;c:out value=&quot;EL表达式获取值&quot; default=&quot;值&quot; escapeXml=&quot;true 或者 false&quot;&gt;&lt;/c:out&gt;</p><p>比如：</p><div class="language-jsp line-numbers-mode" data-highlighter="shiki" data-ext="jsp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;c:out value=&quot;\${param.username}&quot; default=&quot;unknown&quot; escapeXml=&quot;true&quot;&gt;&lt;/c:out&gt;</span></span>
<span class="line"><span>&lt;!-- 输出结果为 unknown --&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>&lt;c:out value=&quot;EL表达式获取值&quot; escapeXml=&quot;true 或者 false&quot;&gt; 默认值 &lt;/c:out&gt;</p><p>比如：</p><div class="language-jsp line-numbers-mode" data-highlighter="shiki" data-ext="jsp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;c:out value=&quot;\${param.username}&quot; escapeXml=&quot;true&quot;&gt;unknown&lt;/c:out&gt;</span></span>
<span class="line"><span>  &lt;!-- 输出结果为 unknown --&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p><em><strong>default</strong></em>：如果 value 属性获取到了值，就输出这个值，如果没有获取到，就输出 default 属性对应的值。</p><p><em><strong>escapeXml(默认值为 true)</strong></em>：如果值为true，就会把 html 标记当成普通的字符串输出，如果值为 false，就会正常解析 html 标记，正常输出。</p></li><li><p>&lt;c:if&gt;标签：<em><strong>进行条件判断，和 java 类中的 if 相似</strong></em></p><p>基本语法：</p><ol><li><p>&lt;c:if test=&quot;条件表达式&quot; var=&quot;变量名称&quot; scope=&quot;域的范围&quot;&gt;&lt;/c:if&gt;</p></li><li><p>&lt;c:if test=&quot;条件表达式&quot; var=&quot;变量名称&quot; scope=&quot;域的范围&quot;&gt;标签体内容&lt;/c:if&gt;<em><strong>(在开发中常用)</strong></em></p><p>比如：</p><div class="language-jsp line-numbers-mode" data-highlighter="shiki" data-ext="jsp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;c:set var=&quot;key&quot; value=&quot;1&quot; scope=&quot;request&quot; property=&quot;key&quot;&gt;&lt;/c:set&gt;</span></span>
<span class="line"><span>&lt;c:if test=&quot;\${key==1}&quot;&gt;</span></span>
<span class="line"><span>	hello c:if标签</span></span>
<span class="line"><span>&lt;/c:if&gt;</span></span>
<span class="line"><span>&lt;!-- 输出结果为 hello c:if标签 --&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p><em><strong>test</strong></em>：如果返回值为 true，就输出标签体内容，否则就不输出。</p></li><li><p>&lt;c:choose&gt;标签：<em><strong>进行条件判断，和 java 类中的 if ,else if(),else if()……else 相似</strong></em></p><p>基本语法：</p><div class="language-jsp line-numbers-mode" data-highlighter="shiki" data-ext="jsp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;c:choose&gt;		&lt;!-- if --&gt;</span></span>
<span class="line"><span>	&lt;c:when test=&quot;条件表达式&quot;&gt;标签体内容&lt;/c:when&gt;		&lt;!-- else if --&gt;</span></span>
<span class="line"><span>	&lt;c:when test=&quot;条件表达式&quot;&gt;标签体内容&lt;/c:when&gt;</span></span>
<span class="line"><span>	……</span></span>
<span class="line"><span>	&lt;c:otherwise&gt;标签体内容&lt;/c:otherwise&gt;		&lt;!-- else --&gt;</span></span>
<span class="line"><span>&lt;/c:choose&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>&lt;c:forEach&gt;标签：<em><strong>遍历域对象中的数组和集合，和 java 类中的 for 循环相似</strong></em></p><p>基本语法：</p><ol><li><p>&lt;c:forEach var=&quot;yuanshu&quot; items=&quot;数组或者集合中的值&quot; begin=&quot;下标&quot; end=&quot;结束的下标&quot; step=&quot;遍历的增量&quot;&gt;&lt;/c:forEach&gt;</p><p>普通 for：for(int i=0;i&lt;数组或者集合中的长度;i++){ yuanshu };</p><p>比如：</p><div class="language-jsp line-numbers-mode" data-highlighter="shiki" data-ext="jsp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;%</span></span>
<span class="line"><span>	List colorsList = new ArrayList();</span></span>
<span class="line"><span>        colorsList.add(&quot;red&quot;);</span></span>
<span class="line"><span>	colorsList.add(&quot;yellow&quot;);</span></span>
<span class="line"><span>	colorsList.add(&quot;blue&quot;);</span></span>
<span class="line"><span>	colorsList.add(&quot;green&quot;);</span></span>
<span class="line"><span>	colorsList.add(&quot;black&quot;);</span></span>
<span class="line"><span>	colorsList.add(&quot;gray&quot;);</span></span>
<span class="line"><span>	request.setAttribute(&quot;list&quot;,colorsList);</span></span>
<span class="line"><span>%&gt;</span></span>
<span class="line"><span>&lt;br/&gt;</span></span>
<span class="line"><span>&lt;c:forEach var=&quot;yy&quot; items=&quot;\${list}&quot; begin=&quot;1&quot; end=&quot;4&quot; step=&quot;2&quot;&gt;</span></span>
<span class="line"><span>	\${yy}&lt;br/&gt; </span></span>
<span class="line"><span>&lt;/c:forEach&gt;</span></span>
<span class="line"><span>&lt;!-- 结果输出为yellow green --&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>&lt;c:forEach var=&quot;yuanshu&quot; items=&quot;数组或者集合中的值&quot;&gt;&lt;/c:forEach&gt;</p><p>增强 for：for(String yuanshu : 数组或者集合){ yuanshu };</p><p>比如：</p><div class="language-jsp line-numbers-mode" data-highlighter="shiki" data-ext="jsp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;%</span></span>
<span class="line"><span>	Map userMap = new HashMap();</span></span>
<span class="line"><span>	userMap.put(&quot;Tom&quot;,&quot;123&quot;);</span></span>
<span class="line"><span>	userMap.put(&quot;Make&quot;,&quot;123&quot;);</span></span>
<span class="line"><span>	userMap.put(&quot;Lina&quot;,&quot;123&quot;);</span></span>
<span class="line"><span>	request.setAttribute(&quot;map&quot;,userMap);</span></span>
<span class="line"><span>%&gt;</span></span>
<span class="line"><span>&lt;br/&gt;</span></span>
<span class="line"><span>&lt;c:forEach var=&quot;m&quot; items=&quot;\${map}&quot;&gt;</span></span>
<span class="line"><span>	key: \${m.key}-----value:\${m.value}&lt;br/&gt;</span></span>
<span class="line"><span>&lt;/c:forEach&gt;</span></span>
<span class="line"><span>&lt;!-- 结果输出为--&gt;</span></span>
<span class="line"><span>&lt;!-- key: Tom-----value:123 --&gt;</span></span>
<span class="line"><span>&lt;!-- key: Make-----value:123 --&gt;</span></span>
<span class="line"><span>&lt;!-- key: Lina-----value:123 --&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p><em><strong>varStatus</strong></em>：count 表示序号，index 表示索引(下标)，first 判断是否是第一个元素，last 判断是否是最后一个元素</p></li><li><p>&lt;c:param&gt;标签和&lt;c:url&gt;标签：<em><strong>设置路径和传递参数。</strong></em></p><p>基本语法：</p><div class="language-jsp line-numbers-mode" data-highlighter="shiki" data-ext="jsp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;c:url var=&quot;变量名称&quot; url=&quot;路径值&quot;&gt;</span></span>
<span class="line"><span>	&lt;c:param name=&quot;属性名称&quot; value=&quot;属性值&quot;&gt;&lt;/c:param&gt;</span></span>
<span class="line"><span>	&lt;c:param name=&quot;属性名称&quot; value=&quot;属性值&quot;&gt;&lt;/c:param&gt;</span></span>
<span class="line"><span>	……………………</span></span>
<span class="line"><span>&lt;/c:url&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>开发的访问路径：</p><ol><li><p>绝对路径：</p><ol><li><code>http://localhost:8080/test/login.html</code></li><li><code>/test/login.html</code></li></ol></li><li><p>相对路径：</p><p>直接写访问的资源路径：比如：login.</p></li></ol></li><li><p>&lt;c:set&gt;标签：<em><strong>获取值，和 java 类中的 setAttribute() 很相似</strong></em></p><p>基本语法</p><ul><li><p>&lt;c:set var=&quot;变量名称&quot; value=&quot;变量值&quot; scope=&quot;域的范围&quot; property=&quot;对象的属性名称&quot;&gt;&lt;/c:set&gt;</p><p>比如：</p><div class="language-jsp line-numbers-mode" data-highlighter="shiki" data-ext="jsp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;!-- 相当于request.setAttribute(&quot;key&quot;,1); --&gt;</span></span>
<span class="line"><span>&lt;c:set var=&quot;key&quot; value=&quot;1&quot; scope=&quot;request&quot; property=&quot;key&quot;&gt;&lt;/c:set&gt;</span></span>
<span class="line"><span>&lt;!-- 结果输出为 1 --&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><h2 id="其他设计模式" tabindex="-1"><a class="header-anchor" href="#其他设计模式"><span>其他设计模式</span></a></h2><hr><p>可以参考以下网址：<a href="https://juejin.cn/post/6844903854174126088" target="_blank" rel="noopener noreferrer">设计模式看了又忘，忘了又看？</a></p>`,11)]))}const d=l(p,[["render",r]]),h=JSON.parse('{"path":"/posts/javaWeb/MVC%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html","title":"MVC 设计模式","lang":"zh-CN","frontmatter":{"title":"MVC 设计模式","order":2,"category":["Maven"],"tag":["MVC","后端"],"date":"2022-07-11T00:00:00.000Z","icon":"iconfont icon-MVCkaifamoshi","description":"MVC 设计模式 MVC 设计模式的概述 MVC 模式是 Web 开发中最常用的一种设计模式，规范了 Web 数据流的流程，通过数据、视图以及控制分离的方法来组织代码，提高了软件的灵活性和复用性，同时使程序具有对象化特征，也更容易维护。 MVC包括以下三种对象： 模型层（Model）：指从物理世界中抽象出来的对象模型，是应用逻辑的反应；它封装了数据和对...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MVC 设计模式\\",\\"image\\":[\\"http://101.43.49.28:9000/blog/MVC设计模式流程.png\\",\\"http://101.43.49.28:9000/blog/MVC模式的各个组件.png\\",\\"http://101.43.49.28:9000/blog/JSTL的配置-1.png\\",\\"http://101.43.49.28:9000/blog/JSTL的配置-2.png\\",\\"http://101.43.49.28:9000/blog/JSTL的配置-3.png\\"],\\"datePublished\\":\\"2022-07-11T00:00:00.000Z\\",\\"dateModified\\":\\"2025-04-30T01:23:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.O\\"}]}"],["meta",{"property":"og:url","content":"https://blog.sylphy.me/posts/javaWeb/MVC%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:title","content":"MVC 设计模式"}],["meta",{"property":"og:description","content":"MVC 设计模式 MVC 设计模式的概述 MVC 模式是 Web 开发中最常用的一种设计模式，规范了 Web 数据流的流程，通过数据、视图以及控制分离的方法来组织代码，提高了软件的灵活性和复用性，同时使程序具有对象化特征，也更容易维护。 MVC包括以下三种对象： 模型层（Model）：指从物理世界中抽象出来的对象模型，是应用逻辑的反应；它封装了数据和对..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://101.43.49.28:9000/blog/MVC设计模式流程.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-30T01:23:37.000Z"}],["meta",{"property":"article:tag","content":"后端"}],["meta",{"property":"article:tag","content":"MVC"}],["meta",{"property":"article:published_time","content":"2022-07-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-30T01:23:37.000Z"}]]},"git":{"createdTime":1745976217000,"updatedTime":1745976217000,"contributors":[{"name":"Sylphy","username":"Sylphy","email":"sylphy.me@foxmail.com","commits":1,"url":"https://github.com/Sylphy"}]},"readingTime":{"minutes":7.61,"words":2283},"filePathRelative":"posts/javaWeb/MVC设计模式.md","excerpt":"\\n<h2>MVC 设计模式的概述</h2>\\n<hr>\\n<p>MVC 模式是 Web 开发中最常用的一种设计模式，规范了 Web 数据流的流程，通过数据、视图以及控制分离的方法来组织代码，提高了软件的灵活性和复用性，同时使程序具有对象化特征，也更容易维护。</p>\\n<ul>\\n<li>MVC包括以下三种对象：\\n<ol>\\n<li>模型层（Model）：指从物理世界中抽象出来的对象模型，是应用逻辑的反应；它封装了数据和对数据的操作，是实际进行数据处理的地方（模型层与数据库才有交互）。</li>\\n<li>视图层（View）：是应用和用户之间的接口，它负责将应用显示给用户和显示模型的状态。</li>\\n<li>制器（Controller）:控制器负责视图和模型之间的交互，控制对用户输入的响应、响应方式和流程；它主要负责两方面的动作，一是把用户的请求分发到相应的模型，二是吧模型的改变及时地反映到视图上。</li>\\n</ol>\\n</li>\\n</ul>","autoDesc":true}');export{d as comp,h as data};
