import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,b as p,a as s,d as l,e as t,w as a,r as e,o as d}from"./app-Ajq5bhoz.js";const h={},u={"css-module":"."},o={"css-module":"."},g={"css-module":"."};function A(y,i){const n=e("font");return d(),k("div",null,[i[628]||(i[628]=p('<h1 id="开发手册" tabindex="-1"><a class="header-anchor" href="#开发手册"><span>开发手册</span></a></h1><h2 id="编程规约" tabindex="-1"><a class="header-anchor" href="#编程规约"><span>编程规约</span></a></h2><ul><li><strong>粗体</strong>为强制!!!</li><li><em>斜体</em>为推荐!!</li><li>正常体为参考!</li></ul><h3 id="命名风格" tabindex="-1"><a class="header-anchor" href="#命名风格"><span>命名风格</span></a></h3><hr>',5)),s("ol",null,[s("li",null,[s("p",null,[s("strong",null,[i[2]||(i[2]=l("代码中的命名均不能")),t(n,{color:"orange"},{default:a(()=>i[0]||(i[0]=[l("以下划线或美元符号开始")])),_:1}),i[3]||(i[3]=l("，也不能")),t(n,{color:"orange"},{default:a(()=>i[1]||(i[1]=[l("以下划线或美元符号结束")])),_:1}),i[4]||(i[4]=l("。"))])]),s("ul",null,[s("li",null,[t(n,{color:"red"},{default:a(()=>i[5]||(i[5]=[l("反例：")])),_:1}),i[6]||(i[6]=l(" _ name / _ name / $ name / name_ / name $ / name_"))])])]),s("li",null,[i[11]||(i[11]=s("p",null,[s("strong",null,"代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式"),l("。")],-1)),i[12]||(i[12]=s("p",null,"说明：正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音命名方式也要避免采用。",-1)),s("ul",null,[s("li",null,[t(n,{color:"grend"},{default:a(()=>i[7]||(i[7]=[l("正例：")])),_:1}),i[8]||(i[8]=l("alibaba / taobao / youku / hangzhou 等国际通用的名称，可视同英文。"))]),s("li",null,[t(n,{color:"red"},{default:a(()=>i[9]||(i[9]=[l("反例：")])),_:1}),i[10]||(i[10]=l("DaZhePromotion [打折] / getPingfenByName() [评分] / int 某变量 = 3"))])])]),s("li",null,[s("p",null,[s("strong",null,[t(n,{color:"pink"},{default:a(()=>i[13]||(i[13]=[l("类名")])),_:1}),i[14]||(i[14]=l("使用 UpperCamelCase 风格，但以下情形例外：DO / BO / DTO / VO / AO / PO / UID 等。"))])]),s("p",null,[i[16]||(i[16]=l("说明：大驼峰式命名法（UpperCamelCase）为")),t(n,{color:"cornflowerblue"},{default:a(()=>i[15]||(i[15]=[l("每一个单词的首字母")])),_:1}),i[17]||(i[17]=l("都采用大写字母。"))]),s("ul",null,[s("li",null,[t(n,{color:"grend"},{default:a(()=>i[18]||(i[18]=[l("正例：")])),_:1}),i[19]||(i[19]=l("MarcoPolo / UserDO / XmlService / TcpUdpDeal / TaPromotion"))])])]),s("li",null,[s("p",null,[s("strong",null,[t(n,{color:"pink"},{default:a(()=>i[20]||(i[20]=[l("方法名、参数名、成员变量、局部变量")])),_:1}),i[21]||(i[21]=l("都统一使用 lowerCamelCase 风格，必须遵从驼峰形式。"))])]),s("p",null,[i[24]||(i[24]=l("说明：小驼峰式命名法（LowerCamelCase）为")),t(n,{color:"cornflowerblue"},{default:a(()=>i[22]||(i[22]=[l("第一个单词")])),_:1}),i[25]||(i[25]=l("以小写字母开始，")),t(n,{color:"cornflowerblue"},{default:a(()=>i[23]||(i[23]=[l("第二个单词及以后的每个单词的首字母")])),_:1}),i[26]||(i[26]=l("大写。"))]),s("ul",null,[s("li",null,[t(n,{color:"grend"},{default:a(()=>i[27]||(i[27]=[l("正例：")])),_:1}),i[28]||(i[28]=l("localValue / getHttpMessage() / inputUserId"))])])]),s("li",null,[s("p",null,[s("strong",null,[t(n,{color:"pink"},{default:a(()=>i[29]||(i[29]=[l("常量")])),_:1}),i[30]||(i[30]=l("命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。"))])]),s("ul",null,[s("li",null,[t(n,{color:"grend"},{default:a(()=>i[31]||(i[31]=[l("正例：")])),_:1}),i[32]||(i[32]=l("MAX_STOCK_COUNT"))]),s("li",null,[t(n,{color:"red"},{default:a(()=>i[33]||(i[33]=[l("反例：")])),_:1}),i[34]||(i[34]=l("MAX_COUNT"))])])]),s("li",null,[s("p",null,[s("strong",null,[t(n,{color:"pink"},{default:a(()=>i[35]||(i[35]=[l("抽象类")])),_:1}),i[38]||(i[38]=l("命名使用 Abstract 或 Base 开头；")),t(n,{color:"pink"},{default:a(()=>i[36]||(i[36]=[l("异常类")])),_:1}),i[39]||(i[39]=l("命名使用 Exception 结尾；")),t(n,{color:"pink"},{default:a(()=>i[37]||(i[37]=[l("测试类")])),_:1}),i[40]||(i[40]=l("命名以它要测试的类的名称开始，以 Test 结尾。"))])])]),s("li",null,[i[45]||(i[45]=s("p",null,[s("strong",null,"类型与中括号紧挨相连来表示数组。")],-1)),s("ul",null,[s("li",null,[t(n,{color:"grend"},{default:a(()=>i[41]||(i[41]=[l("正例：")])),_:1}),i[42]||(i[42]=l("定义整形数组 int[] arrayDemo;"))]),s("li",null,[t(n,{color:"red"},{default:a(()=>i[43]||(i[43]=[l("反例：")])),_:1}),i[44]||(i[44]=l("在 main 参数中，使用 String args[] 来定义。"))])])]),s("li",null,[s("p",null,[s("strong",null,[t(n,{color:"pink"},{default:a(()=>i[46]||(i[46]=[l("POJO 类")])),_:1}),i[47]||(i[47]=l("中布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误。"))])]),s("ul",null,[s("li",null,[t(n,{color:"red"},{default:a(()=>i[48]||(i[48]=[l("反例：")])),_:1}),i[49]||(i[49]=l("定义为基本数据类型 Boolean isDeleted 的属性，它的方法也是 isDeleted()，RPC 框架在反向解析的时候，“误以为”对应的属性名称是 deleted，导致属性获取不到，进而抛出异常。"))])])]),s("li",null,[i[52]||(i[52]=s("p",null,[s("strong",null,"包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式。")],-1)),s("ul",null,[s("li",null,[t(n,{color:"grend"},{default:a(()=>i[50]||(i[50]=[l("正例：")])),_:1}),i[51]||(i[51]=l("应用工具类包名为 com.alibaba.ai.util、类名为 MessageUtils（此规则参考 spring 的框架结构）"))])])]),s("li",null,[i[55]||(i[55]=s("p",null,[s("strong",null,"杜绝完全不规范的缩写，避免望文不知义。")],-1)),s("ul",null,[s("li",null,[t(n,{color:"red"},{default:a(()=>i[53]||(i[53]=[l("反例：")])),_:1}),i[54]||(i[54]=l("AbstractClass “缩写”命名成 AbsClass；condition “缩写”命名成 condi，此类随意缩写严重降低了代码的可阅读性。"))])])]),s("li",null,[i[60]||(i[60]=s("p",null,[s("em",null,"为了达到代码自解释的目标，任何自定义编程元素在命名时，使用尽量完整的单词组合来表达其意。")],-1)),s("ul",null,[s("li",null,[t(n,{color:"grend"},{default:a(()=>i[56]||(i[56]=[l("正例：")])),_:1}),i[57]||(i[57]=l("在 JDK 中，表达原子更新的类名为：AtomicReferenceFieldUpdater。"))]),s("li",null,[t(n,{color:"red"},{default:a(()=>i[58]||(i[58]=[l("反例：")])),_:1}),i[59]||(i[59]=l("变量 int a 的随意命名方式。"))])])]),s("li",null,[s("p",null,[s("em",null,[i[62]||(i[62]=l("如果")),t(n,{color:"pink"},{default:a(()=>i[61]||(i[61]=[l("模块、接口、类、方法")])),_:1}),i[63]||(i[63]=l("使用了设计模式，在命名时需体现出具体模式。"))])]),i[66]||(i[66]=s("p",null,"说明：将设计模式体现在名字中，有利于阅读者快速理解架构设计理念。",-1)),s("ul",null,[s("li",null,[t(n,{color:"grend"},{default:a(()=>i[64]||(i[64]=[l("正例：")])),_:1}),i[65]||(i[65]=l("public class OrderFactory ; public class LoginProxy ; public class ResourceObserver ;"))])])]),s("li",null,[s("p",null,[s("em",null,[t(n,{color:"pink"},{default:a(()=>i[67]||(i[67]=[l("接口类")])),_:1}),i[70]||(i[70]=l("中的方法和属性不要加任何修饰符号")),t(n,{color:"cornflowerblue"},{default:a(()=>i[68]||(i[68]=[l("（ public 也不要加）")])),_:1}),i[71]||(i[71]=l("，保持代码的简洁性，并加上")),t(n,{color:"cornflowerblue"},{default:a(()=>i[69]||(i[69]=[l("有效的 Javadoc 注释")])),_:1}),i[72]||(i[72]=l("。尽量不要在接口里定义变量，如果一定要定义变量，肯定是与接口方法相关，并且是整个应用的基础常量。"))])]),i[77]||(i[77]=s("p",null,"说明：JDK8 中接口允许有默认实现，那么这个 default 方法，是对所有实现类都有价值的默认实现。",-1)),s("ul",null,[s("li",null,[t(n,{color:"grend"},{default:a(()=>i[73]||(i[73]=[l("正例：")])),_:1}),i[74]||(i[74]=l('接口方法签名 void commit() ; 接口基础常量 String COMPANY = "alibaba" ;'))]),s("li",null,[t(n,{color:"red"},{default:a(()=>i[75]||(i[75]=[l("反例：")])),_:1}),i[76]||(i[76]=l("接口方法定义 public abstract void f() ;"))])])]),s("li",null,[s("p",null,[i[79]||(i[79]=l("接口和")),t(n,{color:"pink"},{default:a(()=>i[78]||(i[78]=[l("实现类")])),_:1}),i[80]||(i[80]=l("的命名有两套规则："))]),s("ol",null,[s("li",null,[s("p",null,[s("strong",null,[i[82]||(i[82]=l("对于 Service 和 ")),t(n,{color:"pink"},{default:a(()=>i[81]||(i[81]=[l("DAO 类")])),_:1}),i[83]||(i[83]=l("，基于 SOA 的理念，暴露出来的服务一定是接口，内部的实现类用 Impl 的后缀与接口区别。"))])]),s("ul",null,[s("li",null,[t(n,{color:"grend"},{default:a(()=>i[84]||(i[84]=[l("正例：")])),_:1}),i[85]||(i[85]=l("CacheServiceImpl 实现 CacheService 接口。"))])])]),s("li",null,[i[88]||(i[88]=s("p",null,[s("strong",null,"如果是形容能力的接口名称，取对应的形容词为接口名（通常是 –able 的形式）。")],-1)),s("ul",null,[s("li",null,[t(n,{color:"grend"},{default:a(()=>i[86]||(i[86]=[l("正例：")])),_:1}),i[87]||(i[87]=l("AbstractTranslator 实现 Translatable 接口。"))])])])])]),s("li",null,[t(n,{color:"pink"},{default:a(()=>i[89]||(i[89]=[l("枚举类名")])),_:1}),i[93]||(i[93]=l("建议带上 Enum 后缀，")),t(n,{color:"cornflowerblue"},{default:a(()=>i[90]||(i[90]=[l("枚举成员名称需要全大写，单词间用下划线隔开")])),_:1}),i[94]||(i[94]=l("。")),i[95]||(i[95]=s("p",null,"说明：枚举其实就是特殊的类，域成员均为常量，且构造方法被默认强制是私有。",-1)),s("ul",null,[s("li",null,[t(n,{color:"grend"},{default:a(()=>i[91]||(i[91]=[l("正例：")])),_:1}),i[92]||(i[92]=l("枚举名字为 ProcessStatusEnum 的成员名称：SUCCESS / UNKNOWN_REASON。"))])])]),i[96]||(i[96]=p("<li><p>各层命名规约：</p><ul><li>Service/DAO 层方法命名规约：</li></ul><ol><li>获取单个对象的方法用 get 做前缀。</li><li>获取多个对象的方法用 list 做前缀，复数形式结尾如：listObjects。</li><li>获取统计值的方法用 count 做前缀。</li><li>插入的方法用 save/insert 做前缀。</li><li>删除的方法用 remove/delete 做前缀。</li><li>修改的方法用 update 做前缀。</li></ol><ul><li>领域模型命名规约： <ol><li>数据对象：xxxDO，xxx 即为数据表名。</li><li>数据传输对象：xxxDTO，xxx 为业务领域相关的名称。</li><li>展示对象：xxxVO，xxx 一般为网页名称。</li><li>POJO 是 DO/DTO/BO/VO 的统称，禁止命名成 xxxPOJO。</li></ol></li></ul></li>",1))]),i[629]||(i[629]=s("h3",{id:"常量定义",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#常量定义"},[s("span",null,"常量定义")])],-1)),i[630]||(i[630]=s("hr",null,null,-1)),s("ol",null,[s("li",null,[i[99]||(i[99]=s("p",null,[s("strong",null,"不允许任何魔法值（即未经预先定义的常量）直接出现在代码中。")],-1)),s("ul",null,[s("li",null,[t(n,{color:"red"},{default:a(()=>i[97]||(i[97]=[l("反例：")])),_:1}),i[98]||(i[98]=l('String key = "Id#taobao_" + tradeId ; cache.put(key, value) ;'))])])]),i[121]||(i[121]=s("li",null,[s("p",null,[s("strong",null,"在 long 或者 Long 赋值时，数值后使用大写的 L，不能是小写的 l，小写容易跟数字 1 混淆，造成误解。")]),s("p",null,"说明：Long a = 2l ; 写的是数字的 21 ，还是 Long 型的 2?")],-1)),s("li",null,[s("p",null,[s("em",null,[i[101]||(i[101]=l("不要使用一个")),t(n,{color:"pink"},{default:a(()=>i[100]||(i[100]=[l("常量类")])),_:1}),i[102]||(i[102]=l("维护所有常量，要按常量功能进行归类，分开维护。"))])]),i[105]||(i[105]=s("p",null,"说明：大而全的常量类，杂乱无章，使用查找功能才能定位到修改的常量，不利于理解和维护。",-1)),s("ul",null,[s("li",null,[t(n,{color:"grend"},{default:a(()=>i[103]||(i[103]=[l("正例：")])),_:1}),i[104]||(i[104]=l("缓存相关常量放在类 CacheConsts 下；系统配置相关常量放在类 ConfigConsts 下。"))])])]),s("li",null,[s("p",null,[s("em",null,[i[107]||(i[107]=l("常量的复用层次有五层：")),t(n,{color:"cornflowerblue"},{default:a(()=>i[106]||(i[106]=[l("跨应用共享常量、应用内共享常量、子工程内共享常量、包内共享常量、类内共享常量")])),_:1}),i[108]||(i[108]=l("。"))])]),s("ol",null,[i[113]||(i[113]=s("li",null,[s("p",null,"跨应用共享常量：放置在二方库中，通常是 client.jar 中的 constant 目录下。")],-1)),s("li",null,[i[112]||(i[112]=s("p",null,"应用内共享常量：放置在一方库中，通常是子模块中的 constant 目录下。",-1)),s("ul",null,[s("li",null,[t(n,{color:"red"},{default:a(()=>i[109]||(i[109]=[l("反例：")])),_:1}),i[110]||(i[110]=l("易懂变量也要统一定义成应用内共享常量，两位攻城师在两个类中分别定义了表示“是”的变量：")),i[111]||(i[111]=s("ol",null,[s("li",null,'类 A 中：public static final String YES = "yes";'),s("li",null,'类 B 中：public static final String YES = "y" ;'),s("li",null,"A.YES.equals(B.YES)，预期是 true，但实际返回为 false，导致线上问题。")],-1))])])]),i[114]||(i[114]=s("li",null,[s("p",null,"子工程内部共享常量：即在当前子工程的 constant 目录下。")],-1)),i[115]||(i[115]=s("li",null,[s("p",null,"包内共享常量：即在当前包下单独的 constant 目录下。")],-1)),i[116]||(i[116]=s("li",null,[s("p",null,"类内共享常量：直接在类内部 private static final 定义。")],-1))])]),s("li",null,[i[119]||(i[119]=s("p",null,[s("em",null,"如果变量值仅在一个固定范围内变化用 enum 类型来定义。")],-1)),i[120]||(i[120]=s("p",null,"说明：如果存在名称之外的延伸属性应使用 enum 类型，下面正例中的数字就是延伸信息，表示一年中的第几个季节。",-1)),s("ul",null,[s("li",null,[t(n,{color:"grend"},{default:a(()=>i[117]||(i[117]=[l("正例：")])),_:1}),i[118]||(i[118]=p(`<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> enum</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SeasonEnum</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    SPRING</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> SUMMER</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> AUTUMN</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> WINTER</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> seq</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    SeasonEnum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> seq</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">seq</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> seq;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1))])])])]),i[631]||(i[631]=s("h3",{id:"代码格式",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#代码格式"},[s("span",null,"代码格式")])],-1)),i[632]||(i[632]=s("hr",null,null,-1)),s("ol",null,[i[159]||(i[159]=s("li",null,[s("p",null,[s("strong",null,"大括号的使用约定。如果是大括号内为空，则简洁地写成{}即可，不需要换行；如果是非空代码块则：")]),s("ol",null,[s("li",null,"左大括号前不换行。"),s("li",null,"左大括号后换行。"),s("li",null,"右大括号前换行。"),s("li",null,"右大括号后还有 else 等代码则不换行；表示终止的右大括号后必须换行。")])],-1)),s("li",null,[i[124]||(i[124]=s("p",null,[s("strong",null,"左小括号和字符之间不出现空格；同样，右小括号和字符之间也不出现空格；而左大括号前需要空格。详见第 5 条下方正例提示。")],-1)),s("ul",null,[s("li",null,[t(n,{color:"red"},{default:a(()=>i[122]||(i[122]=[l("反例：")])),_:1}),i[123]||(i[123]=l("if ( a == b ) "))])])]),i[160]||(i[160]=s("li",null,[s("p",null,[s("strong",null,"if/for/while/switch/do 等保留字与括号之间都必须加空格。")])],-1)),i[161]||(i[161]=s("li",null,[s("p",null,[s("strong",null,"任何二目、三目运算符的左右两边都需要加一个空格。")]),s("p",null,"说明：运算符包括赋值运算符=、逻辑运算符&&、加减乘除符号等。")],-1)),s("li",null,[i[132]||(i[132]=s("p",null,[s("strong",null,"采用 4 个空格缩进，禁止使用 tab 字符。")],-1)),s("p",null,[i[127]||(i[127]=l("说明：如果使用 tab 缩进，必须设置 1 个 tab 为 4 个空格。IDEA 设置 tab 为 4 个空格时， 请勿勾选 ")),t(n,{color:"red"},{default:a(()=>i[125]||(i[125]=[l("Use tab character")])),_:1}),i[128]||(i[128]=l("；而在 eclipse 中，必须勾选 ")),t(n,{color:"red"},{default:a(()=>i[126]||(i[126]=[l("insert spaces for tabs")])),_:1}),i[129]||(i[129]=l("。"))]),s("ul",null,[s("li",null,[t(n,{color:"grend"},{default:a(()=>i[130]||(i[130]=[l("正例：")])),_:1}),i[131]||(i[131]=p(`<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[] args){</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 缩进 4 个空格</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> say </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 运算符的左右必须有一个空格</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> flag </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 关键词 if 与空格之间必须有一个空格，括号内的 f 与左括号，0 与右括号不需要空格</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (flag </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">){</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;say&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 左大括号前加空格且不换行；左大括号后换行</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (flag </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">){</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;world&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 右大括号前换行，右大括号后有 else，不用换行</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;ok&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">          // 右大括号后直接结束，则必须换行</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1))])])]),s("li",null,[i[135]||(i[135]=s("p",null,[s("strong",null,"注释的双斜线与注释内容之间有且仅有一个空格。")],-1)),s("ul",null,[s("li",null,[t(n,{color:"grend"},{default:a(()=>i[133]||(i[133]=[l("正例：")])),_:1}),i[134]||(i[134]=p(`<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 这是示例注解，请注意在双斜线之后有一个空格</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> ygb </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1))])])]),s("li",null,[s("p",null,[s("strong",null,[i[137]||(i[137]=l("单行字符数限制")),t(n,{color:"orange"},{default:a(()=>i[136]||(i[136]=[l("不超过 120 个")])),_:1}),i[138]||(i[138]=l("，超出需要换行，换行时遵循如下原则："))])]),i[141]||(i[141]=s("ol",null,[s("li",null,"第二行相对第一行缩进 4 个空格，从第三行开始，不再继续缩进，参考示例。"),s("li",null,"运算符与下文一起换行。"),s("li",null,"方法调用的点符号与下文一起换行。"),s("li",null,"方法调用中的多个参数需要换行时，在逗号后进行。"),s("li",null,"在括号前不用换行，见反例。")],-1)),t(n,{color:"grend"},{default:a(()=>i[139]||(i[139]=[l("正例：")])),_:1}),i[142]||(i[142]=p(`<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">StringBuffer</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> sb </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> StringBuffer</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 超过 120 个字符的情况下，换行缩进 4 个空格，点号和方法名称一起换行</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">sb</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;zi&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;xin&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;huang&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;huang&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;huang&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),t(n,{color:"red"},{default:a(()=>i[140]||(i[140]=[l("反例：")])),_:1}),i[143]||(i[143]=p(`<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">StringBuffer</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> sb </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> StringBuffer</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 超过 120 个字符的情况下，不要在括号前换行</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">sb</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;zi&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;xin&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)...</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">append</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;huang&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 参考很多的方法调用可能超过 120 个字符，不要在逗号前换行</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">method</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(args1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> args2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> args3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      ,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> argsX)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1))]),s("li",null,[i[146]||(i[146]=s("p",null,[s("strong",null,"方法参数在定义和传入时，多个参数逗号后边必须加空格。")],-1)),s("ul",null,[s("li",null,[t(n,{color:"grend"},{default:a(()=>i[144]||(i[144]=[l("正例：")])),_:1}),i[145]||(i[145]=l("例中实参的 args1，后面必须要有一个空格。 method(args1, args2, args3);"))])])]),i[162]||(i[162]=s("li",null,[s("p",null,[s("strong",null,"IDE 的 text file encoding 设置为 UTF-8; IDE 中文件的换行符使用 Unix 格式，不要使用 Windows 格式。")])],-1)),s("li",null,[i[149]||(i[149]=s("p",null,[s("em",null,"单个方法的总行数不超过 80 行。")],-1)),i[150]||(i[150]=s("p",null,"说明：包括方法签名、结束右大括号、方法内代码、注释、空行、回车及任何不可见字符的总行数不超过 80 行。",-1)),s("ul",null,[s("li",null,[t(n,{color:"grend"},{default:a(()=>i[147]||(i[147]=[l("正例：")])),_:1}),i[148]||(i[148]=l("代码逻辑分清红花和绿叶，个性和共性，绿叶逻辑单独出来成为额外方法，使主干代码更加清晰；共性逻辑抽取成为共性方法，便于复用和维护。"))])])]),s("li",null,[i[153]||(i[153]=s("p",null,[s("em",null,"没有必要增加若干空格来使某一行的字符与上一行对应位置的字符对齐。")],-1)),s("ul",null,[s("li",null,[t(n,{color:"grend"},{default:a(()=>i[151]||(i[151]=[l("正例：")])),_:1}),i[152]||(i[152]=p(`<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> one </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">long</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> two </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">float</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> three </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3F</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">StringBuffer</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> sb </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> StringBuffer</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1))])]),i[154]||(i[154]=s("p",null,"说明：增加 sb 这个变量，如果需要对齐，则给 a、b、c 都要增加几个空格，在变量比较多的情况下，是非常累赘的事情。",-1))]),s("li",null,[s("p",null,[s("em",null,[i[156]||(i[156]=l("不同逻辑、不同语义、不同业务的代码之间")),t(n,{color:"cornflowerblue"},{default:a(()=>i[155]||(i[155]=[l("插入一个空行")])),_:1}),i[157]||(i[157]=l("分隔开来以提升可读性。"))])]),i[158]||(i[158]=s("p",null,"说明：任何情形，没有必要插入多个空行进行隔开。",-1))])]),i[633]||(i[633]=s("h3",{id:"oop-规约",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#oop-规约"},[s("span",null,"OOP 规约")])],-1)),i[634]||(i[634]=s("hr",null,null,-1)),s("ol",null,[s("li",null,[s("p",null,[s("strong",null,[i[165]||(i[165]=l("避免通过一个")),t(n,{color:"pink"},{default:a(()=>i[163]||(i[163]=[l("类的对象")])),_:1}),i[166]||(i[166]=l("引用访问此类的静态变量或静态方法，无谓增加编译器解析成本，直接用")),t(n,{color:"pink"},{default:a(()=>i[164]||(i[164]=[l("类名")])),_:1}),i[167]||(i[167]=l("来访问即可。"))])])]),s("li",null,[i[173]||(i[173]=s("p",null,[s("strong",null,"所有的覆写方法，必须加@Override 注解。")],-1)),s("p",null,[i[170]||(i[170]=l("说明：getObject() 与 get0bject() 的问题。一个是字母的 O，一个是数字的 0，加@Override 可以准确判断是否覆盖成功。另外，如果在")),t(n,{color:"pink"},{default:a(()=>i[168]||(i[168]=[l("抽象类")])),_:1}),i[171]||(i[171]=l("中对方法签名进行修改，其")),t(n,{color:"pink"},{default:a(()=>i[169]||(i[169]=[l("实现类")])),_:1}),i[172]||(i[172]=l("会马上编译报错。"))])]),s("li",null,[i[176]||(i[176]=s("p",null,[s("strong",null,"相同参数类型，相同业务含义，才可以使用 Java 的可变参数，避免使用 Object。")],-1)),i[177]||(i[177]=s("p",null,"说明：可变参数必须放置在参数列表的最后。（提倡同学们尽量不用可变参数编程）",-1)),s("ul",null,[s("li",u,[t(n,{color:"grend"},{default:a(()=>i[174]||(i[174]=[l("正例：")])),_:1}),i[175]||(i[175]=l("public List<User> listUsers(String type, Long... ids)"))])])]),i[240]||(i[240]=s("li",null,[s("p",null,[s("strong",null,"外部正在调用或者二方库依赖的接口，不允许修改方法签名，避免对接口调用方产生影响。接口过时必须加 @Deprecated 注解，并清晰地说明采用的新接口或者新服务是什么。")])],-1)),i[241]||(i[241]=s("li",null,[s("p",null,[s("strong",null,"不能使用过时的类或方法。")]),s("p",null,"说明：java.net.URLDecoder 中的方法 decode(String encodeStr) 这个方法已经过时，应该使用双参数 decode(String source, String encode)。接口提供方既然明确是过时接口，那么有义务同时提供新的接口；作为调用方来说，有义务去考证过时方法的新实现是什么。")],-1)),s("li",null,[s("p",null,[s("strong",null,[i[179]||(i[179]=l("Object 的 equals 方法容易抛空指针异常，应")),t(n,{color:"orange"},{default:a(()=>i[178]||(i[178]=[l("使用常量或确定有值的对象来调用 equals")])),_:1}),i[180]||(i[180]=l("。"))])]),i[185]||(i[185]=s("p",null,"说明：推荐使用 java.util.Objects#equals（JDK7 引入的工具类）",-1)),s("ul",null,[s("li",null,[t(n,{color:"grend"},{default:a(()=>i[181]||(i[181]=[l("正例：")])),_:1}),i[182]||(i[182]=l("“test”.equals(object);"))]),s("li",null,[t(n,{color:"red"},{default:a(()=>i[183]||(i[183]=[l("反例：")])),_:1}),i[184]||(i[184]=l("object.equals(“test”);"))])])]),s("li",null,[s("p",null,[s("strong",null,[i[187]||(i[187]=l("所有的相同类型的")),t(n,{color:"pink"},{default:a(()=>i[186]||(i[186]=[l("包装类")])),_:1}),i[188]||(i[188]=l("对象之间值的比较，全部使用 equals 方法比较。"))])]),i[189]||(i[189]=s("p",null,"说明：对于 Integer var = ? 在-128 至 127 范围内的赋值，Integer 对象是在 IntegerCache.cache 产生，会复用已有对象，这个区间内的 Integer 值可以直接使用 == 进行判断，但是这个区间之外的所有数据，都会在堆上产生，并不会复用已有对象，这是一个大坑，推荐使用 equals 方法进行判断。",-1))]),s("li",null,[i[202]||(i[202]=s("p",null,"关于基本数据类型与包装数据类型的使用标准如下：",-1)),s("ol",null,[s("li",null,[s("strong",null,[i[191]||(i[191]=l("所有的 ")),t(n,{color:"pink"},{default:a(()=>i[190]||(i[190]=[l("POJO 类")])),_:1}),i[192]||(i[192]=l("属性必须使用包装数据类型。"))])]),i[193]||(i[193]=s("li",null,[s("strong",null,"RPC 方法的返回值和参数必须使用包装数据类型。")],-1)),i[194]||(i[194]=s("li",null,[s("em",null,"所有的局部变量使用基本数据类型。")],-1))]),s("p",null,[i[196]||(i[196]=l("说明：")),t(n,{color:"pink"},{default:a(()=>i[195]||(i[195]=[l("POJO 类")])),_:1}),i[197]||(i[197]=l("属性没有初值是提醒使用者在需要使用时，必须自己显式地进行赋值，任何 NPE 问题，或者入库检查，都由使用者来保证。"))]),s("ul",null,[s("li",null,[t(n,{color:"grend"},{default:a(()=>i[198]||(i[198]=[l("正例：")])),_:1}),i[199]||(i[199]=l("数据库的查询结果可能是 null，因为自动拆箱，用基本数据类型接收有 NPE 风险。"))]),s("li",null,[t(n,{color:"red"},{default:a(()=>i[200]||(i[200]=[l("反例：")])),_:1}),i[201]||(i[201]=l("比如显示成交总额涨跌情况，即正负 x%，x 为基本数据类型，调用的 RPC 服务，调用不成功时，返回的是默认值，页面显示为 0%，这是不合理的，应该显示成中划线。所以包装数据类型的 null 值，能够表示额外的信息，如：远程调用失败，异常退出。"))])])]),s("li",null,[s("p",null,[s("strong",null,[i[204]||(i[204]=l("定义 DO/DTO/VO 等 ")),t(n,{color:"pink"},{default:a(()=>i[203]||(i[203]=[l("POJO 类")])),_:1}),i[205]||(i[205]=l("时，不要设定任何属性默认值。"))])]),s("ul",null,[s("li",null,[t(n,{color:"red"},{default:a(()=>i[206]||(i[206]=[l("反例：")])),_:1}),t(n,{color:"pink"},{default:a(()=>i[207]||(i[207]=[l("POJO 类")])),_:1}),i[208]||(i[208]=l("的 gmtCreate 默认值为 new Date()，但是这个属性在数据提取时并没有置入具体值，在更新其它字段时又附带更新了此字段，导致创建时间被修改成当前时间。"))])])]),i[242]||(i[242]=s("li",null,[s("p",null,[s("strong",null,"序列化类新增属性时，请不要修改 serialVersionUID 字段，避免反序列失败；如果完全不兼容升级，避免反序列化混乱，那么请修改 serialVersionUID 值。")]),s("p",null,"说明：注意 serialVersionUID 不一致会抛出序列化运行时异常。")],-1)),i[243]||(i[243]=s("li",null,[s("p",null,[s("strong",null,"构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 init 方法中。")])],-1)),s("li",null,[s("p",null,[s("strong",null,[t(n,{color:"pink"},{default:a(()=>i[209]||(i[209]=[l("POJO 类")])),_:1}),t(n,{color:"cornflowerblue"},{default:a(()=>i[210]||(i[210]=[l("必须写 toString 方法")])),_:1}),i[212]||(i[212]=l("。使用 IDE 中的工具：source> generate toString 时，如果继承了另一个 ")),t(n,{color:"pink"},{default:a(()=>i[211]||(i[211]=[l("POJO 类")])),_:1}),i[213]||(i[213]=l("，注意在前面加一下 super.toString。"))])]),i[214]||(i[214]=s("p",null,"说明：在方法执行抛出异常时，可以直接调用 POJO 的 toString()方法打印其属性值，便于排查问题。",-1))]),s("li",null,[s("p",null,[s("strong",null,[i[216]||(i[216]=l("禁止在 ")),t(n,{color:"pink"},{default:a(()=>i[215]||(i[215]=[l("POJO 类")])),_:1}),i[217]||(i[217]=l("中，同时存在对应属性 xxx 的 isXxx() 和 getXxx()方法。"))])]),i[218]||(i[218]=s("p",null,"说明：框架在调用属性 xxx 的提取方法时，并不能确定哪个方法一定是被优先调用到。",-1))]),s("li",null,[s("p",null,[s("em",null,[i[220]||(i[220]=l("使用索引访问用 String 的 split 方法得到的数组时，")),t(n,{color:"cornflowerblue"},{default:a(()=>i[219]||(i[219]=[l("需做最后一个分隔符后有无内容的检查")])),_:1}),i[221]||(i[221]=l("，否则会有抛 IndexOutOfBoundsException 的风险。"))])]),i[222]||(i[222]=p(`<p>说明：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> str </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;a,b,c,,&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] ary </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">split</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;,&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 预期大于3，结果是3</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ary</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2))]),i[244]||(i[244]=s("li",null,[s("p",null,[s("em",null,"当一个类有多个构造方法，或者多个同名方法，这些方法应该按顺序放置在一起，便于阅读，此条规则优先于第 16 条规则。")])],-1)),i[245]||(i[245]=s("li",null,[s("p",null,[s("em",null,"类内方法定义的顺序依次是：公有方法或保护方法 > 私有方法 > getter/setter 方法。")]),s("p",null,"说明：公有方法是类的调用者和维护者最关心的方法，首屏展示最好；保护方法虽然只是子类关心，也可能是“模板设计模式”下的核心方法；而私有方法外部一般不需要特别关心，是一个黑盒实现；因为承载的信息价值较低，所有 Service 和 DAO 的 getter/setter 方法放在类体最后。")],-1)),s("li",null,[i[225]||(i[225]=s("p",null,[s("em",null,"setter 方法中，参数名称与类成员变量名称一致，this.成员名 = 参数名。在getter/setter 方法中，不要增加业务逻辑，增加排查问题的难度。")],-1)),s("ul",null,[s("li",null,[t(n,{color:"red"},{default:a(()=>i[223]||(i[223]=[l("反例：")])),_:1}),i[224]||(i[224]=p(`<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Integer</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getData</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(){</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (condition){</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1))])])]),s("li",null,[i[228]||(i[228]=s("p",null,[s("em",null,"循环体内，字符串的连接方式，使用 StringBuilder 的 append 方法进行扩展。")],-1)),i[229]||(i[229]=s("p",null,"说明：下例中，反编译出的字节码文件显示每次循环都会 new 出一个 StringBuilder 对象，然后进行 append 操作，最后通过 toString 方法返回 String 对象，造成内存资源浪费。",-1)),s("ul",null,[s("li",null,[t(n,{color:"red"},{default:a(()=>i[226]||(i[226]=[l("反例：")])),_:1}),i[227]||(i[227]=p(`<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> str </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;start&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">){</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    str </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> str </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1))])])]),s("li",null,[i[239]||(i[239]=s("p",null,[s("em",null,"final 可以声明类、成员变量、方法、以及本地变量，下列情况使用 final 关键字：")],-1)),s("ol",null,[s("li",null,[i[231]||(i[231]=l("不允许被继承的类，如：")),t(n,{color:"pink"},{default:a(()=>i[230]||(i[230]=[l("String 类")])),_:1}),i[232]||(i[232]=l("。"))]),i[236]||(i[236]=s("li",null,"不允许修改引用的域对象。",-1)),s("li",null,[i[234]||(i[234]=l("不允许被重写的方法，如：")),t(n,{color:"pink"},{default:a(()=>i[233]||(i[233]=[l("POJO 类")])),_:1}),i[235]||(i[235]=l("的 setter 方法。"))]),i[237]||(i[237]=s("li",null,"不允许运行过程中重新赋值的局部变量。",-1)),i[238]||(i[238]=s("li",null,"避免上下文重复使用一个变量，使用 final 描述可以强制重新定义一个变量，方便更好地进行重构。",-1))])]),i[246]||(i[246]=p("<li><p><em>慎用 Object 的 clone 方法来拷贝对象。</em></p><p>说明：对象的 clone 方法默认是浅拷贝，若想实现深拷贝需要重写 clone 方法实现域对象的深度遍历式拷贝。</p></li><li><p><em>类成员与方法访问控制从严：</em></p><ol><li>如果不允许外部直接通过 new 来创建对象，那么构造方法必须是 private。</li><li>工具类不允许有 public 或 default 构造方法。</li><li>类非 static 成员变量并且与子类共享，必须是 protected。</li><li>类非 static 成员变量并且仅在本类使用，必须是 private。</li><li>类 static 成员变量如果仅在本类使用，必须是 private。</li><li>若是 static 成员变量，考虑是否为 final。</li><li>类成员方法只供类内部调用，必须是 private。</li><li>类成员方法只对继承类公开，那么限制为 protected。</li></ol><p>说明：任何类、方法、参数、变量，严控访问范围。过于宽泛的访问范围，不利于模块解耦。</p><p>思考：如果是一个 private 的方法，想删除就删除，可是一个 public 的 service 成员方法或成员变量，删除一下，不得手心冒点汗吗？变量像自己的小孩，尽量在自己的视线内，变量作用域太大，无限制的到处跑，那么你会担心的。</p></li>",2))]),i[635]||(i[635]=s("h3",{id:"集合处理",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#集合处理"},[s("span",null,"集合处理")])],-1)),i[636]||(i[636]=s("hr",null,null,-1)),s("ol",null,[i[318]||(i[318]=s("li",null,[s("p",null,[s("strong",null,"关于 hashCode 和 equals 的处理，遵循如下规则：")]),s("ol",null,[s("li",null,"只要重写 equals，就必须重写 hashCode。"),s("li",null,"因为 Set 存储的是不重复的对象，依据 hashCode 和 equals 进行判断，所以 Set 存储的对象必须重写这两个方法。"),s("li",null,"如果自定义对象作为 Map 的键，那么必须重写 hashCode 和 equals。")]),s("p",null,"说明：String 重写了 hashCode 和 equals 方法，所以我们可以非常愉快地使用 String 对象作为 key 来使用。")],-1)),i[319]||(i[319]=s("li",null,[s("p",null,[s("strong",null,"ArrayList 的 subList 结果不可强转成 ArrayList，否则会抛出 ClassCastException 异常，即 java.util.RandomAccessSubList cannot be cast to java.util.ArrayList。")]),s("p",null,"说明：subList 返回的是 ArrayList 的内部类 SubList，并不是 ArrayList 而是 ArrayList的一个视图，对于 SubList 子列表的所有操作最终会反映到原列表上。")],-1)),s("li",null,[s("p",null,[s("strong",null,[i[248]||(i[248]=l("在 subList 场景中，")),t(n,{color:"cornflowerblue"},{default:a(()=>i[247]||(i[247]=[l("高度注意")])),_:1}),i[249]||(i[249]=l("对原集合元素的增加或删除，均会导致字列表的遍历、增加、删除产生 ConcurrentModificationException 异常"))])])]),s("li",null,[i[259]||(i[259]=s("p",null,[s("strong",null,"使用集合转数组的方法，必须使用集合的 toArray( T[ ] array )，传入的是类型完全 一样的数组，大小就是 list.size()。")],-1)),s("p",null,[i[251]||(i[251]=l("说明：使用 toArray 带参方法，入参分配的数组空间不够大时，toArray 方法内部将重新分配内存空间，并返回新数组地址；如果数组元素个数大于实际所需，下标为[ ")),t(n,{color:"red"},{default:a(()=>i[250]||(i[250]=[l("list.size()")])),_:1}),i[252]||(i[252]=l(" ] 的数组元素将被置为 null，其它数组元素保持原值，因此最好将方法入参数组大小定义与集合元素个数一致。"))]),s("ul",null,[s("li",null,[t(n,{color:"grend"},{default:a(()=>i[253]||(i[253]=[l("正例：")])),_:1}),i[254]||(i[254]=p(`<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> list </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;guan&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;bao&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] array </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">array </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toArray</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(array);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1))]),s("li",null,[t(n,{color:"red"},{default:a(()=>i[255]||(i[255]=[l("反例：")])),_:1}),i[257]||(i[257]=l("直接使用 toArray 无参方法存在问题，此方法返回值只能是 ")),t(n,{color:"pink"},{default:a(()=>i[256]||(i[256]=[l("Object[]类")])),_:1}),i[258]||(i[258]=l("，若强转其它类型数组将出现 ClassCastException 错误。"))])])]),i[320]||(i[320]=p(`<li><p><strong>使用工具类 Arrays.asList() 把数组转换成集合时，不能使用其修改集合相关的方法，它的 add/remove/clear 方法会抛出 UnsupportedOperationException 异常。</strong></p><p>说明：asList 的返回对象是一个 Arrays 内部类，并没有实现集合的修改方法。Arrays.asList 体现的是适配器模式，只是转换接口，后台的数据仍是数组。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] str </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[] { </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;you&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;wu&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> }</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> List</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> list </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">asList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(str);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>第一种情况：list.add(&quot;yangguanbao&quot;); 运行时异常。</p><p>第二种情况：str[0] = &quot;gujin&quot;; 那么 list.get(0)也会随之修改。</p></li><li><p><strong>泛型通配符 &lt;? extends T&gt; 来接收返回的数据，此写法的泛型集合不能使用 add 方 法，而 &lt;? extends T&gt; 不能使用 get 方法，作为接口调用赋值时易出错。</strong></p><p>说明：扩展说一下 PECS(Producer Extends Consumer Super)原则：第一、频繁往外读取内容的，适合用 &lt;? extends T&gt;。第二、经常往里插入的，适合用 &lt;? extends T&gt;。</p></li>`,2)),s("li",null,[i[264]||(i[264]=s("p",null,[s("strong",null,"不要在 foreach 循环里进行元素的 remove/add 操作。remove 元素请使用 Iterator 方式，如果并发操作，需要对 Iterator 对象加锁。")],-1)),s("ul",null,[s("li",null,[t(n,{color:"grend"},{default:a(()=>i[260]||(i[260]=[l("正例：")])),_:1}),i[261]||(i[261]=p(`<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> list </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;2&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Iterator</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> iterator </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">iterator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">while</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">iterator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hasNext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) { </span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> item </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> iterator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (删除元素的条件) { </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        iterator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">remove</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    } </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1))]),s("li",null,[t(n,{color:"red"},{default:a(()=>i[262]||(i[262]=[l("反例：")])),_:1}),i[263]||(i[263]=p(`<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> item </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> list) { </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">equals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(item)</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) { </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">remove</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(item);</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    } </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1))])]),i[265]||(i[265]=s("p",null,"说明：以上代码的执行结果肯定会出乎大家的意料，那么试一下把“1”换成“2”，会是同样的结果吗？",-1))]),s("li",null,[i[267]||(i[267]=s("p",null,[s("strong",null,"在 JDK7 版本及以上，Comparator 实现类要满足如下三个条件，不然 Arrays.sort， Collections.sort 会报 IllegalArgumentException 异常。")],-1)),i[268]||(i[268]=s("p",null,"说明：三个条件如下",-1)),i[269]||(i[269]=s("ol",null,[s("li",null,"x，y 的比较结果和 y，x 的比较结果相反。"),s("li",null,"x>y，y>z，则 x>z。"),s("li",null,"x=y，则 x，z 比较结果和 y，z 比较结果相同。")],-1)),t(n,{color:"red"},{default:a(()=>i[266]||(i[266]=[l("反例：")])),_:1}),i[270]||(i[270]=p(`下例中没有处理相等的情况，实际使用中可能会出现异常：<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Comparator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Student</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() { </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> compare</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Student</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> o1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Student</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> o2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> o1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> o2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> :</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2))]),s("li",null,[i[273]||(i[273]=s("p",null,[s("em",null,"集合泛型定义时，在 JDK7 及以上，使用 diamond 语法或全省略。")],-1)),i[274]||(i[274]=s("p",null,"说明：菱形泛型，即 diamond，直接使用 <> 来指代前边已经指定的类型。",-1)),s("ul",null,[s("li",null,[t(n,{color:"grend"},{default:a(()=>i[271]||(i[271]=[l("正例：")])),_:1}),i[272]||(i[272]=p(`<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// &lt;&gt; diamond 方式</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HashMap</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> userCache </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HashMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">16</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 全省略方式</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ArrayList</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">User</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> users </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ArrayList</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1))])])]),s("li",null,[i[283]||(i[283]=s("p",null,[s("em",null,"集合初始化时，指定集合初始值大小。")],-1)),i[284]||(i[284]=s("p",null,"说明：HashMap 使用 HashMap(int initialCapacity) 初始化。",-1)),s("ul",null,[s("li",null,[t(n,{color:"red"},{default:a(()=>i[275]||(i[275]=[l("反例：")])),_:1}),i[276]||(i[276]=l("HashMap 需要放置 1024 个元素，由于没有设置容量初始大小，随着元素不断增加，容量 7 次被迫扩大，resize 需要重建 hash 表，严重影响性能。"))]),s("li",null,[t(n,{color:"grend"},{default:a(()=>i[277]||(i[277]=[l("正例：")])),_:1}),i[280]||(i[280]=l("initialCapacity = ")),t(n,{color:"cornflowerblue"},{default:a(()=>i[278]||(i[278]=[l("(需要存储的元素个数 / 负载因子) + 1")])),_:1}),i[281]||(i[281]=l("。注意")),t(n,{color:"cornflowerblue"},{default:a(()=>i[279]||(i[279]=[l("负载因子（即 loader factor）")])),_:1}),i[282]||(i[282]=l("默认为 0.75，如果暂时无法确定初始值大小，请设置为 16（即默认值）。"))])])]),s("li",null,[s("p",null,[s("em",null,[i[286]||(i[286]=l("使用 entrySet 遍历 ")),t(n,{color:"pink"},{default:a(()=>i[285]||(i[285]=[l("Map 类")])),_:1}),i[287]||(i[287]=l("集合 KV，而不是 keySet 方式进行遍历。"))])]),s("p",null,[i[289]||(i[289]=l("说明：keySet 其实是遍历了 2 次，一次是转为 Iterator 对象，另一次是从 hashMap 中取出 key 所对应的 value。而 entrySet 只是遍历了一次就把 key 和 value 都放到了 entry 中，效率更高。")),t(n,{color:"cornflowerblue"},{default:a(()=>i[288]||(i[288]=[l("如果是 JDK8，使用 Map.foreach 方法。")])),_:1})]),s("ul",null,[s("li",null,[t(n,{color:"grend"},{default:a(()=>i[290]||(i[290]=[l("正例：")])),_:1}),i[291]||(i[291]=l("values() 返回的是 V 值集合，是一个 list 集合对象；keySet() 返回的是 K 值集合，是一个 Set 集合对象；entrySet() 返回的是 K-V 值组合集合。"))])])]),s("li",null,[s("p",null,[s("em",null,[i[293]||(i[293]=l("高度注意 ")),t(n,{color:"pink"},{default:a(()=>i[292]||(i[292]=[l("Map 类")])),_:1}),i[294]||(i[294]=l("集合 K/V 能不能存储 null 值的情况，如下表格："))])]),s("table",null,[i[315]||(i[315]=s("thead",null,[s("tr",null,[s("th",null,"集合类"),s("th",null,"Key"),s("th",null,"Value"),s("th",null,"Super"),s("th",null,"说明")])],-1)),s("tbody",null,[s("tr",null,[i[297]||(i[297]=s("td",null,"Hashtable",-1)),s("td",null,[t(n,{color:"red"},{default:a(()=>i[295]||(i[295]=[l("不允许为 null")])),_:1})]),s("td",null,[t(n,{color:"red"},{default:a(()=>i[296]||(i[296]=[l("不允许为 null")])),_:1})]),i[298]||(i[298]=s("td",null,"Dictionary",-1)),i[299]||(i[299]=s("td",null,"线程安全",-1))]),s("tr",null,[i[302]||(i[302]=s("td",null,"ConcurrentHashMap",-1)),s("td",null,[t(n,{color:"red"},{default:a(()=>i[300]||(i[300]=[l("不允许为 null")])),_:1})]),s("td",null,[t(n,{color:"red"},{default:a(()=>i[301]||(i[301]=[l("不允许为 null")])),_:1})]),i[303]||(i[303]=s("td",null,"AbstaractMap",-1)),i[304]||(i[304]=s("td",null,"锁分段技术（JDK8:CAS）",-1))]),s("tr",null,[i[307]||(i[307]=s("td",null,"TreeMap",-1)),s("td",null,[t(n,{color:"red"},{default:a(()=>i[305]||(i[305]=[l("不允许为 null")])),_:1})]),s("td",null,[t(n,{color:"grend"},{default:a(()=>i[306]||(i[306]=[l("允许为 null")])),_:1})]),i[308]||(i[308]=s("td",null,"AbstaractMap",-1)),i[309]||(i[309]=s("td",null,"线程不安全",-1))]),s("tr",null,[i[312]||(i[312]=s("td",null,"HashMap",-1)),s("td",null,[t(n,{color:"grend"},{default:a(()=>i[310]||(i[310]=[l("允许为 null")])),_:1})]),s("td",null,[t(n,{color:"grend"},{default:a(()=>i[311]||(i[311]=[l("允许为 null")])),_:1})]),i[313]||(i[313]=s("td",null,"AbstaractMap",-1)),i[314]||(i[314]=s("td",null,"线程不安全",-1))])])]),s("ul",null,[s("li",null,[t(n,{color:"red"},{default:a(()=>i[316]||(i[316]=[l("反例：")])),_:1}),i[317]||(i[317]=l("由于 HashMap 的干扰，很多人认为 ConcurrentHashMap 是可以置入 null 值，而事实上，存储 null 值时会抛出 NPE 异常。"))])])]),i[321]||(i[321]=s("li",null,[s("p",null,"合理利用好集合的有序性 (sort) 和稳定性 (order)，避免集合的无序性 (unsort) 和不稳定性 (unorder) 带来的负面影响。"),s("p",null,"说明：有序性是指遍历的结果是按某种比较规则依次排列的。稳定性指集合每次遍历的元素次序是一定的。如：ArrayList 是 order/unsort；HashMap 是 unorder/unsort；TreeSet 是 order/sort。")],-1)),i[322]||(i[322]=s("li",null,[s("p",null,"利用 Set 元素唯一的特性，可以快速对一个集合进行去重操作，避免使用 List 的 contains 方法进行遍历、对比、去重操作。")],-1))]),i[637]||(i[637]=s("h3",{id:"并发处理",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#并发处理"},[s("span",null,"并发处理")])],-1)),i[638]||(i[638]=s("hr",null,null,-1)),s("ol",null,[i[347]||(i[347]=p(`<li><p><strong>获取单例对象需要保证线程安全，其中的方法也要保证线程安全。</strong></p><p>说明：资源驱动类、工具类、单例工厂类都需要注意。</p></li><li><p><strong>创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。</strong></p><p>正例：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> TimerTaskThread</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> TimerTaskThread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        super</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;TimeTaskThread&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。</strong></p><p>说明：使用线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源的开销，解决资源不足的问题。如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。</p></li>`,3)),s("li",null,[i[333]||(i[333]=s("p",null,[s("strong",null,"线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。")],-1)),i[334]||(i[334]=s("p",null,"说明：Executors 返回的线程池对象的弊端如下：",-1)),s("ol",null,[s("li",null,[t(n,{color:"red"},{default:a(()=>i[323]||(i[323]=[l("FixedThreadPool")])),_:1}),i[325]||(i[325]=l(" 和 ")),t(n,{color:"red"},{default:a(()=>i[324]||(i[324]=[l("SingleTreadPool")])),_:1}),i[326]||(i[326]=l("：")),i[327]||(i[327]=s("p",null,"允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从未导致 OOM。",-1))]),s("li",null,[t(n,{color:"red"},{default:a(()=>i[328]||(i[328]=[l("CachedThreadPool")])),_:1}),i[330]||(i[330]=l(" 和 ")),t(n,{color:"red"},{default:a(()=>i[329]||(i[329]=[l("ScheduledThreadPool")])),_:1}),i[331]||(i[331]=l("：")),i[332]||(i[332]=s("p",null,"允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。",-1))])])]),s("li",null,[s("p",null,[s("strong",null,[i[336]||(i[336]=l("SimpleDateFormat 是线程不安全的类，一般不要定义为 static 变量，如果定义为static，必须加锁，或者使用 ")),t(n,{color:"pink"},{default:a(()=>i[335]||(i[335]=[l("DateUtils 工具类")])),_:1}),i[337]||(i[337]=l("。"))])]),t(n,{color:"grend"},{default:a(()=>i[338]||(i[338]=[l("正例：")])),_:1}),i[339]||(i[339]=p(`主要线程安全，使用 DateUtils。亦推荐如下处理：<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ThreadLocal</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">DateFormat</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> df </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ThreadLocal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">DateFormat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() { </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    protected</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DateFormat</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> initialValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> SimpleDateFormat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;yyyy-MM-dd&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：如果是 JDK8 的应用，可以使用 Instant 代替 Date，LocalDateTime 代替 Calendar，DateTimeFormatter 代替 SimpleDateFormat，官方给出的解释：simple beautiful strong immutable thread-safe。</p>`,3))]),i[348]||(i[348]=p("<li><p><strong>高并发时，同步调用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁；能锁区块，就不用锁整个方法体；能用对象锁，就不用用类锁。</strong></p><p>说明：尽可能使加锁的代码块工作量尽可能的小，避免在锁代码块中调用 RPC 方法。</p></li><li><p><strong>对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会造成死锁</strong>。</p><p>说明：线程一需要对表 A、B、C 依次全部加锁后才可以进行更新操作，那么线程二的加锁顺序也必须是 A、B、C，否则可能出现死锁。</p></li><li><p><strong>并发修改同一记录时，避免更新丢失，需要加锁。要么在应用层加锁，要么在缓存加锁，要么在数据库层使用乐观锁，使用 version 作为更新依据。</strong></p><p>说明：如果每次访问冲突概率小于 20%，推荐使用乐观锁，否则使用悲观锁。乐观锁的重试次数不得小于 3 次。</p></li><li><p><strong>多线程并行处理定时任务时，Timer 运行多个 TimeTask 时，只要其中之一没有捕获抛出的异常，其它任务便会自动终止运行，使用 ScheduledExecutorService 则没有这个问题。</strong></p></li><li><p><em>使用 CountDownLatch 进行异步转同步操作，每个线程退出前必须调用 countDown 方法，线程执行代码注意 catch 异常，确保 countDown 方法被执行到，避免主线程无法执行至 await 方法，直到超时才返回结果。</em></p><p>说明：注意，子线程抛出异常堆栈，不能在主线程 try-catch 到。</p></li>",5)),s("li",null,[i[341]||(i[341]=s("p",null,[s("em",null,"避免 Random 实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一 seed 导致的性能下降。")],-1)),i[342]||(i[342]=s("p",null,"说明：Random 实例包括 java.util.Random 的实例或者 Math.random()的方式。",-1)),t(n,{color:"grend"},{default:a(()=>i[340]||(i[340]=[l("正例：")])),_:1}),i[343]||(i[343]=l("在 JDK7 之后，可以直接使用 API ThreadLocalRandom，而在 JDK7 之前，需要编码保证每个线程持有一个实例。"))]),s("li",null,[i[345]||(i[345]=s("p",null,[s("em",null,'在并发场景下，通过双重检查锁 (double-checked locking) 实现延迟初始化的优化问题隐患（可参考 The "Double-Checked Locking is Broken" Declaration），推荐解决方案中较为简单的一种（适用于 JDK5 及以上版本），将目标属性声明为 volatile 型。')],-1)),t(n,{color:"red"},{default:a(()=>i[344]||(i[344]=[l("反例：")])),_:1}),i[346]||(i[346]=p(`<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> LazyInitDemo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Helper</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> helper </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Helper</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getHelper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (helper </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">synchronized</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (helper </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) helper </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Helper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> helper;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // other methods and fields ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1))]),i[349]||(i[349]=s("li",null,[s("p",null,[s("em",null,"volatile 解决多线程内存不可见问题。对于一写多读，是可以解决变量同步问题，但是如果多写，同样无法解决线程安全问题。如果是 count++ 操作，使用如下类实现：")]),s("p",null,"AtomicInteger count = new AtomicInteger(); count.addAndGet(1); 如果是 JDK8，推荐使用 LongAdder 对象，比 AtomicLong 性能更好（减少乐观锁的重试次数）。")],-1)),i[350]||(i[350]=s("li",null,[s("p",null,"HashMap 在容量不够进行 resize 时由于高并发可能出现死链，导致 CPU 飙升，在开发过程中可以使用其他数据结构或加锁来规避此风险。")],-1)),i[351]||(i[351]=s("li",null,[s("p",null,"ThreadLocal 无法解决共享对象的更新问题，ThreadLocal 对象建议使用 static 修饰。这个变量是针对一个线程内所有操作共享的，所以设置为静态变量，所有此类实例共享此静态变量，也就是说在类第一次被使用时装载，只分配一块存储空间，所有此类的对象（只要是这个线程内定义的）都可以操控这个变量。")],-1))]),i[639]||(i[639]=s("h3",{id:"控制语句",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#控制语句"},[s("span",null,"控制语句")])],-1)),i[640]||(i[640]=s("hr",null,null,-1)),s("ol",null,[i[371]||(i[371]=s("li",null,[s("p",null,[s("strong",null,"在一个 switch 块内，每个 case 要么通过 break/return 等来终止，要么注释说明程序将继续执行到哪一个 case 为止；在一个 switch 块内，都必须包含一个 default 语句并且放在最后，即使空代码。")])],-1)),i[372]||(i[372]=s("li",null,[s("p",null,[s("strong",null,"在 if/else/for/while/do 语句中必须使用大括号。即使只有一行代码，避免采用单行的编码方式：if (condition) statements;")])],-1)),s("li",null,[i[353]||(i[353]=s("p",null,[s("strong",null,"在高并发场景中，避免使用“等于”判断作为中断或退出的条件。")],-1)),i[354]||(i[354]=s("p",null,"说明：如果并发控制没有处理好，容易产生等值判断被“击穿”的情况，使用大于或小于的区间判断条件来代替。",-1)),t(n,{color:"red"},{default:a(()=>i[352]||(i[352]=[l("反例：")])),_:1}),i[355]||(i[355]=l("判断剩余奖品数量等于 0 时，终止发放奖品，但因为并发处理错误导致奖品数量瞬间变成了负数，这样的话，活动无法终止。"))]),s("li",null,[i[357]||(i[357]=p(`<p><em>表达异常的分支时，少用 if-else 方式，这种方法可以改写成：</em></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (condition){</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ...</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> obj</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：如果非得使用 if ()...else if ()...else... 方式表达逻辑，<strong>避免后续代码维护困难，请勿超过 3 层。</strong></p>`,3)),t(n,{color:"grend"},{default:a(()=>i[356]||(i[356]=[l("正例：")])),_:1}),i[358]||(i[358]=p(`超过 3 层的 if-else 的逻辑判断代码可以使用卫语句、策略模式、状态模式等来实现，其中卫语句示例如下：<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> today</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isBusy</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;change time.&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isFree</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;go to travel&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;stay at home to learn Alibaba Java Coding Guidelines.&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2))]),s("li",null,[i[361]||(i[361]=s("p",null,[s("em",null,"除常用方法（如 getXxx/isXxx）等外，不要在条件判断中执行其他复杂的语句，将复杂逻辑判断的结果赋值给一个有意义的布尔变量名，以提高可读性。")],-1)),i[362]||(i[362]=s("p",null,"说明：很多 if 语句内的逻辑相当复杂，阅读者需要分析条件表达式的最终结果，才能明确什么样的条件执行什么样的语句，那么，如果阅读者分析逻辑表达式错误呢？",-1)),t(n,{color:"grend"},{default:a(()=>i[359]||(i[359]=[l("正例：")])),_:1}),i[363]||(i[363]=p(`<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//伪代码如下</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">final</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> boolean</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> existed </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(fileName, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;w&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> !=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&amp;&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">...</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">||</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">...</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (existed) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),t(n,{color:"red"},{default:a(()=>i[360]||(i[360]=[l("反例：")])),_:1}),i[364]||(i[364]=p(`<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> ((</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(fileName, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;w&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> !=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&amp;&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">...</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">||</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">...</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1))]),i[373]||(i[373]=s("li",null,[s("p",null,[s("em",null,"循环体中的语句要考量性能，以下操作尽量移至循环体外处理，如定义对象、变量、获取数据库连接，进行不必要的 try-catch 操作（这个 try-catch 是否可以移至循环体）。")])],-1)),s("li",null,[i[367]||(i[367]=s("p",null,[s("em",null,[l("避免采用 "),s("mark",null,"取反"),l(" 逻辑运算符。")])],-1)),i[368]||(i[368]=s("p",null,"说明：取反逻辑不利于快速理解，并且取反逻辑写法必然存在对应的正向逻辑写法。",-1)),t(n,{color:"grend"},{default:a(()=>i[365]||(i[365]=[l("正例：")])),_:1}),i[369]||(i[369]=l("使用 if (x < 628) 来表达 x 小于 628。")),t(n,{color:"red"},{default:a(()=>i[366]||(i[366]=[l("反例：")])),_:1}),i[370]||(i[370]=l("使用 if (!(x >= 628)) 来表达 x 小于 628。"))]),i[374]||(i[374]=p("<li><p><em>接口入参保护，这种场景常见的是用作批量操作的接口。</em></p></li><li><p>下列情形，需要进行参数校验：</p><ol><li>调用频次低的方法。</li><li>执行时间开销很大的方法。此情形中，参数校验时间几乎可以忽略不计，但如果因为参数错误导致中间执行回退，或者错误，那得不偿失。</li><li>需要极高稳定性和可用性的方法。</li><li>对外提供的开发接口，不管是 RPC/API/HTTP 接口。</li><li>敏感权限入口。</li></ol></li><li><p>下列情形，不需要进行参数校验：</p><ol><li>极有可能被循环调用的方法。但在方法说明里必须注明外部参数检查要求。</li><li>底层调用频度比较高的方法。毕竟是像纯净水过滤的最后一道，参数错误不太可能到底层才会暴露问题。一般 DAO 层与 Service 层都在同一个应用中，部署在同一台服务器中，所以 DAO 的参数校验，可以省略。</li><li>被声明成 private 只会被自己代码所调用的方法，如果能够确定调用方法的代码传入参数已经做过检查或者肯定不会有问题，此时可以不校验参数。</li></ol></li>",3))]),i[641]||(i[641]=s("h3",{id:"注释规约",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#注释规约"},[s("span",null,"注释规约")])],-1)),s("ol",null,[i[381]||(i[381]=p("<li><p><strong>类、类属性、类方法的注释必须使用 Javadoc 规范，使用 /** 内容 */ 格式，不得使用 // xxx 方式。</strong></p><p>说明：在 IDE 编辑窗口中，Javadoc 方式会提示相关注释，生成 Javadoc 可以正确输出相应注释；在 IDE 中，工程调用方法时，不进入方法即可悬浮提示方法、参数、返回值的意义，提高阅读效率。</p></li><li><p><strong>所有的抽象方法（包括接口中的）必须要用 Javadoc 注解、除了返回值、参数、异常说明外，还必须指出该方法做什么事情，实现什么功能。</strong></p></li><li><p><strong>所有的类都必须添加创建者和创建日期。</strong></p></li><li><p><strong>方法内部单行注释，在被注释语句上方另起一行，使用 // 注释。方法内部多行注释使用 /* */注释，注意与代码对齐。</strong></p></li><li><p><strong>所有的枚举类型字段必须要有注释，说明每个数据项的用途。</strong></p></li>",5)),s("li",null,[i[376]||(i[376]=s("p",null,[s("em",null,"与其“半吊子”英文来注释，不如用中文注释把问题说清楚。专有名词与关键字保存英文原文即可。")],-1)),t(n,{color:"red"},{default:a(()=>i[375]||(i[375]=[l("反例：")])),_:1}),i[377]||(i[377]=l("“TCP 连接超时”解释成“传输控制协议连接超时”，理解反而费脑筋。"))]),i[382]||(i[382]=s("li",null,[s("p",null,[s("em",null,"代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑等的修改。")]),s("p",null,"说明：代码与注释更新不同步，就像路网与导航软件更新不同步一样，如果导航软件严重滞后，就失去了导航的意义。")],-1)),i[383]||(i[383]=s("li",null,[s("p",null,"谨慎注释掉代码。在上分详细说明，而不是简单地注释掉。如果无用，则删除。"),s("p",null,"说明：代码被注释掉有两种可能性：1. 后续会恢复此段代码逻辑。2. 永久不用。前者如果没有备注消息")],-1)),i[384]||(i[384]=s("li",null,[s("p",null,"对于注释的要求：第一、能够准确反应设计思想和代码逻辑；第二、能够描述业务含义，使别的程序员能够迅速了解到代码背后的信息。完全没有注释的大段代码对于阅读者形同天书，注释是给自己看的，即使隔很长时间，也能清晰理解当时的思路；注释也是给继任者看的，使其能够快速接替自己的工作。")],-1)),s("li",null,[i[379]||(i[379]=s("p",null,"好的命名、代码结构是自解释的，注释力求精简准确、表达到位。避免出现注释的一个极端：过多过滥的注释，代码的逻辑一旦修改，修改注释是相当大的负担。",-1)),t(n,{color:"red"},{default:a(()=>i[378]||(i[378]=[l("反例：")])),_:1}),i[380]||(i[380]=p(`<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// put elepthant into fridge</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(elephart</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> fridge)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>方法名 put，加上两个有意义的变量名 elephant 和 fridge，已经说明了这是在干什么，语义清晰的代码不需要额外的注释。</p>`,2))]),i[385]||(i[385]=s("li",null,[s("p",null,"特殊注释标记，请注明标记人和标记时间。注意及时处理这些标记，通过标记扫描，经常清理此类标记。线上故障有时候就是来源于这些标记处的代码。"),s("ol",null,[s("li",null,[l("待办事宜 (TODO)：（标记人，标记时间，[预计处理时间]）"),s("br"),l(" 表示需要实现，但目前还未实现的功能。这实际上是一个 Javadoc 的标签，目前的 Javadoc 还没有实现，但已经被广泛使用。只能应用于类，接口和方法（因为它是一个 Javadoc 标签）。")]),s("li",null,[l("错误，不能工作 (FIXME)：（标记人，标记时间，[预计处理时间]）"),s("br"),l(" 在注释中使用 FIXME 标记某段代码是错误的，而且不能工作，需要及时纠正的情况。")])])],-1))]),i[642]||(i[642]=s("h3",{id:"其他",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#其他"},[s("span",null,"其他")])],-1)),s("ol",null,[i[397]||(i[397]=s("li",null,[s("p",null,[s("strong",null,"在使用正则表达式时，利用好其预编译功能，可以有效加快正则匹配速度。")]),s("p",null,'说明：不要在方法体内定义：Pattern pattern = Pattern.compile("规则")')],-1)),i[398]||(i[398]=s("li",null,[s("p",null,[s("strong",null,"velocity 调用 POJO 类的属性时，建议直接使用属性名取值即可，模版引擎会自动按规范调用 POJO 的 getXxx()，如果是 boolean 基本数据类型变量（boolean 命名不需要加 is 前缀），会自动调用 isXxx() 方法。")]),s("p",null,"说明：注意如果是 Boolean 包装类对象，优先调用 getXxx() 的方法。")],-1)),i[399]||(i[399]=s("li",null,[s("p",null,[s("strong",null,"后台输送给页面的变量必须加 $!{var} —— 中间的感叹号。")]),s("p",null,"说明：如果 var 等于 null 或者不存在，那么 ${var} 会直接显示在页面上。")],-1)),s("li",null,[s("p",null,[s("strong",null,[i[389]||(i[389]=l("注意 Math.random() 这个方法返回是 double 类型，注意取值的范围 0≤x<1（能够取到")),t(n,{color:"cornflowerblue"},{default:a(()=>i[386]||(i[386]=[l("零")])),_:1}),i[390]||(i[390]=l("值，注意除零异常），如果想获取整数类型的随机数，不要将 x 放大 10 的若干倍然后取整，直接使用 Random 对象的 ")),t(n,{color:"cornflowerblue"},{default:a(()=>i[387]||(i[387]=[l("nextInt")])),_:1}),i[391]||(i[391]=l(" 或者 ")),t(n,{color:"cornflowerblue"},{default:a(()=>i[388]||(i[388]=[l("nextLong")])),_:1}),i[392]||(i[392]=l(" 方法。"))])])]),i[400]||(i[400]=s("li",null,[s("p",null,[s("strong",null,"获取当前毫秒数 System.currentTimeMillis()；而不是 new Date().getTime();")]),s("p",null,"说明：如果想获取更加精确的纳秒级时间值，使用 System.nanoTime() 的方式。在 JDK8 中，针对统一时间等场景，推荐使用 Instant 类。")],-1)),i[401]||(i[401]=s("li",null,[s("p",null,[s("em",null,"不要在视图模版中加入任何复杂的逻辑。")]),s("p",null,"说明：根据 MVC 理论，视图的职责是展示，不要抢模型和控制器的活。")],-1)),i[402]||(i[402]=s("li",null,[s("p",null,[s("em",null,"任何数据结构的构造和初始化，都应指定大小，避免数据结构无限增长吃光内存。")])],-1)),s("li",null,[i[394]||(i[394]=s("p",null,[s("em",null,"及时清理不再使用的代码段或配置信息。")],-1)),i[395]||(i[395]=s("p",null,"说明：对于垃圾代码或过时配置，坚决清理干净，避免程序过度臃肿，代码冗余。",-1)),t(n,{color:"grend"},{default:a(()=>i[393]||(i[393]=[l("正例：")])),_:1}),i[396]||(i[396]=l("对于暂时被注释掉，后续可能恢复使用的代码片段，在注释代码上方，统一规定使用三个斜杠 ( /// ) 来说明注释掉代码的理由。"))])]),i[643]||(i[643]=s("h2",{id:"异常日志",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#异常日志"},[s("span",null,"异常日志")])],-1)),i[644]||(i[644]=s("h3",{id:"异常处理",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#异常处理"},[s("span",null,"异常处理")])],-1)),i[645]||(i[645]=s("hr",null,null,-1)),s("ol",o,[s("li",g,[i[405]||(i[405]=s("p",null,[s("strong",null,"Java 类库中定义的可以通过与检查方式规避的 RuntimeException 异常不应该通过 catch 的方式来处理，比如：NullPointerException，IndexOutOfBoundsException 等等。")],-1)),i[406]||(i[406]=s("p",null,"说明：无法通过预检查的异常除外，比如，在解析字符串形式的数字时，不得不通过 catch NumberFormatException 来实现。",-1)),t(n,{color:"grend"},{default:a(()=>i[403]||(i[403]=[l("正例：")])),_:1}),i[407]||(i[407]=l("if (obj != null)")),t(n,{color:"red"},{default:a(()=>i[404]||(i[404]=[l("反例：")])),_:1}),i[408]||(i[408]=l("try {obj.method(); } catch (NullPointerException e)"))]),i[439]||(i[439]=s("li",null,[s("p",null,[s("strong",null,"异常不要用来做流程控制，条件控制。")]),s("p",null,"说明：异常设计的初衷是解决程序运行中的各种意外情况，且异常的处理效率比条件判断方式要低很多。")],-1)),s("li",null,[i[410]||(i[410]=s("p",null,[s("strong",null,"catch 时请分清稳定代码和非稳定代码，稳定代码指的是无论如何不会出错的代码。对于非稳定代码的 catch 尽可能进行区分异常类型，再做对应的异常出来。")],-1)),i[411]||(i[411]=s("p",null,"说明：对大段代码进行 try-catch，使程序无法根据不同的异常做出正确的应激反应，也不利于定位问题，这是一种不负责任的表现。",-1)),t(n,{color:"grend"},{default:a(()=>i[409]||(i[409]=[l("正例：")])),_:1}),i[412]||(i[412]=l("用户注册的场景中，如果用户输入非法字符，或用户名称已存在，或用户输入密码过于简单，在程序上作出分门别类的判断，并提示给用户。"))]),i[440]||(i[440]=p("<li><p><strong>捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之，如果不想处理它，请将该异常抛给它的调用者。最外层的业务使用者，必须处理异常，将其转化为用户可以理解的内容。</strong></p></li><li><p><strong>有 try 块放到了事务代码中，catch 异常后，如果需要回滚事务，一定要注意手动回滚事务。</strong></p></li><li><p><strong>finally 块必须对资源对象、流对象进行关闭，有异常也要做 try-catch。</strong></p><p>说明：如果 JDK7 及以上，可以使用 try-with-resources 方式。</p></li><li><p><strong>不要在 finally 块中使用 return。</strong></p><p>说明：finally 块中的 return 返回后方法结束执行，不会再执行 try 块中的 return 语句。</p></li><li><p>捕获异常与抛异常，必须是完全匹配，或者捕获异常是抛异常的父类。</p><p>说明：如果预期对方抛的是绣球，实际接到的是铅球，就会产生意外情况。</p></li>",5)),s("li",null,[s("p",null,[s("em",null,[i[414]||(i[414]=l("方法的")),t(n,{color:"cornflowerblue"},{default:a(()=>i[413]||(i[413]=[l("返回值可以为 null")])),_:1})]),i[415]||(i[415]=l("，不强制返回空集合，或者空对象等，必须添加注释充分说明什么情况下会返回 null 值。"))]),s("p",null,[i[417]||(i[417]=l("说明：这里明确")),t(n,{color:"cornflowerblue"},{default:a(()=>i[416]||(i[416]=[l("防止 NPE")])),_:1}),i[418]||(i[418]=l(" 是调用者的责任。即使被调用方法返回空集合或者空对象，对调用者来说，这并非高枕无忧，必须考虑到远程调用失败、序列化失败、运行时异常等场景返回 null 的情况。"))])]),s("li",null,[i[429]||(i[429]=s("p",null,[s("em",null,"防止 NPE，是程序员的基本修养，注意 NPE 产生的场景：")],-1)),s("ol",null,[s("li",null,[i[420]||(i[420]=s("p",null,"返回类型为基本数据类型，return 包装数据类型的对象时，自动拆箱有可能产生 NPE。",-1)),t(n,{color:"red"},{default:a(()=>i[419]||(i[419]=[l("反例：")])),_:1}),i[421]||(i[421]=l("public int f () { return Integer 对象 }，如果为 null，自动解箱抛 NPE。"))]),i[425]||(i[425]=s("li",null,[s("p",null,"数据库的查询结果可能为 null。")],-1)),i[426]||(i[426]=s("li",null,[s("p",null,"集合里的元素即使 isNotEmpty，取出的数据元素也可能为 null。")],-1)),i[427]||(i[427]=s("li",null,[s("p",null,"远程调用返回对象时，一律要求进行空指针判断，防止 NPE。")],-1)),i[428]||(i[428]=s("li",null,[s("p",null,"对于 Session 中获取的数据，建议 NPE 检查，避免空指针。")],-1)),s("li",null,[i[423]||(i[423]=s("p",null,"级联调用 obj.getA().getB().getC(); 一连串调用，易产生 NPE。",-1)),t(n,{color:"grend"},{default:a(()=>i[422]||(i[422]=[l("正例：")])),_:1}),i[424]||(i[424]=l("使用 JDK8 的 Optional 类来防止 NPE 问题。"))])])]),i[441]||(i[441]=s("li",null,[s("p",null,[s("em",null,"定义时区分 unchecked / checked 异常，避免直接抛出 new RuntimeException()，更不允许抛出 Exception 或者 Throwable，应使用有业务含义的自定义异常。推荐业界已定义过的自定义异常，如：DAOException / ServiceException 等。")])],-1)),s("li",null,[s("p",null,[i[431]||(i[431]=l("对于公司外的 http / api 开放接口必须使用“错误码”；而应用内部推荐异常抛出；跨应用间 RPC 调用优先考虑")),t(n,{color:"cornflowerblue"},{default:a(()=>i[430]||(i[430]=[l("使用 Result 方式")])),_:1}),i[432]||(i[432]=l("，封装 isSuccess() 方法、“错误码”、“错误简短信息”。"))]),i[433]||(i[433]=s("p",null,"说明：关于 RPC 方式返回方式使用 Result 方式的理由：",-1)),i[434]||(i[434]=s("ol",null,[s("li",null,"使用抛异常返回方式，调用方如果没有捕获到就会产生运行时错误。"),s("li",null,"如果不加栈信息，只是 new 自定义异常，加入自己的理解的 error message，对于调用端解决问题的帮助不会太多。如果加了栈信息，在频繁调用出错的情况下，数据序列化和传输的性能损耗也是问题。")],-1))]),s("li",null,[i[436]||(i[436]=s("p",null,"避免出现重复的代码 (Don’t Repeat Yourself)，即 DRY 原则。",-1)),i[437]||(i[437]=s("p",null,"说明：随意复制和粘贴代码，必然会导致代码的重复，在以后需要修改时，需要修改所有的副本，容易遗漏。必要时抽取共性方法，或者抽象公共类，甚至是组件化。",-1)),t(n,{color:"grend"},{default:a(()=>i[435]||(i[435]=[l("正例：")])),_:1}),i[438]||(i[438]=l("一个类中有多个 public 方法，都需要进行数行相同的参数校验操作，这个时候请抽取：private boolean checkParam(DTO dto)"))])]),i[646]||(i[646]=s("h3",{id:"日志规约",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#日志规约"},[s("span",null,"日志规约")])],-1)),i[647]||(i[647]=s("hr",null,null,-1)),s("ol",null,[i[461]||(i[461]=p(`<li><p><strong>应用中不可直接使用日志系统（Log4j、Logback）中的 API，而应依赖使用日志框架 SLF4J 中的 API，使用门面模式的日志框架，有利于维护和各个类的日志处理方式统一。</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.slf4j.Logger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.slf4j.LoggerFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Logger</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> logger </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> LoggerFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getLogger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Abc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>日志文件至少保存 15 天，因为有些异常具备以“周”为频次发生的特点。</strong></p></li>`,2)),s("li",null,[i[443]||(i[443]=s("p",null,[s("strong",null,"应用中的扩展日志（如打点、临时监控、访问日志等）命名方式：")],-1)),i[444]||(i[444]=s("p",null,"appName_logType_logName.log",-1)),i[445]||(i[445]=s("p",null,[l("logType：日志类型，如 stats / monitor / access 等；logName：日志描述。这种命名的好处："),s("br"),l(" 通过文件名就可知道日志文件属于什么应用，什么类型，什么目的，也有利于归类查找。")],-1)),t(n,{color:"grend"},{default:a(()=>i[442]||(i[442]=[l("正例：")])),_:1}),i[446]||(i[446]=l("mppserver 应用中单独监控时区转换异常，如：")),i[447]||(i[447]=s("p",null,"mapper_monitor_timeZoneConvert.log",-1)),i[448]||(i[448]=s("p",null,"说明：推荐对日志进行分类，如将错误日志和业务日志分开存放，便于开发人员查看，也便于通过日志对系统进行及时监控。",-1))]),s("li",null,[i[451]||(i[451]=s("p",null,[s("strong",null,"对 trace / debug / info 级别的日志输出，必须使用条件输出形式或者使用占位符的方式。")],-1)),i[452]||(i[452]=s("p",null,[l('说明：logger.debug("Processing trade with id: " + id + " and symbol: " + symbol);'),s("br"),l(" 如果日志级别是 warn，上述日志不会打印但是会执行字符串拼接操作，如果 symbol 是对象，会执行 toString() 方法，浪费了系统资源，执行了上述操作，最终日志却没有打印。")],-1)),t(n,{color:"grend"},{default:a(()=>i[449]||(i[449]=[l("正例：")])),_:1}),i[453]||(i[453]=p(`（条件）建议采用如下方式：<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">logger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isDebugEnabled</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    logger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">debug</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Processing trade with id: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot; and symbol: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> symbol)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)),t(n,{color:"grend"},{default:a(()=>i[450]||(i[450]=[l("正例：")])),_:1}),i[454]||(i[454]=p('（占位符）<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">logger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">debug</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Processing trade with id: {} and symbol: {}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, id, symbol)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>',2))]),s("li",null,[i[456]||(i[456]=s("p",null,[s("strong",null,"强制重复打印日志，浪费磁盘空间，务必在 log4j.xml 中设置 additivity=false。")],-1)),t(n,{color:"grend"},{default:a(()=>i[455]||(i[455]=[l("正例：")])),_:1}),i[457]||(i[457]=l('<logger name="com.taobao.dubbo.config" additivity="false">'))]),s("li",null,[i[459]||(i[459]=s("p",null,[s("strong",null,"异常信息应该包括两类信息：案发现场信息和异常堆栈信息。如果不处理，那么通过关键字 throws 往上抛出。")],-1)),t(n,{color:"grend"},{default:a(()=>i[458]||(i[458]=[l("正例：")])),_:1}),i[460]||(i[460]=l('logger.error(各类参数或者对象 toString() + "_" + e.getMessage(), e);'))]),i[462]||(i[462]=s("li",null,[s("p",null,[s("em",null,"谨慎地记录日志。生产环境禁止输出 debug 日志；有选择地输出 info 日志；如果使用 warn 来记录刚上线时的业务行为信息，一定要注意日志输出量的问题，避免把服务器磁盘撑爆，并记得及时删除这些观察日志。")]),s("p",null,"说明：大量地输出无效日志，不利于系统性能提升，也不利于快速定位错误点。记录日志时请思考：这些日志真的有人看吗？看到这条日志你能做什么？能不能给问题排查带来好处？")],-1)),i[463]||(i[463]=s("li",null,[s("p",null,[s("em",null,"可以使用 warn 日志级别来记录用户输入参数错误的情况，避免用户投诉时，无所适从。如非必要，请不要在此场景打出 error 级别，避免频繁报警。")]),s("p",null,"说明：注意日志输出的级别，error级别只记录系统逻辑出错、异常或者重要的错误信息。")],-1)),i[464]||(i[464]=s("li",null,[s("p",null,[s("em",null,[l("尽量用英文来描述日志错误信息，如果日志中的错误信息用英文描述不清楚的话使用中文描述即可，否则容易产生歧义。国际化团队或海外部署的服务器由于字符集问题，"),s("strong",null,"使用全英文来注释和描述日志错误信息。")])])],-1))]),i[648]||(i[648]=s("h2",{id:"单元测试",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#单元测试"},[s("span",null,"单元测试")])],-1)),s("ol",null,[i[478]||(i[478]=s("li",null,[s("p",null,[s("strong",null,"好的单元测试必须遵循 AIR 原则。")]),s("p",null,"说明：单元测试在线上运行时，感觉像空气 (AIR) 一样并不存在，但在测试质量的保障上，却是非常关键的。好的单元测试宏观上来说，具有自动化、独立性、可重复执行的特点。"),s("ul",null,[s("li",null,"A：Automatic（自动化）"),s("li",null,"I：Independent（独立性）"),s("li",null,"R：Repeatable（可重复）")])],-1)),i[479]||(i[479]=s("li",null,[s("p",null,[s("strong",null,"单元测试应该是全自动执行的，并且非交互式的。测试用例通常是被定期执行的，执行过程必须完全自动化才有意义。输出结果需要人工检查的测试不是一个好的单元测试。单元测试中不准使用 System.out 来进行人肉验证，必须使用 assert 来验证。")])],-1)),s("li",null,[i[466]||(i[466]=s("p",null,[s("strong",null,"保持单元测试的独立性。为了保证单元测试稳定可靠且便于维护，单元测试用例之间决不能互相调用，也不能依赖执行的先后次序。")],-1)),t(n,{color:"red"},{default:a(()=>i[465]||(i[465]=[l("反例：")])),_:1}),i[467]||(i[467]=l("method2 需要依赖 method1 的执行，将执行结果作为 method2 的输入。"))]),s("li",null,[i[469]||(i[469]=s("p",null,[s("strong",null,"单元测试是可以重复执行的，不能受到外界环境的影响。")],-1)),i[470]||(i[470]=s("p",null,"说明：单元测试通常会被放到持续集成中，每次有代码 check in 时单元测试都会被执行。如果单测对外部环境（网络、服务、中间件等）有依赖，容易导致持续集成机制的不可用。",-1)),t(n,{color:"grend"},{default:a(()=>i[468]||(i[468]=[l("正例：")])),_:1}),i[471]||(i[471]=l("为了不受外界环境影响，要求设计代码时就把 SUT 的依赖改成注入，在测试时用 spring 这样的 DI 框架注入一个本地（内存）实现或者 Mock 实现。"))]),i[480]||(i[480]=p("<li><p><strong>对于单元测试，要保证测试粒度足够小，有助于精确定位问题。单测粒度至多是类级类，一般是方法级别。</strong></p><p>说明：只有测试粒度小才能在出错时尽快定位到出错位置。单测不负责检查跨类或者跨系统的交互逻辑，那是集成测试的领域。</p></li><li><p><strong>核心业务、核心应用、核心模块的增量代码确保单元测试通过。</strong></p><p>说明：新增代码及时补充单元测试，如果新增代码影响了原有单元测试，请及时修正。</p></li><li><p><strong>单元测试代码必须写在如下工程目录：src/test/java，不允许写在业务代码目录下。</strong></p><p>说明：源码构建时会跳过此目录，而单元测试框架默认是扫描此目录。</p></li><li><p><em>单元测试的基本目标：语句覆盖率达到 70%；核心模块的语句覆盖率和分支覆盖率都要达到 100%</em></p><p>说明：在工程规约的应用分层中提到的 DAO 层，Manager 层，可重用度高的 Service，都应该进入单元测试。</p></li><li><p><em>编写单元测试代码遵循 BCDE 原则，以保证被测试模块的交付质量。</em></p><ul><li>B：Border，边界值测试，包括循环边界、特殊取值、特殊时间点、数据顺序等。</li><li>C：Correct，正确的输入，并得到预期的结果。</li><li>D：Design，与设计文档相结合，来编写单元测试。</li><li>E：Error，强制错误信息输入（如：非法数据、异常流程、非业务允许输入等），并得到预期的结果。</li></ul></li>",5)),s("li",null,[i[473]||(i[473]=s("p",null,[s("em",null,"对于数据库相关的查询，更新，删除等操作，不能假设数据库里的数据是存在的，或者直接操作数据库把数据插入进去，请使用程序插入或者导入数据的方式来准备数据。")],-1)),t(n,{color:"red"},{default:a(()=>i[472]||(i[472]=[l("反例：")])),_:1}),i[474]||(i[474]=l("删除某一行数据的单元测试，在数据库中，先直接手动增加一行作为删除目标，但是这一行新增数据并不符合业务插入规则，导致测试结果异常。"))]),s("li",null,[i[476]||(i[476]=s("p",null,[s("em",null,"和数据库相关的单元测试，可以设定自动回滚机制，不给数据库造成脏数据。或者对单元测试产生的数据有明确的前后缀标识。")],-1)),t(n,{color:"grend"},{default:a(()=>i[475]||(i[475]=[l("正例：")])),_:1}),i[477]||(i[477]=l("在 RDC 内部单元测试中，使用 RDC_UNIT_TEST_ 的前缀标识数据。"))]),i[481]||(i[481]=p("<li><p><em>对于不可测的代码建议做必要的重构，使代码变得可测，避免为了达到测试要求而书写不规范测试代码。</em></p></li><li><p><em>在设计评审阶段，开发人员需要和测试人员一起确定单元测试范围，单元测试最好覆盖所有测试用例。</em></p></li><li><p><em>单元测试作为一种质量保障手段，不建议项目发布后补充单元测试用例，建议在项目提测前完成单元测试。</em></p></li><li><p>为了更方便地进行单元测试，业务代码应避免以下情况：</p><ul><li>构造方法中做的事情过多。</li><li>存在过多的全局变量和静态方法。</li><li>存在过多的外部依赖。</li><li>存在过多的条件语句。</li></ul><p>说明：多层条件语句建议使用卫预计、策略模式、状态模式等方式重构。</p></li><li><p>不要对单元测试存在如下误解：</p><ul><li>那是测试人员干的事。凡是本文内容都是与开发人员强相关的。</li><li>单元测试代码是多余的。系统的整体功能与各单元部件的测试正常与否是强相关的。</li><li>单元测试代码不需要维护。一年半载后，那么单元测试几乎处于废弃状态。</li><li>单元测试与线上故障没有辩证关系。好的单元测试能够最大限度地规避线上故障。</li></ul></li>",5))]),i[649]||(i[649]=p('<h2 id="安全规约" tabindex="-1"><a class="header-anchor" href="#安全规约"><span>安全规约</span></a></h2><ol><li><p><strong>隶属于用户个人的页面或者功能必须进行权限控制校验。</strong></p><p>说明：防止没有做水平权限校验就可随意访问、修改、删除别人的数据，比如查看他人的私信内容、修改他人的订单。</p></li><li><p><strong>用户敏感数据禁止直接展示，必须对展示数据进行脱敏。</strong></p><p>说明：中国大陆个人手机号显示为：158****9119，隐藏中间 4 位，防止隐私泄露。</p></li><li><p><strong>用户输入的 SQL 参数严格使用参数绑定或者 METADATA 字段值限定，防止 SQL 注入，禁止字符串拼接 SQL 访问数据库。</strong></p></li><li><p><strong>用户请求传入的任何参数必须做有效性验证。</strong></p><p>说明：忽略参数校验可能导致：</p><ul><li><p>page size 过大导致内存溢出</p></li><li><p>恶意 order by 导致数据库慢查询</p></li><li><p>任意重定向</p></li><li><p>SQL 注入</p></li><li><p>反序列化注入</p></li><li><p>正则输入源串拒绝服务 ReDoS</p><p>说明：Java 代码用正则来验证客户端的输入，有些正则写法验证普通用户输入没有问题，但是如果攻击人员使用的是特殊构造的字符串来验证，有可能导致死循环的结果。</p></li></ul></li><li><p><strong>禁止向 HTML 页面输出未经安全过滤或未正确转义的用户数据。</strong></p></li><li><p><strong>表单、AJAX 提交必须执行 CSRF 安全认证。</strong></p><p>说明：CSRF(Cross-site request forgery) 跨域请求伪造是一类常见编程漏洞。对于存在 CSRF 漏洞的应用/网站，攻击者可以事先构造好 URL，只要受害者用户一访问，后台便在用户不知情的情况下对数据库中用户参数进行相应修改。</p></li><li><p><strong>在使用平台资源，譬如短信、邮件、电话、下单、支付，必须实现正确的防重放的机制，如数量限制、疲劳度控制、验证码校验，避免被滥刷而导致资损。</strong></p><p>说明：如注册时发送验证码到手机，如果没有限制次数和频率，那么可以利用此功能骚扰到其它用户，并造成短信平台资源浪费。</p></li><li><p><em>发帖、评论、发送即时消息等用户生成内容的场景必须实现防刷、文本内容违禁词过滤等风控策略。</em></p></li></ol><h2 id="mysql-数据库" tabindex="-1"><a class="header-anchor" href="#mysql-数据库"><span>MySQL 数据库</span></a></h2><h3 id="建表规约" tabindex="-1"><a class="header-anchor" href="#建表规约"><span>建表规约</span></a></h3><hr>',5)),s("ol",null,[s("li",null,[i[483]||(i[483]=s("p",null,[s("strong",null,"表达是与否概念的字段，必须使用 is_xxx 的方式命名，数据类型是 unsigned tinyint（1 表示是，0 表示否）。")],-1)),i[484]||(i[484]=s("p",null,"说明：任何字段如果为非负数，必须是 unsigned。",-1)),i[485]||(i[485]=s("p",null,"注意：POJO 类中的任何布尔类型的变量，都不要加 is 前缀，所以，需要在 <resultMap> 设置从 is_xxx 到 Xxx 的映射关系。数据库表示是与否的值，使用 tinyint 类型，检查 is_xxx 的命名方式是为了明确其取值含义与取值范围。",-1)),t(n,{color:"grend"},{default:a(()=>i[482]||(i[482]=[l("正例：")])),_:1}),i[486]||(i[486]=l("表达逻辑删除的字段名 is_deleted，1 表示删除，0 表示未删除。"))]),s("li",null,[i[489]||(i[489]=s("p",null,[s("strong",null,"表名、字段名必须使用小写字母或数字，禁止出现数字开头，禁止两个下划线中间只出现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。")],-1)),i[490]||(i[490]=s("p",null,"说明：MySQL 在 Window 下不区分大小写，但在 Linux 下默认是区分大小写。因此，数据库名、表名、字段名，都不允许出现任何大写字母，避免节外生枝。",-1)),t(n,{color:"grend"},{default:a(()=>i[487]||(i[487]=[l("正例：")])),_:1}),i[491]||(i[491]=l("aliyun_admin，rdc_config，level3_name")),t(n,{color:"red"},{default:a(()=>i[488]||(i[488]=[l("反例：")])),_:1}),i[492]||(i[492]=l("AliyunAdmin，rdcConfig，level_3_name"))]),i[503]||(i[503]=p("<li><p><strong>表名不使用复数名词。</strong></p><p>说明：表名应该仅仅表示表里面的实体内容，不应该表示实体数量，对应于 DO 类名也是单数形式，符合表达习惯。</p></li><li><p><strong>禁用保留字，如 desc、range、match、delayed 等，请参考 MySQL 官方保留字。</strong></p></li><li><p><strong>主键索引名为 pk_字段名；唯一索引名为 uk_字段名；普通索引名则为 idx_字段名。</strong></p><p>说明：pk_ 即 primary key；uk_ 即 unique key；idx_ 即 index 的简称。</p></li><li><p><strong>小数类型为 decimal，禁止使用 float 和 double。</strong></p><p>说明：float 和 double 在存储的时候，存在精度损失的问题，很可能在值的比较时，得到不正确的结果。如果存储的数据范围超过 decimal 的范围，建议将数据拆成整数和小数分开存储。</p></li><li><p><strong>如果存储的字符串长度几乎相等，使用 char 定长字符串类型。</strong></p></li><li><p><strong>varchar 是可变长字符串，不预先分配存储空间，长度不要超过 5000，如果存储长度大于此值，定义字段类型为 text，独立出来一张表，用于主键来对应，避免影响其他字段索引效率。</strong></p></li><li><p><strong>表必备三字段：id，gmt_create，gmt_modified。</strong></p><p>说明：其中 id 必为主键，类型为 bigint unsigned、单表时自增、步长为 1。gmt_create，gmt_modified 的类型均为 datetime 类型，前者现在时表示主动创建，后者过去分词表示被动更新。</p></li>",7)),s("li",null,[i[494]||(i[494]=s("p",null,[s("em",null,"表的命名最好是加上“业务名称_表的作用”。")],-1)),t(n,{color:"grend"},{default:a(()=>i[493]||(i[493]=[l("正例：")])),_:1}),i[495]||(i[495]=l("alipay_task / force_project / trade_config"))]),i[504]||(i[504]=s("li",null,[s("p",null,[s("em",null,"库名与应用名称尽量一致。")])],-1)),i[505]||(i[505]=s("li",null,[s("p",null,[s("em",null,"如果修改字段含义或对字段表示的状态追加时，需要及时更新字段注释。")])],-1)),s("li",null,[i[497]||(i[497]=s("p",null,[s("em",null,"字段允许适当冗余，以提高查询性能，但必须考虑数据一致。冗余字段应遵循：")],-1)),i[498]||(i[498]=s("ol",null,[s("li",null,"不是频繁修改的字段。"),s("li",null,"不是 varchar 超长字段，更不能是 text 字段。")],-1)),t(n,{color:"grend"},{default:a(()=>i[496]||(i[496]=[l("正例：")])),_:1}),i[499]||(i[499]=l("商品类目名称使用频率高，字段长度短，名称基本一成不变，可在相关联的表中冗余存储类目名称，避免关联查询。"))]),i[506]||(i[506]=s("li",null,[s("p",null,[s("em",null,"单表行数超过 500 万行或者单表容量超过 2GB，才推荐进行分库分表。")]),s("p",null,"说明：如果预计三年后的数据量根本达不到这个级别，请不要在创建表时就分库分表。")],-1)),s("li",null,[i[501]||(i[501]=s("p",null,"适合的字符存储长度，不但节约数据库表空间、节约索引存储，更重要的是提升检索速度。",-1)),t(n,{color:"grend"},{default:a(()=>i[500]||(i[500]=[l("正例：")])),_:1}),i[502]||(i[502]=p("如下表，其中无符号值可以避免误存负数，且扩大了表示范围。<table><thead><tr><th>对象</th><th>年龄区间</th><th>类型</th><th>字节</th><th>表示范围</th></tr></thead><tbody><tr><td>人</td><td>150 岁之间</td><td>tinyint unsigned</td><td>1</td><td>无符号值：0 到 255</td></tr><tr><td>龟</td><td>数百岁</td><td>smallint unsigned</td><td>2</td><td>无符号值：0 到 65535</td></tr><tr><td>恐龙化石</td><td>数千万年</td><td>int unsigned</td><td>4</td><td>无符号值：0 到约 42.9 亿</td></tr><tr><td>太阳</td><td>约 50 亿年</td><td>bigint unsigned</td><td>8</td><td>无符号值：0 到约 10 的 19次方</td></tr></tbody></table>",2))])]),i[650]||(i[650]=s("h3",{id:"索引规约",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#索引规约"},[s("span",null,"索引规约")])],-1)),i[651]||(i[651]=s("hr",null,null,-1)),s("ol",null,[i[531]||(i[531]=p("<li><p><strong>业务上具有唯一特性的字段，即使是多个字段的组合，也必须建成唯一索引。</strong></p><p>说明：不要以为唯一索引影响了 insert 速度，这个速度损耗可以忽略，但提高查找速度是明显的；另外，即使在应用层做了非常完善的校验控制，只要没有唯一索引，根据墨菲定律，必然有脏数据产生。</p></li><li><p><strong>超过三个表禁止 join。需要 join 的字段，数据类型必须绝对一致；多表关联查询时，保证被关联的字段需要有索引。</strong></p><p>说明：即使双表 join 也要注意表索引、SQL 性能。</p></li><li><p><strong>在 varchar 字段上建立索引时，必须指定索引长度，没必要对全字段建立索引，根据实际文本区分长度决定索引长度即可。</strong></p><p>说明：索引的长度与区分度是一对矛盾体，一般对字符串类型数据，长度为 20 的索引，区分度会高达 90% 以上，可以使用 count(distinct left(列名，索引长度))/count(*) 的区分度来确定。</p></li><li><p><strong>页面搜索严禁左模糊或者全模糊，如果需要请走搜索引擎来解决。</strong></p><p>说明：索引文件具有 B-Tree 的最左前缀匹配特性，如果左边的值未确定，那么无法使用此索引。</p></li>",4)),s("li",null,[s("p",null,[s("em",null,[i[508]||(i[508]=l("如果有 order by 的场景，请注意利用索引的")),t(n,{color:"cornflowerblue"},{default:a(()=>i[507]||(i[507]=[l("有序性")])),_:1}),i[509]||(i[509]=l("。order by 最后的字段是组合索引的一部分，并且放在索引组合顺序的最后，避免出现 file_sort 的情况，影响查询性能。"))])]),t(n,{color:"grend"},{default:a(()=>i[510]||(i[510]=[l("正例：")])),_:1}),i[512]||(i[512]=l("where a=? and b=? order by c； 索引：a_b_c")),t(n,{color:"red"},{default:a(()=>i[511]||(i[511]=[l("反例：")])),_:1}),i[513]||(i[513]=l("索引中有范围查找，那么索引有序性无法利用，如：WHERE a>10 ORDER BY b；索引 a_b 无法排序。"))]),s("li",null,[i[515]||(i[515]=s("p",null,[s("em",null,"利用覆盖索引进行查询操作，避免回表。")],-1)),i[516]||(i[516]=s("p",null,"说明：如果一本书需要知道第 11 章是什么标题，会翻开第 11 章对应的那一页吗？目录浏览一下就好了，这个目录就是起到覆盖索引的作用。",-1)),t(n,{color:"grend"},{default:a(()=>i[514]||(i[514]=[l("正例：")])),_:1}),i[517]||(i[517]=l("能够建立索引的种类分为主键索引、唯一索引、普通索引三种，而覆盖索引至少一种查询的一种效果，用 explain 的结果，extra 列会出现：using index。"))]),s("li",null,[i[519]||(i[519]=s("p",null,[s("em",null,"利用延迟关联或者子查询优化超多分页场景。")],-1)),i[520]||(i[520]=s("p",null,"说明：MySQL 并不是跳过 offset 行，而是取 offset + N 行，然后返回放弃前 offset 行，返回 N 行，那当 offset 特别大的时候，效率就非常的低下，要么控制返回的总页数，要么对超过特定阈值的页数进行 SQL 改写。",-1)),t(n,{color:"grend"},{default:a(()=>i[518]||(i[518]=[l("正例：")])),_:1}),i[521]||(i[521]=p('先快速定位需要获取的 id 值，然后再关联：<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a.* </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 表1 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a, (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 表1 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 条件 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">LIMIT</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">where</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">id</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">id</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>',2))]),s("li",null,[i[523]||(i[523]=s("p",null,[s("em",null,"SQL 性能优化的目标：至少要达到 range 级别，要求是 ref 级别，如果可以是 consts 最好。")],-1)),i[524]||(i[524]=s("p",null,"说明：",-1)),i[525]||(i[525]=s("ol",null,[s("li",null,"consts 单表中最多只有一个匹配行（主键或者唯一索引），在优化阶段即可读取到数据。"),s("li",null,"ref 指的是使用普通的索引 (normal index)。"),s("li",null,"range 对索引进行范围检索。")],-1)),t(n,{color:"red"},{default:a(()=>i[522]||(i[522]=[l("反例：")])),_:1}),i[526]||(i[526]=l("explain 表的结果，type=index，索引物理文件全扫描，速度非常慢，这个 index 级别比较 range 还低，与全表扫描是小巫见大巫。"))]),s("li",null,[i[528]||(i[528]=s("p",null,[s("em",null,"建组合索引的时候，区分度最高的在最左边。")],-1)),t(n,{color:"grend"},{default:a(()=>i[527]||(i[527]=[l("正例：")])),_:1}),i[529]||(i[529]=l("如果 where a=? and b=?，如果 a 列的几乎接近于唯一值，那么只需要单建 idx_a 索引即可。")),i[530]||(i[530]=s("p",null,"说明：存在非等号和等号混合时，在建索引时，请把等号条件的列前置。如：where c>? and d=? 那么即使 c 的区分度更高，也必须把 d 放在索引的最前列，即索引 idx_d_c。",-1))]),i[532]||(i[532]=s("li",null,[s("p",null,[s("em",null,"防止因字段类型不同造成的隐式转换，导致索引失效。")])],-1)),i[533]||(i[533]=s("li",null,[s("p",null,"创建索引时避免有如下极端误解："),s("ol",null,[s("li",null,"宁滥无缺。认为一个查询就需要建一个索引。"),s("li",null,"宁缺无滥。认为索引会消耗空间、严重拖慢更新和新增速度。"),s("li",null,"抵制唯一索引。任务业务的唯一性一律需要再应用层通过“先查后插”方式解决。")])],-1))]),i[652]||(i[652]=s("h3",{id:"sql-语句",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#sql-语句"},[s("span",null,"SQL 语句")])],-1)),i[653]||(i[653]=s("hr",null,null,-1)),s("ol",null,[i[552]||(i[552]=s("li",null,[s("p",null,[s("strong",null,"不要使用 count(列名) 或 count(常量) 来代替 count(*)，count(*) 是 SQL92 定义的标准统计行数的语法，跟数据库无关，跟 NULL 和非 NULL 无关。")]),s("p",null,"说明：count(*) 会统计值为 NULL 的行，而 count(列名) 不会统计此列为 NULL 值的行。")],-1)),i[553]||(i[553]=s("li",null,[s("p",null,[s("strong",null,"count(distinct col) 计算该列除 NULL 之外的不重复行数，注意 count(distinct col1, col2) 如果其中一列全为 NULL，那么即使另一列有不同的值，也返回为 0。")])],-1)),s("li",null,[i[535]||(i[535]=s("p",null,[s("strong",null,"当某一列的值全是 NULL 时，count(col) 的返回结果为 0，但 sum(col) 的返回结果为 NULL，因此使用 sum() 时需注意 NPE 问题。")],-1)),t(n,{color:"grend"},{default:a(()=>i[534]||(i[534]=[l("正例：")])),_:1}),i[536]||(i[536]=l("可以使用如下方式来避免 sum 的 NPE 问题：SELECT IF(ISNULL(SUM(g)),0,SUM(g)) FROM table;"))]),s("li",null,[s("p",null,[i[539]||(i[539]=l("使用 ")),t(n,{color:"cornflowerblue"},{default:a(()=>i[537]||(i[537]=[l("ISNULL()")])),_:1}),i[540]||(i[540]=l(" 来判断是否为 ")),t(n,{color:"cornflowerblue"},{default:a(()=>i[538]||(i[538]=[l("NULL")])),_:1}),i[541]||(i[541]=l(" 值。"))]),i[551]||(i[551]=s("p",null,"说明：NULL 与任何值的直接比较都为 NULL。",-1)),s("ol",null,[s("li",null,[i[543]||(i[543]=l("NULL<>NULL 的返回结果是 NULL，而不是 ")),t(n,{color:"red"},{default:a(()=>i[542]||(i[542]=[l("false")])),_:1}),i[544]||(i[544]=l("。"))]),s("li",null,[i[546]||(i[546]=l("NULL=NULL 的返回结果是 NULL，而不是")),t(n,{color:"red"},{default:a(()=>i[545]||(i[545]=[l("true")])),_:1}),i[547]||(i[547]=l("。"))]),s("li",null,[i[549]||(i[549]=l("NULL<>1 的返回结果是 NULL，而不是")),t(n,{color:"red"},{default:a(()=>i[548]||(i[548]=[l("true")])),_:1}),i[550]||(i[550]=l("。"))])])]),i[554]||(i[554]=p(`<li><p><strong>在代码中写分页查询逻辑时，若 count 为 0 应直接返回，避免执行后面的分页语句。</strong></p></li><li><p><strong>不得使用外键与级联，一切外键概念必须在应用层解决。</strong></p><p>说明：以学生和成绩的关系为例，学生表中的 student_id 是主键，那么成绩表中的 student_id 则为外键。如果更新学生表中的 student_id，同时触发成绩表中的 student_id 更新，即为级联更新。外键与级联更新适用于单机低并发，不适合分布式、高并发集群；级联更新是强阻塞，存在数据库更新风暴的风险；外键影响数据库的插入速度。</p></li><li><p><strong>禁止使用存储过程，存储过程难以调试和扩展，更没有移植性。</strong></p></li><li><p><strong>数据订正（特别是删除、修改记录操作）时，要先 select，避免出现误删除，确认无误才能执行更新语句。</strong></p></li><li><p><em>in 操作能避免则避免，若实在避免不了，需要仔细评估 in 后边的集合元素数量，控制在 1000 个之内。</em></p></li><li><p>如果有国际化需要，所有的字符存储与表示，均为 utf-8 编码，注意字符统计函数的区别。</p><p>说明：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> LENGTH</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;轻松工作&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);		# 返回为12</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> CHARACTER_LENGTH(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;轻松工作&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)		#返回为4</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># 如果需要存储表情，那么选择 utf8mb4 来进行存储，注意它为 utf-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 编码的区别。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>TRUNCATE TABLE 比 DELETE 速度快，且使用的系统和事务日志资源少，但 TRUNCATE 无事务且不触发 trigger，有可能造成事故，故不建议在开发代码中使用此语句。</p><p>说明：TRUNCATE TABLE 在功能上与不带 WHERE 字句的 DELETE 语句相同。</p></li>`,7))]),i[654]||(i[654]=s("h3",{id:"orm-映射",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#orm-映射"},[s("span",null,"ORM 映射")])],-1)),i[655]||(i[655]=s("hr",null,null,-1)),s("ol",null,[i[559]||(i[559]=p("<li><p><strong>在表查询中，一律不要使用 * 作为查询的字段列表，需要哪些字段必须明确写明。</strong></p><p>说明：</p><ol><li>增加查询分析器的解析成败。</li><li>增减字段容易与 resultMap 配置不一致。</li><li>无用字段增加网络消耗，尤其是 text 类型的字段。</li></ol></li><li><p><strong>POJO 类的布尔属性不能加 is，而数据库字段必须加 is_，要求在 resultMap 中进行字段与属性之间的映射。</strong></p><p>说明：参见定义 POJO 类以及数据库字段定义规定，在 &lt;resultMap&gt; 在增加映射，是必须的。在 MaBatis Generator 生成的代码中，需要进行对应的修改。</p></li><li><p><strong>不要用 resultClass 当返回参数，即使所有类属性名与数据库字段一一对应，也需要定义；反过来，每一个表也必然有一个 POJO 类与之对应。</strong></p><p>说明：配置映射关系，使字段与 DO 类解耦，方便维护。</p></li><li><p><strong>sql.xml 配置参数使用：#{}，#param# 不要使用 ${} 此种方式容易出现 SQL 注入。</strong></p></li>",4)),s("li",null,[i[556]||(i[556]=s("p",null,[s("strong",null,"iBATIS 自带的 queryForList(String statementName, int start, int size) 不推荐使用。")],-1)),i[557]||(i[557]=s("p",null,"说明：其实现方式是在数据库取到 statementName 对应的 SQL 语句的所有记录，再通过 subList 取 start,size 的字集合。",-1)),t(n,{color:"grend"},{default:a(()=>i[555]||(i[555]=[l("正例：")])),_:1}),i[558]||(i[558]=p(`<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Map</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> map </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HashMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;start&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,start);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pur</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;size&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,size);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1))]),i[560]||(i[560]=p("<li><p><strong>不允许直接拿 HashMap 与 Hashtable 作为查询结果集的输出。</strong></p><p>说明：resultClass=&quot;Hashtable&quot;，会置入字段名和属性值，但是值的类型不可控。</p></li><li><p><strong>更新数据表记录时，必须同时更新记录对应的 gmt_modified 字段值为当前时间。</strong></p></li><li><p><em>不要写一个大而全的数据更新接口。传入为 POJO 类，不管是不是自己的目标更新字段，都进行 update table set c1=value1,c2=value2,c3=value3；这是不对的。执行 SQL 时，不要更新无改动的字段，一是易出错；二是效率低；三是增加 binlog 存储。</em></p></li><li><p>@Transactional 事务不要滥用。事务会影响数据库的 QPS，另外使用事务的地方需要考虑各方面的回滚方案，包括缓存回滚、搜索引擎回滚、消息补偿、统计修正等。</p></li><li><p>&lt;isEqual&gt; 中的 compareValue 是与属性值对比的常量，一般是数字，表示相等时带上此条件；&lt;isNotEmpty&gt; 表示不为空且不为 null 时执行；&lt;isNotNull&gt; 表示不为 null 值时执行。</p></li>",5))]),i[656]||(i[656]=p('<h2 id="工程结构" tabindex="-1"><a class="header-anchor" href="#工程结构"><span>工程结构</span></a></h2><h3 id="应用分层" tabindex="-1"><a class="header-anchor" href="#应用分层"><span>应用分层</span></a></h3><hr><ol><li><p><em>图中默认上层依赖于下层，箭头关系表示可直接依赖，如：开放接口层可以依赖于 Web 层，也可以直接依赖于 Service 层，以此类推：</em></p><figure><img src="http://101.43.49.28:9000/blog/工程结构图.png" alt="工程结构图" tabindex="0" loading="lazy"><figcaption>工程结构图</figcaption></figure><ul><li>开发接口层：可直接封装 Service 方法暴露成 RPC 接口；通过 Web 封装成 http 接口；进行网关安全控制、流量控制等。</li><li>终端显示层：各个端的模版渲染并执行显示的层。当前主要是 velocity 渲染，JS 渲染，JSP 渲染，移动端展示等。</li><li>Web 层：主要是对访问控制进行转发，各类基本参数校验，或者不复用的业务简单处理等。</li><li>Service 层：相对具体的业务逻辑服务层。</li><li>Manager 层：通用业务处理层，它有如下特征： <ol><li>对第三方平台封装的层，预处理返回结果及转化异常信息；</li><li>对 Service 层通用能力的下沉，如缓存方案、中间件通用处理；</li><li>与 DAO 层交互，对多个 DAO 的组合复用。</li></ol></li><li>DAO 层：数据访问层，与底层 MySQL、Oracle、Hbase 等进行数据交互。</li><li>外部接口或第三方平台：包括其他部门 RPC 开放接口，基础平台，其它公司的 HTTP 接口。</li></ul></li><li><p>（分层异常处理规约）在 DAO 层，产生的异常类型有很多，无法用细粒度的异常进行 catch，使用 catch(Exception e) 方式，并 throw new DAOExceprion(e)，不需要打印日志，因为日志在 Manager/Service 层一定需要捕获并打印到日志文件中去，如果同台服务器再打日志，浪费性能和存储。在 Service 层出现异常时，必须记录出错日志到磁盘，尽可能带上参数信息，相当于保护案发现场。如果是单独部署，则采用与 Service 一致的处理方式。Web 层绝不应该继续往上抛异常，因为已经处于顶层，如果意识到这个异常将会导致页面无法正常渲染，那么就应该直接跳转到友好错误页面，加上用户容易理解的错误提示信息。开发接口层要将异常处理成错误码和错误信息方式返回。</p></li><li><p>分层邻域模型规约：</p><ul><li>DO(Data Object)：此对象与数据库表结构一一对应，通过 DAO 层向上传输数据源对象。</li><li>DTO(Data Transfer Object)：数据传输对象，Service 或 Manager 向外传输的对象。</li><li>BO(Business Object)：业务对象，由 Service 层输出的封装业务逻辑的对象。</li><li>AO(Application Object)：应用对象，在 Web 层与 Service 层之间抽象的复用对象模型，极为贴近展示层，复用读不高。</li><li>VO(View Object)：显示层对象，通常是 Web 向模版渲染引擎层传输的对象。</li><li>Query：数据查询对象，各层接收上层的查询请求。注意超过 2 个参数的查询封装，禁止使用 Map 类来传输。</li></ul></li></ol><h3 id="二方库依赖" tabindex="-1"><a class="header-anchor" href="#二方库依赖"><span>二方库依赖</span></a></h3><hr>',6)),s("ol",null,[s("li",null,[i[572]||(i[572]=s("p",null,[s("strong",null,"定义 GAV 遵从以下规则：")],-1)),s("ol",null,[s("li",null,[t(n,{color:"cornflowerblue"},{default:a(()=>i[561]||(i[561]=[l("G")])),_:1}),i[563]||(i[563]=l("roupID 格式：com.{公司/BU}.业务线 [.子业务线]，最多 4 级。")),i[564]||(i[564]=s("p",null,"说明：{公司/BU} 例如：alibaba/taobao/tmall/aliexpress 等 BU 一级；子页务线可选。",-1)),t(n,{color:"grend"},{default:a(()=>i[562]||(i[562]=[l("正例：")])),_:1}),i[565]||(i[565]=l("com.taoboa.jstorm 或 com.alibaba.dubbo.register"))]),s("li",null,[t(n,{color:"cornflowerblue"},{default:a(()=>i[566]||(i[566]=[l("A")])),_:1}),i[568]||(i[568]=l("rtifactID 格式：产品线名-模块名。语义不重复不遗漏，先到中央仓库去查证一下。")),t(n,{color:"grend"},{default:a(()=>i[567]||(i[567]=[l("正例：")])),_:1}),i[569]||(i[569]=l("dubbo-client / fastjson-api / jstorm-tool"))]),s("li",null,[t(n,{color:"cornflowerblue"},{default:a(()=>i[570]||(i[570]=[l("V")])),_:1}),i[571]||(i[571]=l("ersion：详细规定参考下方。"))])])]),s("li",null,[i[576]||(i[576]=s("p",null,[s("strong",null,"二方库版本号命名方式：主版本号.次版本号.修订号")],-1)),i[577]||(i[577]=s("ol",null,[s("li",null,"主版本号：产品方向改变，或者大规模 API 不兼容，或者架构不兼容升级。"),s("li",null,"次版本号：保持相对兼容性，增加主要功能特性，影响范围极小的 API 不兼容修改。"),s("li",null,"修订号：保持完全兼容性，修复 BUG、新增次要功能特性等。")],-1)),s("p",null,[i[574]||(i[574]=l("说明：注意起始版本号必须为：")),t(n,{color:"cornflowerblue"},{default:a(()=>i[573]||(i[573]=[l("1.0.0")])),_:1}),i[575]||(i[575]=l("，而不是 0.0.1 正式发布的类库必须先去中央仓库进行查证，使版本号有延续性，正式版本号不允许覆盖升级。如当前版本：1.3.3，那么下一个合理的版本号：1.3.4 或 1.4.0 或 2.0.0"))])]),i[578]||(i[578]=p("<li><p><strong>线上应用不要依赖 SNAPSHOT 版本（安全包除外）。</strong></p><p>说明：不依赖 SNAPSHOT 版本是保证应用发布的幂等性。另外，也可以加快编译时的打包构建。</p></li><li><p><strong>二方库的新增或升级，保持除功能点之外的其他 jar 包仲裁结果不变。如果有改变，必须明确评估和验证，建议进行 dependency:resolve 前后信息比对，如果仲裁结果完全不一致，那么通过 dependency:tree 命令，找出差异点，进行 &lt;excludes&gt; 排除 jar 包。</strong></p></li><li><p><strong>二方库里可以定义枚举类型，参数可以使用枚举类型，但是接口返回值不允许使用枚举类型或者包含枚举类型的 POJO 对象。</strong></p></li><li><p><strong>依赖于一个二方库群时，必须定义一个统一的版本变量，避免版本号不一致。</strong></p><p>说明：依赖 springframework-core，-context，-beans，它们都是用一个版本，可以定义一个变量来保存版本：${spring.version}，定义依赖的时候，引用该版本。</p></li><li><p><strong>禁止在子项目的 pom 依赖中出现相同的 GroupId，相同的 ArtifactId，但是不同的 Version。</strong></p><p>说明：在本地调试时会使用各子项目指定的版本号，但是合并成一个 war，只能有一个版本号出现在最后的 lib 目录中。可能出现线下调试是正确的，发布到线上却出现故障的问题。</p></li><li><p><em>所有 pom 文件中的依赖声明放在 &lt;dependencies&gt; 语句块中，所有版本仲裁放在 &lt;dependencyManagement&gt; 语句块中。</em></p><p>说明：&lt;dependencyManagement&gt; 里只是声明版本，并不实现引入，因此子项目需要显式的声明依赖，version 和 scope 都读取自父 pom。而 &lt;dependencies&gt; 所有声明在主 pom 的 &lt;dependencies&gt; 里的依赖都会自动引入，并默认被所有的子项目继承。</p></li><li><p><em>二方库不要有配置项，最低限度不要再增加配置项。</em></p></li><li><p>为避免应用二方库的依赖冲突问题，二方库发布者应当遵循以下原则：</p><ol><li>**精简可控原则：**移除一切不必要的 API 和依赖，只包含 Service API、必要的邻域模型对象、Utils 类、常量、枚举等。如果依赖其他二方库，尽量是 provided 引入，让二方库使用者去依赖具体版本号：无 log 具体实现，只依赖日志框架。</li><li>**稳定可追溯原则：**每个版本的变化应该被记录，二方库由谁维护，源码在哪里，都需要能方便查到。除非用户主动升级版本，否则公共二方库的行为不应该发生变化。</li></ol></li>",8))]),i[657]||(i[657]=s("h3",{id:"服务器",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#服务器"},[s("span",null,"服务器")])],-1)),i[658]||(i[658]=s("hr",null,null,-1)),s("ol",null,[s("li",null,[i[580]||(i[580]=s("p",null,[s("em",null,"高并发服务器建议调小 TCP 协议的 time_wait 超时时间。")],-1)),i[581]||(i[581]=s("p",null,"说明：操作系统默认 240 秒后，才会关闭处于 time_wait 状态的连接，在高并发访问下，服务器端会因为处于 time_wait 的连接数太多，可能无法建立新的连接，所以需要在服务器上调小此等待值。",-1)),t(n,{color:"grend"},{default:a(()=>i[579]||(i[579]=[l("正例：")])),_:1}),i[582]||(i[582]=l("在 linux 服务器上请通过变更 /etc/sysctl.conf 文件去修改该缺省值（秒）：net.ipv4.tcp_fin_timeout = 30"))]),i[583]||(i[583]=s("li",null,[s("p",null,[s("em",null,"调大服务器所支持的最大文件句柄数 (File Descriptor，简写为 fd)。")]),s("p",null,"说明：主流操作系统的设计是将 TCP/UDP 连接采用与文件一样的方式去管理，即一个连接对应于一个 fd。主流的 linux 服务器默认所支持最大 fd 数量为 1024，当并发连接数很大时很容易因为 fd 不足而出现“open too many files”错误，导致新的连接无法建立。建议将 linux 服务器所支持的最大句柄数调高数倍（与服务器的内存数量相关）。")],-1)),i[584]||(i[584]=s("li",null,[s("p",null,[s("em",null,"给 JVM 环境参数设置 -XX:+HeapDumpOnOutOfMemoryError 参数，让 JVM 碰到 OOM 场景时输出 dump 信息。")]),s("p",null,"说明：OOM 的发生是有概率的，甚至相隔数月才出现一例，出错时的堆内信息对解决问题非常有帮助。")],-1)),i[585]||(i[585]=s("li",null,[s("p",null,[s("em",null,"在线上生产环境，JVM 的 Xms 和 Xmx 设置一样大小的内存容量，避免在 GC 后调整堆大小带来的压力。")])],-1)),i[586]||(i[586]=s("li",null,[s("p",null,"服务器内部重定向使用 forward；外部重定向地址使用 URL 拼接工具类来生成，否则会带来 URL 维护不一致的问题和潜在的安全风险。")],-1))]),i[659]||(i[659]=s("h2",{id:"设计规约",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#设计规约"},[s("span",null,"设计规约")])],-1)),s("ol",null,[s("li",null,[s("p",null,[s("strong",null,[t(n,{color:"cornflowerblue"},{default:a(()=>i[587]||(i[587]=[l("存储方案")])),_:1}),i[589]||(i[589]=l("和")),t(n,{color:"cornflowerblue"},{default:a(()=>i[588]||(i[588]=[l("底层数据结构")])),_:1}),i[590]||(i[590]=l("的设计获得评审一致通过，并沉淀成为文档。"))])]),i[592]||(i[592]=s("p",null,"说明：有缺陷的底层数据结构容易导致系统风险上升，可扩展性下降，重构成本也会因历史数据迁移和系统平滑过渡而陡然增加，所以，存储方案和数据结构需要认真地进行设计和评审，生产环境提交执行后，需要进行 double check。",-1)),t(n,{color:"grend"},{default:a(()=>i[591]||(i[591]=[l("正例：")])),_:1}),i[593]||(i[593]=l("评审内容包括存储介质选型、表结构设计能否满足技术方案、存取性能和存储空间能否满足业务发展、表或字段之间的辩证关系、字段名称、字段类型、索引等；数据结果变更（如在原有表中新增字段）也需要进行评审通过后上线。"))]),s("li",null,[s("p",null,[s("strong",null,[i[596]||(i[596]=l("在需求分析阶段，如果与系统交互的 User 超过")),t(n,{color:"cornflowerblue"},{default:a(()=>i[594]||(i[594]=[l("一类")])),_:1}),i[597]||(i[597]=l("并且相关的 User Case 超过 ")),t(n,{color:"cornflowerblue"},{default:a(()=>i[595]||(i[595]=[l("5 个")])),_:1}),i[598]||(i[598]=l("，使用用例图来表达更加清晰的结构化需求。"))])])]),s("li",null,[s("p",null,[i[600]||(i[600]=l("如果某个业务对象的状态超过 ")),t(n,{color:"cornflowerblue"},{default:a(()=>i[599]||(i[599]=[l("3 个")])),_:1}),i[601]||(i[601]=l("，使用状态图来表达并且明确状态变化的各个触发条件。"))]),i[603]||(i[603]=s("p",null,"说明：状态图的核心是对象状态，首先明确对象有多少种状态，然后明确两两状态之间是否存在直接转换关系，再明确触发状态转换的条件是什么。",-1)),t(n,{color:"grend"},{default:a(()=>i[602]||(i[602]=[l("正例：")])),_:1}),i[604]||(i[604]=l("淘宝订单状态有已下单、待付款、已付款、待发货、已发货、已收货等。比如已下单与已收货这两种状态之间是不可能有直接转换关系的。"))]),s("li",null,[s("p",null,[s("strong",null,[i[606]||(i[606]=l("如果系统中某个功能的调用链路上的涉及对象超过 ")),t(n,{color:"cornflowerblue"},{default:a(()=>i[605]||(i[605]=[l("3 个")])),_:1}),i[607]||(i[607]=l("，使用时序图来表达并且明确各调用环节的输入与输出。"))])]),i[608]||(i[608]=s("p",null,"说明：时序图反映了一系列对象间的交互与协作关系，清晰立体地反映系统的调用纵深链路。",-1))]),s("li",null,[s("p",null,[s("strong",null,[i[610]||(i[610]=l("如果系统中模型类超过 ")),t(n,{color:"cornflowerblue"},{default:a(()=>i[609]||(i[609]=[l("5 个")])),_:1}),i[611]||(i[611]=l("，并且存在复杂的依赖关系，使用类图来表达并且明确类之间的关系。"))])]),i[612]||(i[612]=s("p",null,"说明：类图像建筑邻域的施工图，如果搭平房，可能不需要，但如果建筑蚂蚁 Z 空间大楼，肯定需要详细的施工图。",-1))]),s("li",null,[s("p",null,[s("strong",null,[i[614]||(i[614]=l("如果系统中超过 ")),t(n,{color:"cornflowerblue"},{default:a(()=>i[613]||(i[613]=[l("2 个")])),_:1}),i[615]||(i[615]=l("对象之间存在协作关系，并且需要表示复杂的处理流程，使用活动图来表示。"))])]),i[616]||(i[616]=s("p",null,"说明：活动图是流程图的扩展，增加了能够体现协作关系的对象泳道，支持表示并发等。",-1))]),s("li",null,[i[618]||(i[618]=s("p",null,[s("em",null,"需求分析与系统设计在考虑主干功能的同时，需要充分评估异常流程与业务边界。")],-1)),t(n,{color:"red"},{default:a(()=>i[617]||(i[617]=[l("反例：")])),_:1}),i[619]||(i[619]=l("用户在淘宝付款过程中，银行扣款成功，发送给用户扣款成功短信，但是支付宝入款时由于断网演练产生异常，淘宝订单页面依然显示未付款，导致用户投诉。"))]),i[626]||(i[626]=p("<li><p><em>类在设计与实现时要符合单一原则。</em></p><p>说明：单一原则最易理解却是最难实现的一条规则，随着系统演进，很多时候，忘记了类设计的初衷。</p></li><li><p><em>谨慎使用继承的方式来进行扩展，优先使用聚合/组合的方式来实现。</em></p><p>说明：不得已使用继承的话，必须符合里氏代换原则，此原则说父类能够出现的地方子类一定能够出现，比如：“把钱叫出来”，钱的子类美元、欧元、人民币等都可以出现。</p></li><li><p><em>系统设计时，根据依赖倒置原则，尽量依赖抽象类与接口，有利于扩展与维护。</em></p><p>说明：对层次模块依赖于高层次模块的抽象，方便系统间的解耦。</p></li><li><p><em>系统设计时，注意对扩展开放， 对修改闭合。</em></p><p>说明：极端情况下，交付的代码都是不可修改的，同一业务域内的需求变化，勇敢模块或类的扩展来实现。</p></li><li><p><em>系统设计阶段，共性业务或公共行为抽取出来公共模块、公共配置、公共类、公共方法等，避免出现重复代码或重复配置的情况。</em></p><p>说明：随着代码的重复次数不断增加，维护成本指数级上升。</p></li>",5)),s("li",null,[s("p",null,[s("em",null,[i[621]||(i[621]=l("避免如下误解：")),t(n,{color:"orange"},{default:a(()=>i[620]||(i[620]=[l("敏捷开发 = 讲故事 + 编码 + 发布")])),_:1}),i[622]||(i[622]=l("。"))])]),i[624]||(i[624]=s("p",null,"说明：敏捷开发是快速交付迭代可用的系统，省略多余的设计方案，摒弃传统的审批流程，但核心关键点上的必要设计和文档沉淀是需要的。",-1)),t(n,{color:"red"},{default:a(()=>i[623]||(i[623]=[l("反例：")])),_:1}),i[625]||(i[625]=l("某团队为了业务快速发展，敏捷成了产品经理催进度的借口，系统中均是勉强能运行但像面条一样的代码，可维护性和可扩展性极差，一年之后，不得不进行大规模重构，得不偿失。"))]),i[627]||(i[627]=p("<li><p>参考设计主要目的是明确需求、理顺逻辑、后期维护，次要目的用于指导编码。</p><p>说明：避免为了设计而设计，系统设计文档有助于后期的系统维护，所以设计结果需要进行分类归档保存。</p></li><li><p>设计的本质就是识别和表达系统难点，找到系统的变化点，并隔离变化点。</p><p>说明：世间众多设计模式目的是相同的，即隔离系统变化点。</p></li><li><p>系统架构设计的目的：</p><ul><li>确定系统边界。确实系统在技术层面上的做与不做。</li><li>确定系统内模块之间的关系。确定模块之间的依赖关系及模块的宏观输入与输出。</li><li>确定指导后续设计与演化的原则。使后续的子系统或模块设计在规定的框架内继续演化。</li><li>确定非功能性需求。非功能性需求是指安全性、可用性、可扩展性等。</li></ul></li>",3))]),i[660]||(i[660]=p('<h2 id="专有名词解释" tabindex="-1"><a class="header-anchor" href="#专有名词解释"><span>专有名词解释</span></a></h2><ol><li><strong>POJO</strong> (Plain Ordinary Java Object)：在本手册中，POJO 专指只有 setter / getter / toString 的简单类，包括 DO / DTO / BO / VO 等。</li><li><strong>GAV</strong> (Group、ArtifactctId、Version)：Maven 坐标，是用来唯一标识 jar 包。</li><li><strong>OOP</strong> (Object Oriented Programming)：本手册泛指类、对象的编程处理方式。</li><li><strong>ORM</strong> (Object Relation Mapping)：对象关系映射，对象邻域模型与底层数据之间的转换，本文泛指 iBATIS，mybatis 等框架。</li><li><strong>NPE</strong> (java.lang.NullPointerException)：空指针异常。</li><li><strong>SOA</strong> (Service-Oriented Architercture)：面向服务架构，它可以根据需求通过网络对松散耦合的粗粒度应用组件进行分布式部署、组合和使用，有利于提升组件可重用性，可维护性。</li><li><strong>IDE</strong> (Integrated Development Environment)：用于提供程序开发环境的应用程序，一般包括代码编辑器、编译器、调试器和图形用户界面等工具本手册泛指 IntelliJ IDEA 和 eclipse。</li><li><strong>OOM</strong> (Out Of Memory)：源于 java.lang.OutOfMemoryError，当 JVM 没有足够的内存来对象分配空间并且垃圾回收器也无法回收空间时，系统出现的严重状况。</li><li><strong>一方库</strong>：本工程内部子项目模块依赖的库（ jar 包）。</li><li><strong>二方库</strong>：公司内部发布到中央仓库，可供公司内部其他应用依赖的库（ jar 包）。</li><li><strong>三方库</strong>：公司之外的开源库（ jar 包）。</li></ol>',2))])}const b=r(h,[["render",A]]),v=JSON.parse('{"path":"/posts/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83.html","title":"开发手册","lang":"zh-CN","frontmatter":{"sticky":true,"star":true,"category":["规范"],"tag":["编写代码时的要求","阿里开发手册"],"date":"2023-09-20T00:00:00.000Z","description":"开发手册 编程规约 粗体为强制!!! 斜体为推荐!! 正常体为参考! 命名风格 代码中的命名均不能，也不能。 _ name / _ name / $ name / name_ / name $ / name_ 代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。 说明：正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"开发手册\\",\\"image\\":[\\"http://101.43.49.28:9000/blog/工程结构图.png\\"],\\"datePublished\\":\\"2023-09-20T00:00:00.000Z\\",\\"dateModified\\":\\"2025-04-30T01:23:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.O\\"}]}"],["meta",{"property":"og:url","content":"https://blog.sylphy.me/posts/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83.html"}],["meta",{"property":"og:title","content":"开发手册"}],["meta",{"property":"og:description","content":"开发手册 编程规约 粗体为强制!!! 斜体为推荐!! 正常体为参考! 命名风格 代码中的命名均不能，也不能。 _ name / _ name / $ name / name_ / name $ / name_ 代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。 说明：正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://101.43.49.28:9000/blog/工程结构图.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-30T01:23:37.000Z"}],["meta",{"property":"article:tag","content":"阿里开发手册"}],["meta",{"property":"article:tag","content":"编写代码时的要求"}],["meta",{"property":"article:published_time","content":"2023-09-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-30T01:23:37.000Z"}]]},"git":{"createdTime":1745976217000,"updatedTime":1745976217000,"contributors":[{"name":"Sylphy","username":"Sylphy","email":"sylphy.me@foxmail.com","commits":1,"url":"https://github.com/Sylphy"}]},"readingTime":{"minutes":75.15,"words":22546},"filePathRelative":"posts/代码规范.md","excerpt":"\\n<h2>编程规约</h2>\\n<ul>\\n<li><strong>粗体</strong>为强制!!!</li>\\n<li><em>斜体</em>为推荐!!</li>\\n<li>正常体为参考!</li>\\n</ul>\\n<h3>命名风格</h3>\\n<hr>\\n<ol>\\n<li>\\n<p><strong>代码中的命名均不能，也不能。</strong></p>\\n<ul>\\n<li>\\n _ name / _ name / $ name / name_ / name $ / name_</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式</strong>。</p>\\n<p>说明：正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音命名方式也要避免采用。</p>\\n<ul>\\n<li>\\nalibaba / taobao / youku / hangzhou 等国际通用的名称，可视同英文。</li>\\n<li>\\nDaZhePromotion [打折] / getPingfenByName() [评分] / int 某变量 = 3</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>使用 UpperCamelCase 风格，但以下情形例外：DO / BO / DTO / VO / AO /  PO / UID 等。</strong></p>\\n<p>说明：大驼峰式命名法（UpperCamelCase）为都采用大写字母。</p>\\n<ul>\\n<li>\\nMarcoPolo / UserDO / XmlService / TcpUdpDeal / TaPromotion</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>都统一使用 lowerCamelCase 风格，必须遵从驼峰形式。</strong></p>\\n<p>说明：小驼峰式命名法（LowerCamelCase）为以小写字母开始，大写。</p>\\n<ul>\\n<li>\\nlocalValue / getHttpMessage() / inputUserId</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。</strong></p>\\n<ul>\\n<li>\\nMAX_STOCK_COUNT</li>\\n<li>\\nMAX_COUNT</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>命名使用 Abstract 或 Base 开头；命名使用 Exception 结尾；命名以它要测试的类的名称开始，以 Test 结尾。</strong></p>\\n</li>\\n<li>\\n<p><strong>类型与中括号紧挨相连来表示数组。</strong></p>\\n<ul>\\n<li>\\n定义整形数组 int[] arrayDemo;</li>\\n<li>\\n在 main 参数中，使用 String args[] 来定义。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>中布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误。</strong></p>\\n<ul>\\n<li>\\n定义为基本数据类型 Boolean isDeleted 的属性，它的方法也是 isDeleted()，RPC 框架在反向解析的时候，“误以为”对应的属性名称是 deleted，导致属性获取不到，进而抛出异常。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式。</strong></p>\\n<ul>\\n<li>\\n应用工具类包名为 com.alibaba.ai.util、类名为 MessageUtils（此规则参考 spring 的框架结构）</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>杜绝完全不规范的缩写，避免望文不知义。</strong></p>\\n<ul>\\n<li>\\nAbstractClass “缩写”命名成 AbsClass；condition “缩写”命名成 condi，此类随意缩写严重降低了代码的可阅读性。</li>\\n</ul>\\n</li>\\n<li>\\n<p><em>为了达到代码自解释的目标，任何自定义编程元素在命名时，使用尽量完整的单词组合来表达其意。</em></p>\\n<ul>\\n<li>\\n在 JDK 中，表达原子更新的类名为：AtomicReferenceFieldUpdater。</li>\\n<li>\\n变量 int a 的随意命名方式。</li>\\n</ul>\\n</li>\\n<li>\\n<p><em>如果使用了设计模式，在命名时需体现出具体模式。</em></p>\\n<p>说明：将设计模式体现在名字中，有利于阅读者快速理解架构设计理念。</p>\\n<ul>\\n<li>\\npublic class OrderFactory ; public class LoginProxy ; public class ResourceObserver ;</li>\\n</ul>\\n</li>\\n<li>\\n<p><em>中的方法和属性不要加任何修饰符号，保持代码的简洁性，并加上。尽量不要在接口里定义变量，如果一定要定义变量，肯定是与接口方法相关，并且是整个应用的基础常量。</em></p>\\n<p>说明：JDK8 中接口允许有默认实现，那么这个 default 方法，是对所有实现类都有价值的默认实现。</p>\\n<ul>\\n<li>\\n接口方法签名 void commit() ; 接口基础常量 String COMPANY = \\"alibaba\\" ;</li>\\n<li>\\n接口方法定义 public abstract void f() ;</li>\\n</ul>\\n</li>\\n<li>\\n<p>接口和的命名有两套规则：</p>\\n<ol>\\n<li>\\n<p><strong>对于 Service 和 ，基于 SOA 的理念，暴露出来的服务一定是接口，内部的实现类用 Impl 的后缀与接口区别。</strong></p>\\n<ul>\\n<li>\\nCacheServiceImpl 实现 CacheService 接口。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>如果是形容能力的接口名称，取对应的形容词为接口名（通常是 –able 的形式）。</strong></p>\\n<ul>\\n<li>\\nAbstractTranslator 实现 Translatable 接口。</li>\\n</ul>\\n</li>\\n</ol>\\n</li>\\n<li>\\n建议带上 Enum 后缀，。<p>说明：枚举其实就是特殊的类，域成员均为常量，且构造方法被默认强制是私有。</p>\\n<ul>\\n<li>\\n枚举名字为 ProcessStatusEnum 的成员名称：SUCCESS / UNKNOWN_REASON。</li>\\n</ul>\\n</li>\\n<li>\\n<p>各层命名规约：</p>\\n<ul>\\n<li>Service/DAO 层方法命名规约：</li>\\n</ul>\\n<ol>\\n<li>获取单个对象的方法用 get 做前缀。</li>\\n<li>获取多个对象的方法用 list 做前缀，复数形式结尾如：listObjects。</li>\\n<li>获取统计值的方法用 count 做前缀。</li>\\n<li>插入的方法用 save/insert 做前缀。</li>\\n<li>删除的方法用 remove/delete 做前缀。</li>\\n<li>修改的方法用 update 做前缀。</li>\\n</ol>\\n<ul>\\n<li>领域模型命名规约：\\n<ol>\\n<li>数据对象：xxxDO，xxx 即为数据表名。</li>\\n<li>数据传输对象：xxxDTO，xxx 为业务领域相关的名称。</li>\\n<li>展示对象：xxxVO，xxx 一般为网页名称。</li>\\n<li>POJO 是 DO/DTO/BO/VO 的统称，禁止命名成 xxxPOJO。</li>\\n</ol>\\n</li>\\n</ul>\\n</li>\\n</ol>","autoDesc":true}');export{b as comp,v as data};
