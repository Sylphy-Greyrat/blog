import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,b as a,o as i}from"./app-Ajq5bhoz.js";const l={};function s(r,e){return i(),n("div",null,e[0]||(e[0]=[a(`<h1 id="maven" tabindex="-1"><a class="header-anchor" href="#maven"><span>MAVEN</span></a></h1><h2 id="maven-的主体框架" tabindex="-1"><a class="header-anchor" href="#maven-的主体框架"><span>maven 的主体框架</span></a></h2><hr><figure><img src="http://101.43.49.28:9000/blog/maven的主体框架.png" alt="maven的主体框架" tabindex="0" loading="lazy"><figcaption>maven的主体框架</figcaption></figure><h2 id="maven-的安装与配置" tabindex="-1"><a class="header-anchor" href="#maven-的安装与配置"><span>maven 的安装与配置</span></a></h2><hr><ol><li><p>下载 JDK</p><p>在 Java 官⽅⽹站 下载并安装 JDK 7.0 及以上版本， JDK 的安装和配置请参考：</p><ol><li><a href="https://www.oracle.com/java/technologies/" target="_blank" rel="noopener noreferrer">JDK官网</a></li><li><a href="https://blog.csdn.net/xhmico/article/details/122390181" target="_blank" rel="noopener noreferrer">JDK环境配置</a></li></ol></li><li><p>下载 maven</p><ol><li><p><a href="https://maven.apache.org/download.cgi" target="_blank" rel="noopener noreferrer">maven 官网</a></p></li><li><p><a href="https://blog.csdn.net/u012660464/article/details/114113349" target="_blank" rel="noopener noreferrer">maven 环境配置</a><em><strong>（以下重点）</strong></em></p><ul><li><p>配置 Maven 本地仓库：</p><p>在 settings 标签内添加 localRepository 标签，设置本地 Maven 仓库路径，相应的依赖将会 被下载到该⽬录下。相关配置如下：</p><div class="language-maven line-numbers-mode" data-highlighter="shiki" data-ext="maven" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> &lt;!-- 配置本地仓库 --&gt;</span></span>
<span class="line"><span>&lt;localRepository&gt;E:\\repository&lt;/localRepository&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Maven 中央仓库换国内源</p><p>由于默认的中央仓库服务器在国外，为了加速 jar 包访问速度，需要将仓库配置为阿⾥云源仓库。在settings.xml ⽂ 件中找到 mirrors 标签，添加阿⾥源的地址，参考配置如下所示：</p><div class="language-maven line-numbers-mode" data-highlighter="shiki" data-ext="maven" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;mirrors&gt;</span></span>
<span class="line"><span>    &lt;mirror&gt;</span></span>
<span class="line"><span>        &lt;id&gt;alimaven&lt;/id&gt;</span></span>
<span class="line"><span>        &lt;name&gt;aliyun maven&lt;/name&gt;</span></span>
<span class="line"><span>        &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</span></span>
<span class="line"><span>        &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span></span>
<span class="line"><span>    &lt;/mirror&gt;</span></span>
<span class="line"><span>&lt;/mirrors&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol></li></ol><h2 id="maven-项目常用命令" tabindex="-1"><a class="header-anchor" href="#maven-项目常用命令"><span>maven 项目常用命令</span></a></h2><hr><table><thead><tr><th style="text-align:left;">MAVEN常用命令</th></tr></thead><tbody><tr><td style="text-align:left;">1. mvn clean : 清理,清理 target 下的⽬标⽂件</td></tr><tr><td style="text-align:left;">2. mvn package : 打包,将源码编译后打包为 jar/war,到 target 下</td></tr><tr><td style="text-align:left;">3. mvn compile: 编译源代码</td></tr><tr><td style="text-align:left;">4. mvn clean package : 清理且打包,⼀起运⾏</td></tr><tr><td style="text-align:left;">5. mvn clean package -maven.test.skip=true : 清理且打包,同时跳过 test 测试</td></tr><tr><td style="text-align:left;">6. mvn clean compile package -maven.test.skip=true : 清理编译且打包,同时跳过 test 测试</td></tr><tr><td style="text-align:left;">7. mvn test-compile : 运⾏测试</td></tr><tr><td style="text-align:left;">8. mvn depoly: 部署,将⽣产的⽬标⽂件上传到本地仓库和公司仓库</td></tr><tr><td style="text-align:left;">9. mvn jetty:run : 调⽤ Jetty 插件的 Run ⽬标在 Jetty Servlet 容器中启动 web 应⽤</td></tr></tbody></table><h2 id="maven项目的生命周期" tabindex="-1"><a class="header-anchor" href="#maven项目的生命周期"><span>maven项目的生命周期</span></a></h2><hr><table><thead><tr><th><em><strong>验证</strong></em></th><th><em><strong>处理描述</strong></em></th></tr></thead><tbody><tr><td>验证（validate）</td><td>验证项⽬是否正确，所有必要的信息可⽤。</td></tr><tr><td>编译（compile）</td><td>编译项⽬的源代码。</td></tr><tr><td>测试（test）</td><td>使⽤合适的单元测试框架测试编译的源代码。这些测试不应该要求代码被打包或部署 。</td></tr><tr><td>打包（package）</td><td>采⽤编译的代码，并以其可分配格式（如 JAR）进⾏打包。</td></tr><tr><td>验证（verify）</td><td>对集成测试的结果执⾏任何检查，以确保满⾜质量标准 。</td></tr><tr><td>安装（install）</td><td>将软件包安装到本地存储库中，⽤作本地其他项⽬的依赖项 。</td></tr><tr><td>部署（deploy）</td><td>在构建环境中完成，将最终的包复制到远程存储库以与其他开发⼈员和项⽬共享。</td></tr></tbody></table>`,13)]))}const d=t(l,[["render",s]]),m=JSON.parse('{"path":"/posts/javaWeb/Maven.html","title":"Maven","lang":"zh-CN","frontmatter":{"title":"Maven","order":2,"category":["Maven"],"tag":["Maven"],"date":"2022-06-27T00:00:00.000Z","icon":"iconfont icon-Maven","description":"MAVEN maven 的主体框架 maven的主体框架maven的主体框架 maven 的安装与配置 下载 JDK 在 Java 官⽅⽹站 下载并安装 JDK 7.0 及以上版本， JDK 的安装和配置请参考： JDK官网 JDK环境配置 下载 maven maven 官网 maven 环境配置（以下重点） 配置 Maven 本地仓库： 在 sett...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Maven\\",\\"image\\":[\\"http://101.43.49.28:9000/blog/maven的主体框架.png\\"],\\"datePublished\\":\\"2022-06-27T00:00:00.000Z\\",\\"dateModified\\":\\"2025-04-30T01:23:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.O\\"}]}"],["meta",{"property":"og:url","content":"https://blog.sylphy.me/posts/javaWeb/Maven.html"}],["meta",{"property":"og:title","content":"Maven"}],["meta",{"property":"og:description","content":"MAVEN maven 的主体框架 maven的主体框架maven的主体框架 maven 的安装与配置 下载 JDK 在 Java 官⽅⽹站 下载并安装 JDK 7.0 及以上版本， JDK 的安装和配置请参考： JDK官网 JDK环境配置 下载 maven maven 官网 maven 环境配置（以下重点） 配置 Maven 本地仓库： 在 sett..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://101.43.49.28:9000/blog/maven的主体框架.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-30T01:23:37.000Z"}],["meta",{"property":"article:tag","content":"Maven"}],["meta",{"property":"article:published_time","content":"2022-06-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-30T01:23:37.000Z"}]]},"git":{"createdTime":1745976217000,"updatedTime":1745976217000,"contributors":[{"name":"Sylphy","username":"Sylphy","email":"sylphy.me@foxmail.com","commits":1,"url":"https://github.com/Sylphy"}]},"readingTime":{"minutes":2,"words":599},"filePathRelative":"posts/javaWeb/Maven.md","excerpt":"\\n<h2>maven 的主体框架</h2>\\n<hr>\\n<figure><img src=\\"http://101.43.49.28:9000/blog/maven的主体框架.png\\" alt=\\"maven的主体框架\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>maven的主体框架</figcaption></figure>\\n<h2>maven 的安装与配置</h2>\\n<hr>\\n<ol>\\n<li>\\n<p>下载 JDK</p>\\n<p>在 Java 官⽅⽹站 下载并安装 JDK 7.0 及以上版本， JDK 的安装和配置请参考：</p>\\n<ol>\\n<li><a href=\\"https://www.oracle.com/java/technologies/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">JDK官网</a></li>\\n<li><a href=\\"https://blog.csdn.net/xhmico/article/details/122390181\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">JDK环境配置</a></li>\\n</ol>\\n</li>\\n<li>\\n<p>下载 maven</p>\\n<ol>\\n<li>\\n<p><a href=\\"https://maven.apache.org/download.cgi\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">maven 官网</a></p>\\n</li>\\n<li>\\n<p><a href=\\"https://blog.csdn.net/u012660464/article/details/114113349\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">maven 环境配置</a><em><strong>（以下重点）</strong></em></p>\\n<ul>\\n<li>\\n<p>配置 Maven 本地仓库：</p>\\n<p>在 settings 标签内添加 localRepository 标签，设置本地 Maven 仓库路径，相应的依赖将会 被下载到该⽬录下。相关配置如下：</p>\\n<div class=\\"language-maven line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"maven\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span> &lt;!-- 配置本地仓库 --&gt;</span></span>\\n<span class=\\"line\\"><span>&lt;localRepository&gt;E:\\\\repository&lt;/localRepository&gt;</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>Maven 中央仓库换国内源</p>\\n<p>由于默认的中央仓库服务器在国外，为了加速 jar 包访问速度，需要将仓库配置为阿⾥云源仓库。在settings.xml ⽂ 件中找到 mirrors 标签，添加阿⾥源的地址，参考配置如下所示：</p>\\n<div class=\\"language-maven line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"maven\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>&lt;mirrors&gt;</span></span>\\n<span class=\\"line\\"><span>    &lt;mirror&gt;</span></span>\\n<span class=\\"line\\"><span>        &lt;id&gt;alimaven&lt;/id&gt;</span></span>\\n<span class=\\"line\\"><span>        &lt;name&gt;aliyun maven&lt;/name&gt;</span></span>\\n<span class=\\"line\\"><span>        &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</span></span>\\n<span class=\\"line\\"><span>        &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span></span>\\n<span class=\\"line\\"><span>    &lt;/mirror&gt;</span></span>\\n<span class=\\"line\\"><span>&lt;/mirrors&gt;</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ul>\\n</li>\\n</ol>\\n</li>\\n</ol>","autoDesc":true}');export{d as comp,m as data};
