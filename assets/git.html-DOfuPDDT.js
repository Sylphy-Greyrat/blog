import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as t,o as n}from"./app-Ajq5bhoz.js";const l={};function e(h,i){return n(),a("div",null,i[0]||(i[0]=[t(`<h1 id="集中式与分布式" tabindex="-1"><a class="header-anchor" href="#集中式与分布式"><span>集中式与分布式</span></a></h1><hr><p>​ 集中式版本控制系统（CVCS）和分布式版本控制系统（DVCS）之间存在一些关键的区别，这些区别主要涉及到存储结构、操作方式以及团队协作方面。</p><h2 id="存储结构" tabindex="-1"><a class="header-anchor" href="#存储结构"><span>存储结构</span></a></h2><hr><h3 id="集中式版本控制系统-cvcs" tabindex="-1"><a class="header-anchor" href="#集中式版本控制系统-cvcs"><span>集中式版本控制系统（CVCS）</span></a></h3><ol><li><strong>中央服务器存储：</strong><ul><li>所以版本信息都集中纯粹在一个中央服务器上。</li><li>开发者在进行任何版本控制操作时，需要与中央服务器进行通信，包括检出、提交、拉去和推送。</li></ul></li><li><strong>依赖中央服务器：</strong><ul><li>开发者的工作区通常只包含他们当前所需的文件，而不是整个项目的完整历史。</li><li>每次操作都需要与中央服务器同步，依赖于中央服务器的可用性和性能。</li></ul></li><li>协同工作依赖中央服务器： <ul><li>分支、合并等协同工作的操作都需要通过中央服务器来协调。</li><li>如果中央服务器出现故障或网络问题，协同工作可能受到影响。</li></ul></li></ol><h3 id="分布式版本控制系统-dvcs" tabindex="-1"><a class="header-anchor" href="#分布式版本控制系统-dvcs"><span>分布式版本控制系统（DVCS）</span></a></h3><ol><li><strong>每个开发者拥有完整存储库副本：</strong><ul><li>每个开发者克隆（Clone）整个存储库，包括完整的项目历史和所有文件。</li><li>开发者的本地存储库包含了整个项目的快照，使其成为一个完整的、独立的存储库。</li></ul></li><li><strong>本地操作：</strong><ul><li>大多数操作，包含提交、分支创建、合并等，都可以在本地完成。</li><li>开发者在本地工作区有整个项目的快照，无需频繁与中央服务器通信。</li></ul></li><li><strong>不依赖中央服务器：</strong><ul><li>开发者的本地存储库是一个完整的、独立的实体，不依赖与中央服务器的存活或网络连接。</li><li>即使中央服务器不可用，开发者仍然可以继续工作、提交变更和创建分支。</li></ul></li><li><strong>灵活的协同工作：</strong><ul><li>分支、合并等协同工作的操作可以在本地完成，冲突通常在本地解决。</li><li>变更在需要共享时，可以推送到远程仓库，与其他开发者共享。</li></ul></li></ol><p>​ 总体而言，CVCS 强调集中存储和依赖中央服务器的特性，而 DVCS 强调每个开发者拥有完整存储库副本、本地操作和不依赖中央服务器的特性。</p><h2 id="操作速度" tabindex="-1"><a class="header-anchor" href="#操作速度"><span>操作速度</span></a></h2><hr><h3 id="集中式版本控制系统-cvcs-1" tabindex="-1"><a class="header-anchor" href="#集中式版本控制系统-cvcs-1"><span>集中式版本控制系统（CVCS）</span></a></h3><ol><li><strong>依赖中央服务器：</strong><ul><li>所有的版本控制操作都需要与中央服务器进行通信。</li><li>签出（Checkout）、提交（Commit）、拉取（Pull）和推送（Push）等操作都要经过中央服务器。</li></ul></li><li><strong>网络延迟影响速度：</strong><ul><li>由于所有的操作都涉及与中央服务器的通信，网络延迟对操作速度有直接影响。</li><li>特别是在大型项目或者网络连接不稳定的情况下，操作可能会变得缓慢。</li></ul></li></ol><h3 id="分布式版本控制系统-dvcs-1" tabindex="-1"><a class="header-anchor" href="#分布式版本控制系统-dvcs-1"><span>分布式版本控制系统（DVCS）</span></a></h3><ol><li><strong>本地操作：</strong><ul><li>大多数操作可以在本地完成，无需即时与中央服务器通信。</li><li>检出、提交、分支创建、合并等本地操作通常更加迅速。</li></ul></li><li><strong>独立的工作：</strong><ul><li>因为每个开发者都有完整的存储库副本，他们可以在本地独立工作，不必等待中央服务器的响应。</li><li>本地分支操作和合并通常不受中央服务器性能的限制。</li></ul></li><li><strong>离线工作：</strong><ul><li>开发者可以在没有网络连接的情况下继续工作，因为他们的本地存储库包含了完整的项目历史。</li></ul></li></ol><h3 id="区别总结" tabindex="-1"><a class="header-anchor" href="#区别总结"><span>区别总结：</span></a></h3><ul><li>CVCS 的操作速度： <ul><li>受制于与中央服务器的通信，网络延迟可能导致操作变慢。</li><li>特别是在大型项目和网路不稳定的环境中，操作可能会感到缓慢。</li></ul></li><li>DVCS 的操作速度： <ul><li>大多数操作可以在本地快速完成，不受中央服务器的直接影响。</li><li>独立工作和离线工作的能力提高了操作的灵活性和效率。</li></ul></li></ul><p>总体而言，DVCS 的分布式性质允许开发者在本地快速执行操作，减少了对中央服务器的依赖，特别是在网络不稳定或离线工作的情况下。</p><h2 id="分支和合并" tabindex="-1"><a class="header-anchor" href="#分支和合并"><span>分支和合并</span></a></h2><hr><h3 id="集中式版本控制系统-cvcs-2" tabindex="-1"><a class="header-anchor" href="#集中式版本控制系统-cvcs-2"><span>集中式版本控制系统（CVCS）</span></a></h3><ol><li><strong>分支操作：</strong><ul><li>操作分支通常在中央服务器上进行。开发者需要告知中央服务器他们要创建一个新分支，并在中央服务器上进行相应的操作。</li><li>分支通常被认为是在整个项目中创建的一个“快照”，并且在本地工作区内的切换可能需要从中央服务器获取所有相关的分支文件。</li></ul></li><li><strong>合并操作：</strong><ul><li>合并通常发生在中央服务器上。开发者将自己的分支合并到主分支时，需要将变更推送到中央服务器进行合并。</li><li>如果多个开发者在同一时间内修改了同一文件，可能会导致冲突，需要手动解决。</li></ul></li></ol><h3 id="分布式版本控制系统-dvcs-2" tabindex="-1"><a class="header-anchor" href="#分布式版本控制系统-dvcs-2"><span>分布式版本控制系统（DVCS）</span></a></h3><ol><li><strong>分支操作：</strong><ul><li>每个开发者都可以在本地创建分支，而不需要依赖于中央服务器。这意味着分支的创建和切换操作变得更加迅速，且不需要网络通信。</li><li>分支的创建和合并是本地操作，不需要于中央服务器频繁通信。</li></ul></li><li><strong>合并操作：</strong><ul><li>合并操作可以在本地进行。开发者可以在本地测试合并，解决冲突，然后再将变更推送到远程仓库。</li><li>因为每个开发者抖音完整的项目历史记录，合并冲突的机会较小，因为他们可以在本地解决冲突而不会影响其他人。</li></ul></li></ol><h3 id="区别总结-1" tabindex="-1"><a class="header-anchor" href="#区别总结-1"><span>区别总结：</span></a></h3><ul><li><strong>CVCS 中的分支和合并：</strong><ul><li>通常需要与中央服务器进行交互。</li><li>变更推送和合并在中央服务器上进行。</li></ul></li><li>DVCS 中的分支和合并： <ul><li>可以在本地进行分支创建、切换和合并。</li><li>变更推送和合并可以在本地完成，不一定需要中央服务器的直接参与。</li></ul></li></ul><h1 id="git" tabindex="-1"><a class="header-anchor" href="#git"><span>Git</span></a></h1><h2 id="git-的简介" tabindex="-1"><a class="header-anchor" href="#git-的简介"><span>Git 的简介</span></a></h2><hr><p>Git 是由 Linux 的创始人之一 Linus Torvalds 于2005年创建的。Git 的起源与 Linux 内核的开发过程有关。</p><p>在2005年之前，Linux 内核的开发使用的是 BitKeeper 这个商业的分布式版本控制系统。然而，由于一些争议和许可证问题，Linux 社区失去了对 BitKeeper 的免费使用权。这使得Linux社区急需一个新的版本控制系统。</p><p>Linus Torvalds 开始考虑构建一个新的版本控制系统，他希望它具有以下特性：</p><ol><li><strong>分布式：</strong> 每个开发者都能拥有整个代码仓库的完整副本，而不是像 CVCS 那样依赖于中央服务器。</li><li><strong>高效：</strong> 快速的性能，特别是在大型项目中。</li><li><strong>强大的分支和合并支持：</strong> 使得并行开发和合并变得更加容易。</li></ol><p>在这些目标的基础上，Linus Torvalds 在2005年开始开发 Git 。他在 Linux 社区中得到了很多贡献者的支持，Git 的开发逐渐形成了一个社区驱动的项目。Git 在短时间内取得了巨大成功，不仅成为 Linux 内核开发的首选版本控制系统，也在全球范围内得到了广泛的应用。</p><p>Git 的成功在很大程度上归功于其分布式性质、高效性能以及强大的分支和合并功能，使其成为开源开发和协作的首选工具之一。</p><h2 id="快速入门-git" tabindex="-1"><a class="header-anchor" href="#快速入门-git"><span>快速入门 Git</span></a></h2><hr><h3 id="安装-git" tabindex="-1"><a class="header-anchor" href="#安装-git"><span>安装 Git</span></a></h3><p><a href="https://blog.csdn.net/mukes/article/details/115693833" target="_blank" rel="noopener noreferrer">git 安装</a>，git 的安装网上一大堆，这里就从网上找一篇比较好的文章。</p><h3 id="配置-git" tabindex="-1"><a class="header-anchor" href="#配置-git"><span>配置 Git</span></a></h3><p>在安装完成后，需要配置 Git，至少设置用户名和邮箱地址，这将作为你的提交信息的标识。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --global</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> user.name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Your Name&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">				//</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 设置用户名</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --global</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> user.email</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;your.email@example.com&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	       //</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 邮箱地址</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建仓库" tabindex="-1"><a class="header-anchor" href="#创建仓库"><span>创建仓库</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mkdir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Demo</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\D</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">emo</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">git </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">init</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 通过以上三条简单的命令，我们随便创建了一个空文件夹 Demo，之后我们进入该文件夹，随后我们紧接着执行一条 <em><strong>git init</strong></em> 命令，这样我们就创建好了我们的第一个本地仓库。通过提示我们可以看见其实会多出来一个 .git 目录，它的作用是 Git 用来追踪管理版本库的，我们一般是不会去修改这个文件的，不然一不小心就破坏了我们的 Git 仓库</p><h3 id="提交文件" tabindex="-1"><a class="header-anchor" href="#提交文件"><span>提交文件</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> status</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol><li><p>先使用 <em><strong>git status</strong></em> 简单查看一下目前的仓库状态。</p></li><li><p>在输出中，&quot;On branch master&quot; 表示当前所在的分支是 master 分支。</p><p>&quot;No commits yet&quot; 表示在该分支上还没有进行过提交操作，即该分支上尚未有任何提交记录</p></li></ol><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">echo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Hello Git&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">mygit.txt</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> status</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ygit.txt</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> status</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> commit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;write a text&#39;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> status</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>echo &quot;Hello Git&quot; &gt; mygit.txt：这个命令将字符串 &quot;Hello Git&quot; 写入名为 mygit.txt 的文件中。</li><li><strong>git status</strong>：这个命令用于检查 Git 仓库的状态。</li><li><strong>git add</strong> ./mygit.txt：本质是 <strong>git add</strong> 命令，而这个命令将 mygit.txt 文件添加进 Git 的<strong>暂存区</strong>，准备将其纳入下一次提交中。</li><li><strong>git stauts</strong>：执行完 <strong>git add</strong> 命令后再执行 <strong>git status</strong>，显示了当前在 master 分支上的状态。在此处输出中，会出现 &quot;Changes to be committed&quot; 部分显示了将被提交的更改，其中包括新创建的 mygit.txt 文件。</li><li><strong>git commit</strong> -m &#39;write a text&#39;：本质是 <strong>git commit -m</strong> 命令，这个命令创建了一个新的提交记录，并将<strong>暂存区</strong>中的更改提交到 master 分支，提交消息为 &#39;write a text&#39;。</li><li><strong>git status</strong>：再次执行 <strong>git status</strong>，显示当前在 master 分支上的状态。在此处输出中，会出现 &quot;nothing to commit, working tree clean&quot; 表示当前没有待提交的更改，工作树是干净的，即没有未保存的修改。</li></ol><h3 id="修改文件" tabindex="-1"><a class="header-anchor" href="#修改文件"><span>修改文件</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">echo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;git is so good&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">.</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ygit.txt</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> status</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> diff</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">diff</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> a/mygit.txt</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> b/mygit.txt</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ygit.txt</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> status</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> commit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;update mygit&quot;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> status</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>echo &quot;git is so good&quot; &gt; .\\mygit.txt：这个命令将字符串 &quot;git is so good&quot; 写入名为 mygit.txt 的文件中。</li><li><strong>git status</strong>：这个命令用于检查 Git 仓库的状态。在执行后，它显示了当前在 master 分支上的状态。&quot;Changes not staged for commit&quot; 部分表示 mygit.txt 文件被修改但还未添加到暂存区。</li><li><strong>git diff</strong>：这个命令用于查看当前目录中文件与暂存区或最新提交之间的差异。执行后显示了 mygit.txt 文件的差异信息，表明文件的二进制内容不同。</li><li><strong>git add</strong> ./mygit.txt：这个命令将 mygit.txt 文件添加进 Git 的<strong>暂存区</strong>，准备将其纳入下一次提交中。</li><li><strong>git status</strong>：执行完 <strong>git add</strong> 命令后再执行 <strong>git status</strong>，显示了当前在 master 分支上的状态。在此处输出中，会出现 &quot;Changes to be committed&quot; 部分显示了将被提交的更改，其中包括新创建的 mygit.txt 文件。</li><li><strong>git commit</strong> -m &#39;write a text&#39;：这个命令创建了一个新的提交记录，并将<strong>暂存区</strong>中的更改提交到 master 分支，提交消息为 &#39;update mygit&#39;。</li><li><strong>git status</strong>：再次执行 <strong>git status</strong>，显示当前在 master 分支上的状态。在此处输出中，会出现 &quot;nothing to commit, working tree clean&quot; 表示当前没有待提交的更改，工作树是干净的，即没有未保存的修改。</li></ol><h3 id="查看日志" tabindex="-1"><a class="header-anchor" href="#查看日志"><span>查看日志</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> log</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>以下为部分日志输出的内容已经解释：</p><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>commit 3d56d8aa025c96d3f8337d3fa0f8bf368fe2e5f6 (HEAD -&gt; master)</span></span>
<span class="line"><span>Author: ozh &lt;1752772927@qq.com&gt;</span></span>
<span class="line"><span>Date:   Fri Dec 6 15:22:18 2023 +0800</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    update mygit</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>commit 3d56d8aa025c96d3f8337d3fa0f8bf368fe2e5f6：这是最近的提交记录的哈希值（commit hash）。</li><li>(HEAD -&gt; master)：表示当前所在的分支是 master 分支，HEAD 指向该分支。</li><li>Author: ozh &lt;1752772927@qq.com&gt;：提交的作者是 ozh，邮箱为 <a href="mailto:1752772927@qq.com" target="_blank" rel="noopener noreferrer">1752772927@qq.com</a>。</li><li>Date: Fri Dec 6 15:22:18 2023 +0800：提交的日期和时间是 2003年12月6日15时22分18秒，时区为+0800（东八区）。</li><li>update mygit：提交信息，由 <strong>git commit -m</strong> 命令提交的。</li></ul><p>每个提交记录都包含了提交的哈希值、作者、日期、时间以及提交信息。</p><h3 id="版本回退" tabindex="-1"><a class="header-anchor" href="#版本回退"><span>版本回退</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> reset</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --hard</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> HEAD~1</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cat</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ygit.txt</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		# Hello Git</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> log</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> reflog</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> reset</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --hard</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 3d56d8a</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cat</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ygit.txt</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		# git is so good</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> is</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> so</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> good</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p><strong>git reset</strong> --hard HEAD~1：这个命令将当前的 HEAD 指针重置到上一个提交，即父提交。同时，它会重置工作目录和暂存区，丢弃最新的提交和相关的更改。</p><ul><li>输出 HEAD is now at 4g61ew5 wrote a mygit file 表示 HEAD 已经指向了上一个提交，即 4g61ew5。</li><li>此时，工作目录和暂存区的状态与 4g61ew5 提交时的状态完全一致。</li></ul></li><li><p>cat .\\mygit.txt：这个命令用于查看 mygit.txt 文件的内容。</p><ul><li>因为我们返回到了上一个提交，因此文件的内容也回退到了上一个提交中的状态。</li></ul></li><li><p><strong>git log</strong>：这个命令用于查看提交历史记录。执行后显示了当前的提交历史记录。</p><ul><li>该日志会显示提交记录</li></ul></li><li><p><strong>git reflog</strong>：这个命令用于查看引用日志，即 HEAD 指针的移动历史。执行后显示了引用日志记录。</p><ul><li>该日志会显示提交记录与回退操作</li></ul></li><li><p><strong>git reset</strong> --hard 3d56d8a：这个命令将当前的 HEAD 指针重置到指定的提交 3d56d8a，同时丢弃最新的提交和相关的更改。</p><ul><li>输出 HEAD is now at 3d56d8a wrote a mygit file 表示 HEAD 已经指向了上一个提交，即 3d56d8a。</li><li>此时，工作目录和暂存区的状态与 3d56d8a 提交时的状态完全一致。</li></ul></li><li><p>cat .\\mygit.txt：这个命令用于查看 mygit.txt 文件的内容。不过此时的内容就会是 3d56d8a 提交中的内容。</p><ul><li>因为我们回退到了 3d56d8a 提交，所以文件的内容也回退到了该提交中的状态。</li></ul></li><li><p>简图</p><figure><img src="http://101.43.49.28:9000/blog/指针的变化.png" alt="指针的变化" tabindex="0" loading="lazy"><figcaption>指针的变化</figcaption></figure><p>根据以上命令序列的执行结果，我们进行了两次回退操作，恢复了最初的提交状态，并查看了相应的文件内容和提交历史记录。</p></li></ol><h2 id="工作区和暂存区" tabindex="-1"><a class="header-anchor" href="#工作区和暂存区"><span>工作区和暂存区</span></a></h2><hr><p>​ Git 的工作区（Working Directory）、暂存区（Stagig Area），以及版本库（Repository）是 Git 版本控制系统中的三个重要概念。理解这些概念对于有效使用 Git 是非常关键的。</p><h3 id="工作区-working-directory" tabindex="-1"><a class="header-anchor" href="#工作区-working-directory"><span>工作区（Working Directory）</span></a></h3><p>​ 工作区是你当前正在进行编辑和修改的目录。它包含了你项目的实际文件，是你进行修改的地方。当你在编辑文件时，你实际上是在修改工作区中的文件。</p><h3 id="暂存区-staging-area" tabindex="-1"><a class="header-anchor" href="#暂存区-staging-area"><span>暂存区（Staging Area）</span></a></h3><p>​ 暂存区是一个中间区域，用于准备将哪些修改提交到版本库。在工作区中修改的文件，你可以选择将它们添加到暂存区，表示你希望将这些修改包含在下一次提交中。</p><ul><li>使用 <strong>git add</strong> &lt;filename&gt; 命令将工作区的修改添加到暂存区。</li><li>使用 <strong>git reset</strong> &lt;filename&gt; 命令可以从暂存区撤销文件的修改。</li></ul><h3 id="版本库-repository" tabindex="-1"><a class="header-anchor" href="#版本库-repository"><span>版本库（Repository）</span></a></h3><p>版本库是 Git 存储项目的地方，包括了所有的历史记录和元数据。版本库通常位于项目的根目录中的 .git 目录下。</p><ul><li>使用 <strong>git commit</strong> 命令将暂存区的修改提交到版本库。</li><li>使用 <strong>git log</strong> 命令查看提交历史。</li></ul><h3 id="工作区、暂存区和版本库的交互过程" tabindex="-1"><a class="header-anchor" href="#工作区、暂存区和版本库的交互过程"><span>工作区、暂存区和版本库的交互过程</span></a></h3><ol><li>修改文件（在工作区）：你在工作区修改了文件。</li><li>将修改添加到暂存区：使用 <strong>git add</strong> &lt;filename&gt; 命令将修改添加到暂存区。</li><li>提交到版本库：使用 <strong>git commit</strong> 命令将暂存区的修改提交到版本库。</li></ol><p>这个过程中，文件在工作区修改，然后通过 git add 将修改添加到暂存区，最后使用 <strong>git commit</strong> 将暂存区的修改提交到版本库。</p><p>理解这三个区域的概念有助于更精确地控制和管理你的版本控制。你可以通过 <strong>git status</strong> 命令查看当前工作区和暂存区的状态，以及哪些文件已被修改、添加或提交。</p><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例：</span></a></h3><h4 id="管理修改" tabindex="-1"><a class="header-anchor" href="#管理修改"><span>管理修改</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cat</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ygit.txt</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">echo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;first change&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">.</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ygit.txt</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cat</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ygit.txt</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> status</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ygit.txt</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">echo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;second change&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">.</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ygit.txt</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> commit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;first change&quot;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> status</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>执行 cat .\\mygit.txt 命令显示了文件 mygit.txt 的内容：</p><div class="hint-container info"><p class="hint-container-title">mygit.txt</p><p>git is so good</p></div></li><li><p>执行 echo &quot;first change&quot;&gt;&gt;.\\mygit.txt 命令将 &quot;first change&quot; 追加到 mygit.txt 文件的末尾。</p></li><li><p>执行 cat .\\mygit.txt 命令再显示了文件 mygit.txt 的内容（现在包含了追加的内容）：</p><div class="hint-container info"><p class="hint-container-title">mygit.txt 的内容</p><p>git is so good<br> first change</p></div></li><li><p>执行 <strong>git status</strong> 命令显示了当前 Git 仓库的状态，指出了文件 mygit.txt 的修改未暂存。</p></li><li><p>执行 <strong>git add</strong> .\\mygit.txt 命令将文件 mygit.txt 的修改添加到暂存区。</p></li><li><p>执行 echo &quot;second change&quot;&gt;&gt;.\\mygit.txt 命令将 &quot;second change&quot; 追加到 mygit.txt 文件的末尾。</p></li><li><p>执行 <strong>git commit</strong> -m &quot;first change&quot; 命令提交了暂存区中的修改，并添加了提交消息 &quot;first change&quot;。</p></li><li><p>执行 <strong>git status</strong> 命令再次显示了当前 Git 仓库的状态，指出文件 mygit.txt 的修改未暂存。</p></li></ol><p>​ 在这个过程中，进行了一些基本的 Git 操作，包括修改文件、查看状态、将修改添加到暂存区、提交到版本库。请注意，如果想要提交第二次修改，需要先将其添加到暂存区，然后再次使用 <strong>git commit</strong>。</p><h4 id="撤销修改" tabindex="-1"><a class="header-anchor" href="#撤销修改"><span>撤销修改</span></a></h4><h5 id="文件只在工作区操作-未add" tabindex="-1"><a class="header-anchor" href="#文件只在工作区操作-未add"><span>文件只在工作区操作，未add</span></a></h5><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">echo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;stupid Boss&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">.</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ygit.txt</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cat</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ygit.txt</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> is</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> so</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> good</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> restore</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ygit.txt</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cat</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ygit.txt</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> is</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> so</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> good</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>执行 echo &quot;stupid Boss&quot;&gt;&gt;.\\mygit.txt 命令将 &quot;stupid Boss&quot; 追加到 mygit.txt 文件的末尾。</p></li><li><p>执行 cat .\\mygit.txt 命令显示了文件 mygit.txt 的内容，现在包含了追加的内容：</p><div class="hint-container info"><p class="hint-container-title">mygit.txt 的内容</p><p>git is so good<br> first change<br> second change<br> stupid Boss</p></div></li><li><p>执行 git restore .\\mygit.txt 命令恢复了 mygit.txt 文件到最近一次提交的状态，丢弃了所有未暂存的修改。</p></li><li><p>执行 cat .\\mygit.txt 命令再次显示了文件 mygit.txt 的内容，恢复后的内容与最近一次提交保持一致：</p><div class="hint-container info"><p class="hint-container-title">mygit.txt 的内容</p><p>git is so good<br> first change<br> second change</p></div></li></ol><p><strong>git restore</strong> 命令用于丢弃工作区等等更改并恢复文件到最近一次提交的状态。</p><h5 id="文件已-add-未-commit" tabindex="-1"><a class="header-anchor" href="#文件已-add-未-commit"><span>文件已 add，未 commit</span></a></h5><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">echo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;stupid Boss&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">.</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ygit.txt</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cat</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ygit.txt</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> is</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> so</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> good</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ygit.txt</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> status</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> restore</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --staged</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ygit.txt</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> status</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> restore</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ygit.txt</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cat</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ygit.txt</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> is</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> so</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> good</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>执行 echo &quot;stupid Boss&quot;&gt;&gt;.\\mygit.txt 命令将 &quot;stupid Boss&quot; 追加到 mygit.txt 文件的末尾。</p></li><li><p>执行 cat .\\mygit.txt 命令显示了文件 mygit.txt 的内容，现在包含了追加的内容：</p><div class="hint-container info"><p class="hint-container-title">mygit.txt 的内容</p><p>git is so good<br> first change<br> second change<br> stupid Boss</p></div></li><li><p>执行 <strong>git add</strong> .\\mygit.txt 命令将文件 mygit.txt 添加到暂存区。</p></li><li><p>执行 <strong>git status</strong> 命令显示了当前 Git 仓库的状态，指出文件 mygit.txt 的修改已经暂存，准备提交。</p></li><li><p>执行 <strong>git restore</strong> --staged .\\mygit.txt 命令将文件 mygit.txt 从暂存区移除，恢复到未暂存的状态。</p></li><li><p>执行 git 命令再次显示了当前 Git 仓库的状态，指出文件 mygit.txt 的修改未暂存。</p></li><li><p>执行 <strong>git restore</strong> .\\mygit.txt 命令恢复了 mygit.txt 文件到最近一次的提交的状态，丢弃了所有未暂存的修改。</p></li><li><p>执行 cat .\\mygit.txt 命令再次显示了文件 mygit.txt 的内容，恢复后的内容与最近一次提交保持一致：</p><div class="hint-container info"><p class="hint-container-title">mygit.txt 的内容</p><p>git is so good<br> first change<br> second change</p></div></li></ol><p>​ 使用了 <strong>git restore --staged</strong> 命令将文件移出暂存区。使用了 <strong>git restore</strong> 命令将文件恢复到最近一次提交的状态，丢弃了未暂存的修改。</p><h5 id="文件已-add-已-commit" tabindex="-1"><a class="header-anchor" href="#文件已-add-已-commit"><span>文件已 add，已 commit</span></a></h5><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">echo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;stupid Boss&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">.</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ygit.txt</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ygit.txt</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> commit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;stupid Boss&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ygit.txt</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cat</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ygit.txt</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> reset</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --hard</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> d2bd5c00f98681b17df9a00a34df714466198560</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cat</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ygit.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>执行 echo &quot;stupid Boss&quot;&gt;&gt;.\\mygit.txt 命令将“stupid Boss”追加到 mygit.txt 文件的末尾。</p></li><li><p>执行 <strong>git add</strong> .\\mygit.txt 命令将文件 mygit.txt 添加到暂存区。</p></li><li><p>执行 <strong>git commit</strong> -m &quot;stupid Boss&quot; .\\mygit.txt 命令提交了文件 mygit.txt 的修改，并添加了提交消息 &quot;stupid Boss&quot;。</p></li><li><p>执行 cat .\\mygit.txt 命令显示了文件 mygit.txt 的内容，包含了之前的修改：</p><div class="hint-container info"><p class="hint-container-title">mygit.txt 的内容</p><p>git is so good<br> first change<br> second change<br> stupid Boss</p></div></li><li><p>执行 <strong>git reset</strong> --hard d2bd5c00f98681b17df9a00a34df714466198560 命令将仓库的 HEAD 指针重置到指定的提交 d2bd5c00f98681b17df9a00a34df714466198560，并强制更新工作目录和暂存区，丢弃了之前的修改。</p></li><li><p>执行 cat .\\mygit.txt 命令再次显示了文件 mygit.txt 的内容，恢复到了 d2bd5c00f98681b17df9a00a34df714466198560 提交时的内容：</p><div class="hint-container info"><p class="hint-container-title">mygit.txt 的内容</p><p>git is so good<br> first change<br> second change</p></div></li></ol><p>使用了 <strong>git reset</strong> --hard 命令将仓库重置到了指定的提交，丢弃了之前的修改并恢复到了该提交的状态。</p><h2 id="远程仓库" tabindex="-1"><a class="header-anchor" href="#远程仓库"><span>远程仓库</span></a></h2><hr><p>添加 Gitee 上的远程仓库和克隆仓库的过程涉及一些基本的 Git 命令。以下是添加远程仓库和克隆仓库的步骤：</p><h3 id="添加-gitee-上的远程仓库" tabindex="-1"><a class="header-anchor" href="#添加-gitee-上的远程仓库"><span>添加 Gitee 上的远程仓库：</span></a></h3><ol><li><p><strong>获取 Gitee 仓库地址：</strong></p><ul><li>在 Gitee 上找到你想要使用的仓库，复制仓库的 HTTPS 或 SSH 地址。</li></ul></li><li><p><strong>在本地仓库中添加远程仓库：</strong></p><ul><li><p>在本地仓库的根目录中打开命令行或终端。</p></li><li><p>运行以下命令，将 Gitee 仓库添加为远程仓库：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> remote</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> origin</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://gitee.com/你的用户名/仓库名.git</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>将上述命令中的地址替换为你实际的 Gitee 仓库地址。</p></li></ul></li><li><p><strong>验证远程仓库是否添加成功：</strong></p><ul><li><p>运行以下命令查看已配置的远程仓库：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> remote</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -v</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>这应该显示你添加的远程仓库地址。</p></li></ul></li></ol><h3 id="克隆-gitee-上的仓库" tabindex="-1"><a class="header-anchor" href="#克隆-gitee-上的仓库"><span>克隆 Gitee 上的仓库：</span></a></h3><ol><li><p><strong>获取 Gitee 仓库地址：</strong></p><ul><li>在 Gitee 上找到你想要克隆的仓库，复制仓库的 HTTPS 或 SSH 地址。</li></ul></li><li><p><strong>在本地克隆仓库：</strong></p><ul><li><p>打开命令行或终端，选择要克隆到的本地目录。</p></li><li><p>运行以下命令：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> clone</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://gitee.com/你的用户名/仓库名.git</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>将上述命令中的地址替换为你实际的 Gitee 仓库地址。</p></li></ul></li><li><p><strong>进入克隆的仓库目录：</strong></p><ul><li><p>运行以下命令：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 仓库路径</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>这将进入克隆的仓库目录，你现在可以在这里开始工作。</p></li></ul></li></ol><p>​ 这样，你就成功添加了 Gitee 上的远程仓库并克隆了该仓库到本地。在使用 Git 进行协作和版本控制时，你可以通过远程仓库进行代码的推送和拉取。</p><h2 id="分支管理" tabindex="-1"><a class="header-anchor" href="#分支管理"><span>分支管理</span></a></h2><hr><p>分支 (Branch) 是版本控制系统中一个非常重要的概念，它具有以下几个作用：</p><ol><li><strong>并行开发：</strong><ul><li>分支允许团队在同一代码库中的不同分支上同时进行工作，而不会互相影响。每个分支代表着一个独立的工作线，团队成员可以在自己的分支上独立开发和提交代码。</li></ul></li><li><strong>隔离功能开发：</strong><ul><li>如果团队需要添加新功能，可以在一个新的分支上进行开发，而不会影响主分支上的稳定版本。一旦新功能完成并通过测试，可以将其合并回主分支。</li></ul></li><li><strong>Bug 修复：</strong><ul><li>当在主分支上发现了 bug 时，可以创建一个新的分支来修复 bug，而不会中断正在进行的其他工作。修复后，可以将 bug 修复分支合并回主分支。</li></ul></li><li><strong>版本发布：</strong><ul><li>分支可以用于管理不同版本的代码。例如，可以创建一个用于开发下一个版本的开发分支，同时在主分支上维护当前发布的稳定版本。</li></ul></li><li><strong>实验性开发：</strong><ul><li>如果你想尝试一些实验性的或不确定的更改，可以创建一个专门的分支进行实验，而不会影响主分支的稳定性。</li></ul></li><li><strong>团队协作：</strong><ul><li>不同的团队成员可以在不同的分支上工作，每个人负责自己的任务，而不会冲突。一旦任务完成，可以将其合并到主分支，确保整体的代码库的完整性。</li></ul></li><li><strong>代码审查：</strong><ul><li>分支可以用于实施代码审查。开发人员可以在自己的分支上进行更改，并请求团队成员进行审查。一旦审查通过，可以将更改合并回主分支。</li></ul></li><li><strong>快速回滚：</strong><ul><li>如果某次合并引入了问题，可以很容易地回滚到之前的分支状态，而不影响其他工作。</li></ul></li></ol><p>​ 总体而言，分支使得团队能够更灵活、高效地协同工作，同时确保代码库的稳定性和可维护性。在版本控制中，分支的使用是一种强大的工具，能够有效地管理和组织项目的开发过程。</p><h3 id="创建和合并分支" tabindex="-1"><a class="header-anchor" href="#创建和合并分支"><span>创建和合并分支</span></a></h3><figure><img src="http://101.43.49.28:9000/blog/指针和节点.png" alt="指针和节点" tabindex="0" loading="lazy"><figcaption>指针和节点</figcaption></figure><ul><li>V1,V2,V3 就是我们每一次的提交，也可以看作一个一个时间节点，他们串成一条线，形成一个分支</li><li>master 指向节点，master 就是一条分支，每次提交之后，master 就会往前走一格</li><li>HEAD 指向 master，意思就是表明当前是 master 分支</li></ul><figure><img src="http://101.43.49.28:9000/blog/创建了新分支.png" alt="创建了新分支" tabindex="0" loading="lazy"><figcaption>创建了新分支</figcaption></figure><ul><li>此时，我们创建了一个新的分支 dev，HEAD 指向 dev，意思就是我们当前处于 dev 分支</li></ul><figure><img src="http://101.43.49.28:9000/blog/dev分支提交新节点.png" alt="dev 分支提交新节点" tabindex="0" loading="lazy"><figcaption>dev 分支提交新节点</figcaption></figure><ul><li>此时，在 dev 分支做了提交，dev 分支向前移动一步，master 分支不变</li></ul><figure><img src="http://101.43.49.28:9000/blog/将dev合并到master.png" alt="将 dev 合并到 master" tabindex="0" loading="lazy"><figcaption>将 dev 合并到 master</figcaption></figure><ul><li>此时，我们将 dev 分支合并到 master 分支上，并且切换回 master 分支</li></ul><figure><img src="http://101.43.49.28:9000/blog/删除dev分支.png" alt="删除 dev 分支" tabindex="0" loading="lazy"><figcaption>删除 dev 分支</figcaption></figure><ul><li>此时，开发完毕，我们也不需要 dev 分支了，那我们可以直接删除 dev 分支了</li></ul><p>示例命令：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> switch</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -c</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dev</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> branch</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">echo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;create new branch dev&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">.</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ygit.txt</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ygit.txt</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> commit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;new branch&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ygit.txt</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> checkout</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> master</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cat</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ygit.txt</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> merge</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dev</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cat</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ygit.txt</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> branch</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dev</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> branch</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>执行 <strong>git switch</strong> -c dev 命令创建了一个名为 dev 的新分支，并切换到该分支。</p></li><li><p>执行 <strong>git branch</strong> 命令显示了当前的分支列表，确认 dev 分支已被创建并且会改变当前，使其位于 dev 分支。</p></li><li><p>执行 echo &quot;create new branch dev&quot;&gt;&gt;.\\mygit.txt 命令将 &quot;create new branch dev&quot; 追加到 mygit.txt 文件的末尾。</p></li><li><p>执行 <strong>git add</strong> .\\mygit.txt 命令将文件 mygit.txt 添加到暂存区。</p></li><li><p>执行 git commit -m &quot;new branch&quot; .\\mygit.txt 命令提交了文件 mygit.txt 的修改，并添加了提交信息 &quot;new branch&quot;。</p></li><li><p>执行 <strong>git checkout</strong> master 命令切换回 master 分支。</p></li><li><p>执行 cat .\\mygit.txt 命令显示了文件 mygit.txt 的内容，仍然是 master 分支最后一次提交时的内容：</p><div class="hint-container info"><p class="hint-container-title">mygit.txt 的内容</p><p>git is so good<br> first change<br> second change</p></div></li><li><p>执行 <strong>git merge</strong> dev 命令将 dev 分支的修改合并到当前的 master 分支。这里使用了 Fast-forward 形式的合并，表示直接将 dev 分支的提交应用到 master 分支。</p></li><li><p>执行cat .\\mygit.txt 命令再次显示了文件 mygit.txt 的内容，已经包含了 dev 分支的修改：</p><div class="hint-container info"><p class="hint-container-title">mygit.txt 的内容</p><p>git is so good<br> first change<br> second change<br> create new branch dev</p></div></li><li><p>执行 <strong>git branch</strong> -d dev 命令删除了 dev 分支，因为它的修改已经被合并到了 master 分支。</p></li><li><p>执行 git branch 命令显示了当前的分支列表，确认只剩下 master 分支。</p></li></ol><p>​ 使用了 <strong>git switch -c</strong> 命令创建了一个名为 dev 的新分支，使用 <strong>git checkout</strong> 命令切换回 master 分支，使用 <strong>git merge</strong> 命令将 dev 分支的修改合并到 master 分支。<strong>git branch -d</strong> 命令用于删除分支。</p><h3 id="解决冲突" tabindex="-1"><a class="header-anchor" href="#解决冲突"><span>解决冲突</span></a></h3><p>先在 dev 分支，将端口修改为 5555，之后 commit 和 push</p><div class="language-yml line-numbers-mode" data-highlighter="shiki" data-ext="yml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5555</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在 master 分支，将端口修改为 3333，同样 commit 和 push</p><div class="language-yml line-numbers-mode" data-highlighter="shiki" data-ext="yml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3333</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>之后选择将 dev 分支合并到 master 分支</p><figure><img src="http://101.43.49.28:9000/blog/idea操作方法.png" alt="idea操作方法" tabindex="0" loading="lazy"><figcaption>idea操作方法</figcaption></figure><p>随后，idea 会提示我们无法自动合并，下面就是冲突文件的展示，我们在这里简单选择处理冲突即可</p><figure><img src="http://101.43.49.28:9000/blog/冲突选择.png" alt="冲突选择" tabindex="0" loading="lazy"><figcaption>冲突选择</figcaption></figure><p>处理完冲突之后我们还需要 push 一次，这样 git 记录就会展示我们在 dev 分支的提交记录和合并分支的记录</p><h3 id="bug-分支" tabindex="-1"><a class="header-anchor" href="#bug-分支"><span>Bug 分支</span></a></h3><p>此时，master 分支上的代码是这样，但我想要修改为 Hello World</p><figure><img src="http://101.43.49.28:9000/blog/代码演示1.png" alt="代码演示1" tabindex="0" loading="lazy"><figcaption>代码演示1</figcaption></figure><p>但与此同时，我正在 dev 上开发代码</p><figure><img src="http://101.43.49.28:9000/blog/代码演示2.png" alt="代码演示2" tabindex="0" loading="lazy"><figcaption>代码演示2</figcaption></figure><p>​ 这个时候，在 dev 上开发的代码还未完成，我还不想提交，但是切换分支又需要将代码转移到其他分支，这个时候可以使用 <strong>git stash</strong> 命令，idea 的可视化面板操作相对应下图</p><img alt="idea的git stash操作" src="http://101.43.49.28:9000/blog/idea的git stash操作1.png"><img alt="idea的git stash操作2" src="http://101.43.49.28:9000/blog/idea的git stash操作2.png"><p>这样就可以将代码展示保存起来，那我们就可以切换到 master 分支之后新建一个 bug 分支来解决 bug</p><img alt="idea的git stash操作3" src="http://101.43.49.28:9000/blog/idea的git stash操作3.png"><p>​ 切换到 bug 分支，修改完代码后，我们需要将修改的代码 commit 一下，之后我们再切换回 master 分支去到远程的 master 分支，之后我们将 bug 分支删除即可，之后在切换回我们本地的 dev 分支，之后我们选择 cherry-pick（优选）</p><img alt="idea的git stash操作4" src="http://101.43.49.28:9000/blog/idea的git stash操作4.png"><p>这样，我们在 dev 分支上的 bug 也得到修复了，随后我们再选择 unstash（取消隐藏更改），来恢复我们刚刚的代码</p><img alt="idea的git stash操作5" src="http://101.43.49.28:9000/blog/idea的git stash操作5.png"><p>将 Pop stash（消除隐藏）勾选上，将保存的记录内容恢复并且一并删除</p><h3 id="feature-分支" tabindex="-1"><a class="header-anchor" href="#feature-分支"><span>Feature 分支</span></a></h3><p>​ 遇到项目中需要添加实验性功能的时候，我们就可以新建一个 feature 分支，用来开发这些实验性功能，在开发完成后，再切换到 dev 分支，将这个 feature 分支的代码 merge 一下即可，如果说不想要了，那也可以直接使用 <strong>git branch -D &lt;分支名&gt;</strong>，这样就可以直接删除这个分支了。</p><h3 id="rebase-变基" tabindex="-1"><a class="header-anchor" href="#rebase-变基"><span>Rebase（变基）</span></a></h3><p>​ <strong>git rebase</strong> 是 Git 中的一个强大而常用的命令，用于重新应用提交历史。它的主要作用是将一个分支的提交应用到另一个分支上。</p><p>​ 具体来说，<strong>git rebase</strong> 命令会将一个分支的提交逐个应用到另一个分支上。这意味着，它会将源分支上的每个提交复制到目标分支上，并在每个提交之后重新应用源分支上的更改。这样可以使提交历史更加线性和整洁。</p><p>下面是 <strong>git rebase</strong> 命令的一般用法：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rebase</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">目标分</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">支&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这将当前所在分支的提交逐个应用到目标分支上。</p><p>当你运行 <strong>git rebase</strong> 命令时，Git 会执行以下操作：</p><ol><li>找到当前分支和目标分支的最近共同祖先（即它们最后一次分叉的提交）。</li><li>为当前分支上的每个提交创建一个补丁文件，该补丁文件包含了该提交引入的更改。</li><li>将当前分支切换到目标分支。</li><li>逐个应用之前创建的补丁文件，将每个提交应用到目标分支上。</li><li>解决可能出现的冲突。如果在应用提交时发生冲突，Git 会暂停 rebase 操作并让你解决冲突。</li><li>重复上述步骤，直到所有提交都被应用到目标分支上。</li></ol><p>​ 在执行 <strong>git rebase</strong> 之后，源分支的提交历史将被复制到目标分支上，形成一个新的线性提交历史。这可以使你的提交历史更加清晰，并且可以方便地合并或推送到远程仓库。</p><p>​ 需要注意的是，由于 <strong>git rebase</strong> 会修改提交历史，因此在执行 rebase 操作时应谨慎使用，并且只在本地分支上使用。如果你已经将分支的提交推送到远程仓库，那么在执行 <strong>rebase</strong> 之前最好与团队成员进行沟通，并确保其他人不会在此期间对同一分支进行操作。</p><p>​ 此外，<strong>git rebase</strong> 还有其他一些选项和用法，例如使用 -i 选项进行交互式 rebase，可以在 rebase 过程中修改、删除或合并提交等。你可以通过运行 <strong>git help rebase</strong> 查看 Git 文档中有关 <strong>git rebase</strong> 命令的更多详细信息。</p><p>​ 总结起来，<strong>git rebase</strong> 是一个强大的命令，可以重塑提交历史记录，使其更加线性和整洁。它在开发中经常用于合并分支、整理提交历史等操作。</p><img alt="未执行git rebase时" src="http://101.43.49.28:9000/blog/未执行git rebase时.png"><img alt="执行git rebase后" src="http://101.43.49.28:9000/blog/执行git rebase后.png"><figure><img src="http://101.43.49.28:9000/blog/变基前后的分支对比.png" alt="变基前后的分支对比" tabindex="0" loading="lazy"><figcaption>变基前后的分支对比</figcaption></figure><p>​ 使用变基前后的对比，使用了变基可以让 Git 记录更加像一条直线，主要就是变换了基点，让分支的起点发生了变化，之后将新分支的变化复制到源分支上</p><h2 id="标签管理" tabindex="-1"><a class="header-anchor" href="#标签管理"><span>标签管理</span></a></h2><hr><p>​ 在 Git 中，标签 (Tag) 是用于标记特定提交的指针，通常用于标记版本发布或里程碑。标签可以使你方便地回到特定的提交状态，而不必记住提交的哈希值。下面是一些关于 Git 中标签管理的基本操作：</p><h3 id="查看标签" tabindex="-1"><a class="header-anchor" href="#查看标签"><span>查看标签</span></a></h3><ul><li><p>查看所有标签：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tag</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>查看带有详细信息的标签：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> show</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">tag_nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="创建标签" tabindex="-1"><a class="header-anchor" href="#创建标签"><span>创建标签</span></a></h3><ul><li><p>创建轻量级标签（只是一个指向某个提交的指针）：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tag</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">tag_nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>创建附注标签（包含标签信息、标签者和日期）：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tag</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">tag_nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">-m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Tag message&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">commit_sh</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中，&lt;commit_sha&gt; 是要打标签的提交的 SHA-1 标识符。</p></li></ul><h3 id="推送标签到远程仓库" tabindex="-1"><a class="header-anchor" href="#推送标签到远程仓库"><span>推送标签到远程仓库</span></a></h3><ul><li><p>推送所有标签到远程仓库：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> push</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> origin</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --tags</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>推送单个标签到远程仓库：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> push</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> origin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">tag_nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="删除标签" tabindex="-1"><a class="header-anchor" href="#删除标签"><span>删除标签</span></a></h3><ul><li><p>删除本地标签：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tag</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">tag_nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>删除远程标签：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> push</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> origin</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --delete</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">tag_nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="检出标签" tabindex="-1"><a class="header-anchor" href="#检出标签"><span>检出标签</span></a></h3><ul><li>创建一个新的分支并检出标签：<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> checkout</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">new_branch_nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt; &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">tag_nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="列出与特定提交相关的标签" tabindex="-1"><a class="header-anchor" href="#列出与特定提交相关的标签"><span>列出与特定提交相关的标签</span></a></h3><ul><li><p>查看与特定提交相关的标签：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tag</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --contains</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">commit_sh</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><p>这些是 Git 中标签管理的一些基本操作。使用标签可以使你方便地标记重要的提交或版本，并且在团队协作中发布版本时也很有用。</p>`,183)]))}const g=s(l,[["render",e]]),d=JSON.parse('{"path":"/Linux/Git/git.html","title":"Git","lang":"zh-CN","frontmatter":{"title":"Git","order":2,"category":["Git"],"tag":["Git","分布式"],"date":"2023-12-06T00:00:00.000Z","icon":"iconfont icon-git","description":"集中式与分布式 ​ 集中式版本控制系统（CVCS）和分布式版本控制系统（DVCS）之间存在一些关键的区别，这些区别主要涉及到存储结构、操作方式以及团队协作方面。 存储结构 集中式版本控制系统（CVCS） 中央服务器存储： 所以版本信息都集中纯粹在一个中央服务器上。 开发者在进行任何版本控制操作时，需要与中央服务器进行通信，包括检出、提交、拉去和推送。 ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Git\\",\\"image\\":[\\"http://101.43.49.28:9000/blog/指针的变化.png\\",\\"http://101.43.49.28:9000/blog/指针和节点.png\\",\\"http://101.43.49.28:9000/blog/创建了新分支.png\\",\\"http://101.43.49.28:9000/blog/dev分支提交新节点.png\\",\\"http://101.43.49.28:9000/blog/将dev合并到master.png\\",\\"http://101.43.49.28:9000/blog/删除dev分支.png\\",\\"http://101.43.49.28:9000/blog/idea操作方法.png\\",\\"http://101.43.49.28:9000/blog/冲突选择.png\\",\\"http://101.43.49.28:9000/blog/代码演示1.png\\",\\"http://101.43.49.28:9000/blog/代码演示2.png\\",\\"http://101.43.49.28:9000/blog/变基前后的分支对比.png\\"],\\"datePublished\\":\\"2023-12-06T00:00:00.000Z\\",\\"dateModified\\":\\"2025-04-30T01:23:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.O\\"}]}"],["meta",{"property":"og:url","content":"https://blog.sylphy.me/Linux/Git/git.html"}],["meta",{"property":"og:title","content":"Git"}],["meta",{"property":"og:description","content":"集中式与分布式 ​ 集中式版本控制系统（CVCS）和分布式版本控制系统（DVCS）之间存在一些关键的区别，这些区别主要涉及到存储结构、操作方式以及团队协作方面。 存储结构 集中式版本控制系统（CVCS） 中央服务器存储： 所以版本信息都集中纯粹在一个中央服务器上。 开发者在进行任何版本控制操作时，需要与中央服务器进行通信，包括检出、提交、拉去和推送。 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://101.43.49.28:9000/blog/指针的变化.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-30T01:23:37.000Z"}],["meta",{"property":"article:tag","content":"分布式"}],["meta",{"property":"article:tag","content":"Git"}],["meta",{"property":"article:published_time","content":"2023-12-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-30T01:23:37.000Z"}]]},"git":{"createdTime":1745976217000,"updatedTime":1745976217000,"contributors":[{"name":"Sylphy","username":"Sylphy","email":"sylphy.me@foxmail.com","commits":1,"url":"https://github.com/Sylphy"}]},"readingTime":{"minutes":29.87,"words":8961},"filePathRelative":"Linux/Git/git.md","excerpt":"\\n<hr>\\n<p>​\\t集中式版本控制系统（CVCS）和分布式版本控制系统（DVCS）之间存在一些关键的区别，这些区别主要涉及到存储结构、操作方式以及团队协作方面。</p>\\n<h2>存储结构</h2>\\n<hr>\\n<h3>集中式版本控制系统（CVCS）</h3>\\n<ol>\\n<li><strong>中央服务器存储：</strong>\\n<ul>\\n<li>所以版本信息都集中纯粹在一个中央服务器上。</li>\\n<li>开发者在进行任何版本控制操作时，需要与中央服务器进行通信，包括检出、提交、拉去和推送。</li>\\n</ul>\\n</li>\\n<li><strong>依赖中央服务器：</strong>\\n<ul>\\n<li>开发者的工作区通常只包含他们当前所需的文件，而不是整个项目的完整历史。</li>\\n<li>每次操作都需要与中央服务器同步，依赖于中央服务器的可用性和性能。</li>\\n</ul>\\n</li>\\n<li>协同工作依赖中央服务器：\\n<ul>\\n<li>分支、合并等协同工作的操作都需要通过中央服务器来协调。</li>\\n<li>如果中央服务器出现故障或网络问题，协同工作可能受到影响。</li>\\n</ul>\\n</li>\\n</ol>","autoDesc":true}');export{g as comp,d as data};
